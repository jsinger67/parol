// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use parol_runtime::collection_literals::collection;
use parol_runtime::lr_parser::{LR1State, LRAction, LRParseTable, LRParser, LRProduction};
use parol_runtime::once_cell::sync::Lazy;
#[allow(unused_imports)]
use parol_runtime::parser::{ParseTreeType, ParseType, Production, Trans};
use parol_runtime::{ParolError, ParseTree, TerminalIndex};
use parol_runtime::{ScannerConfig, TokenStream, Tokenizer};
use std::path::Path;

use crate::calc_grammar::CalcGrammar;
use crate::calc_grammar_trait::CalcGrammarAuto;

use parol_runtime::lexer::tokenizer::{
    ERROR_TOKEN, NEW_LINE_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN,
};

pub const TERMINALS: &[&str; 23] = &[
    /*  0 */ UNMATCHABLE_TOKEN,
    /*  1 */ UNMATCHABLE_TOKEN,
    /*  2 */ UNMATCHABLE_TOKEN,
    /*  3 */ UNMATCHABLE_TOKEN,
    /*  4 */ UNMATCHABLE_TOKEN,
    /*  5 */ r";",
    /*  6 */ r"==|!=",
    /*  7 */ r"(\+|-|\*|\/|%|<<|>>|&|\^|\|)?=",
    /*  8 */ r"\|\|",
    /*  9 */ r"\&\&",
    /* 10 */ r"\|",
    /* 11 */ r"\&",
    /* 12 */ r"<<|>>",
    /* 13 */ r"<=|<|>=|>",
    /* 14 */ r"\+",
    /* 15 */ r"\-",
    /* 16 */ r"\*\*",
    /* 17 */ r"\*|\/|%",
    /* 18 */ r"\(",
    /* 19 */ r"\)",
    /* 20 */ r"0|[1-9][0-9]*",
    /* 21 */ r"[a-zA-Z_][a-zA-Z0-9_]*",
    /* 22 */ ERROR_TOKEN,
];

pub const TERMINAL_NAMES: &[&str; 23] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "Semicolon",
    /*  6 */ "EqualityOp",
    /*  7 */ "AssignOp",
    /*  8 */ "LogicalOrOp",
    /*  9 */ "LogicalAndOp",
    /* 10 */ "BitwiseOrOp",
    /* 11 */ "BitwiseAndOp",
    /* 12 */ "BitwiseShiftOp",
    /* 13 */ "RelationalOp",
    /* 14 */ "Plus",
    /* 15 */ "Minus",
    /* 16 */ "PowOp",
    /* 17 */ "MultOp",
    /* 18 */ "LParen",
    /* 19 */ "RParen",
    /* 20 */ "Number",
    /* 21 */ "Id",
    /* 22 */ "Error",
];

/* SCANNER_0: "INITIAL" */
const SCANNER_0: (&[&str; 5], &[TerminalIndex; 17]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ NEW_LINE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ r"(//.*(\r\n|\r|\n|$))",
        /*  4 */ r"((?ms)/\*.*?\*/)",
    ],
    &[
        5,  /* Semicolon */
        6,  /* EqualityOp */
        7,  /* AssignOp */
        8,  /* LogicalOrOp */
        9,  /* LogicalAndOp */
        10, /* BitwiseOrOp */
        11, /* BitwiseAndOp */
        12, /* BitwiseShiftOp */
        13, /* RelationalOp */
        14, /* Plus */
        15, /* Minus */
        16, /* PowOp */
        17, /* MultOp */
        18, /* LParen */
        19, /* RParen */
        20, /* Number */
        21, /* Id */
    ],
);

pub const NON_TERMINALS: &[&str; 44] = &[
    /*  0 */ "AddOp",
    /*  1 */ "AssignItem",
    /*  2 */ "AssignOp",
    /*  3 */ "Assignment",
    /*  4 */ "AssignmentList",
    /*  5 */ "BitwiseAnd",
    /*  6 */ "BitwiseAndList",
    /*  7 */ "BitwiseAndOp",
    /*  8 */ "BitwiseOr",
    /*  9 */ "BitwiseOrList",
    /* 10 */ "BitwiseOrOp",
    /* 11 */ "BitwiseShift",
    /* 12 */ "BitwiseShiftList",
    /* 13 */ "BitwiseShiftOp",
    /* 14 */ "Calc",
    /* 15 */ "CalcList",
    /* 16 */ "Equality",
    /* 17 */ "EqualityList",
    /* 18 */ "EqualityOp",
    /* 19 */ "Factor",
    /* 20 */ "Id",
    /* 21 */ "IdRef",
    /* 22 */ "Instruction",
    /* 23 */ "LogicalAnd",
    /* 24 */ "LogicalAndList",
    /* 25 */ "LogicalAndOp",
    /* 26 */ "LogicalOr",
    /* 27 */ "LogicalOrList",
    /* 28 */ "LogicalOrOp",
    /* 29 */ "Minus",
    /* 30 */ "Mult",
    /* 31 */ "MultList",
    /* 32 */ "MultOp",
    /* 33 */ "Negate",
    /* 34 */ "Number",
    /* 35 */ "Plus",
    /* 36 */ "PowOp",
    /* 37 */ "Power",
    /* 38 */ "PowerList",
    /* 39 */ "Relational",
    /* 40 */ "RelationalList",
    /* 41 */ "RelationalOp",
    /* 42 */ "Summ",
    /* 43 */ "SummList",
];

static PARSE_TABLE: Lazy<LRParseTable> = Lazy::new(|| {
    LRParseTable::new(vec![
        // State 0
        LR1State {
            actions: collection! {
                0 /* '<$>' */ => LRAction::Reduce(15 /*CalcList*/, 2),
                15 /* '-' */ => LRAction::Reduce(15 /*CalcList*/, 2),
                18 /* '(' */ => LRAction::Reduce(15 /*CalcList*/, 2),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(15 /*CalcList*/, 2),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(15 /*CalcList*/, 2),
            },
            gotos: collection! {
                15 /* CalcList */ => 1,
            },
        },
        // State 1
        LR1State {
            actions: collection! {
                0 /* '<$>' */ => LRAction::Accept,
                15 /* '-' */ => LRAction::Shift(2),
                18 /* '(' */ => LRAction::Shift(3),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Shift(4),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Shift(5),
            },
            gotos: collection! {
                1 /* AssignItem */ => 6,
                3 /* Assignment */ => 7,
                5 /* BitwiseAnd */ => 8,
                8 /* BitwiseOr */ => 9,
                11 /* BitwiseShift */ => 10,
                16 /* Equality */ => 11,
                19 /* Factor */ => 12,
                20 /* Id */ => 13,
                21 /* IdRef */ => 14,
                22 /* Instruction */ => 15,
                23 /* LogicalAnd */ => 16,
                26 /* LogicalOr */ => 17,
                29 /* Minus */ => 18,
                30 /* Mult */ => 19,
                33 /* Negate */ => 20,
                34 /* Number */ => 21,
                37 /* Power */ => 22,
                39 /* Relational */ => 23,
                42 /* Summ */ => 24,
            },
        },
        // State 2
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(29 /*Minus*/, 12),
                18 /* '(' */ => LRAction::Reduce(29 /*Minus*/, 12),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(29 /*Minus*/, 12),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(29 /*Minus*/, 12),
            },
            gotos: collection! {},
        },
        // State 3
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Shift(2),
                18 /* '(' */ => LRAction::Shift(3),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Shift(4),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Shift(5),
            },
            gotos: collection! {
                5 /* BitwiseAnd */ => 8,
                8 /* BitwiseOr */ => 9,
                11 /* BitwiseShift */ => 10,
                16 /* Equality */ => 11,
                19 /* Factor */ => 12,
                20 /* Id */ => 25,
                21 /* IdRef */ => 14,
                23 /* LogicalAnd */ => 16,
                26 /* LogicalOr */ => 26,
                29 /* Minus */ => 18,
                30 /* Mult */ => 19,
                33 /* Negate */ => 20,
                34 /* Number */ => 21,
                37 /* Power */ => 22,
                39 /* Relational */ => 23,
                42 /* Summ */ => 24,
            },
        },
        // State 4
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(34 /*Number*/, 58),
                6 /* '==|!=' */ => LRAction::Reduce(34 /*Number*/, 58),
                8 /* '||' */ => LRAction::Reduce(34 /*Number*/, 58),
                9 /* '&&' */ => LRAction::Reduce(34 /*Number*/, 58),
                10 /* '|' */ => LRAction::Reduce(34 /*Number*/, 58),
                11 /* '&' */ => LRAction::Reduce(34 /*Number*/, 58),
                12 /* '<<|>>' */ => LRAction::Reduce(34 /*Number*/, 58),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(34 /*Number*/, 58),
                14 /* '+' */ => LRAction::Reduce(34 /*Number*/, 58),
                15 /* '-' */ => LRAction::Reduce(34 /*Number*/, 58),
                16 /* '**' */ => LRAction::Reduce(34 /*Number*/, 58),
                17 /* '\*|\/|%' */ => LRAction::Reduce(34 /*Number*/, 58),
                19 /* ')' */ => LRAction::Reduce(34 /*Number*/, 58),
            },
            gotos: collection! {},
        },
        // State 5
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(20 /*Id*/, 60),
                6 /* '==|!=' */ => LRAction::Reduce(20 /*Id*/, 60),
                7 /* '(\+|-|\*|\/|%|<<|>>|&|\^|\|)?=' */ => LRAction::Reduce(20 /*Id*/, 60),
                8 /* '||' */ => LRAction::Reduce(20 /*Id*/, 60),
                9 /* '&&' */ => LRAction::Reduce(20 /*Id*/, 60),
                10 /* '|' */ => LRAction::Reduce(20 /*Id*/, 60),
                11 /* '&' */ => LRAction::Reduce(20 /*Id*/, 60),
                12 /* '<<|>>' */ => LRAction::Reduce(20 /*Id*/, 60),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(20 /*Id*/, 60),
                14 /* '+' */ => LRAction::Reduce(20 /*Id*/, 60),
                15 /* '-' */ => LRAction::Reduce(20 /*Id*/, 60),
                16 /* '**' */ => LRAction::Reduce(20 /*Id*/, 60),
                17 /* '\*|\/|%' */ => LRAction::Reduce(20 /*Id*/, 60),
                19 /* ')' */ => LRAction::Reduce(20 /*Id*/, 60),
            },
            gotos: collection! {},
        },
        // State 6
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(4 /*AssignmentList*/, 20),
                18 /* '(' */ => LRAction::Reduce(4 /*AssignmentList*/, 20),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(4 /*AssignmentList*/, 20),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(4 /*AssignmentList*/, 20),
            },
            gotos: collection! {
                4 /* AssignmentList */ => 27,
            },
        },
        // State 7
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(22 /*Instruction*/, 15),
            },
            gotos: collection! {},
        },
        // State 8
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(9 /*BitwiseOrList*/, 29),
                8 /* '||' */ => LRAction::Reduce(9 /*BitwiseOrList*/, 29),
                9 /* '&&' */ => LRAction::Reduce(9 /*BitwiseOrList*/, 29),
                10 /* '|' */ => LRAction::Reduce(9 /*BitwiseOrList*/, 29),
                19 /* ')' */ => LRAction::Reduce(9 /*BitwiseOrList*/, 29),
            },
            gotos: collection! {
                9 /* BitwiseOrList */ => 28,
            },
        },
        // State 9
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(24 /*LogicalAndList*/, 26),
                8 /* '||' */ => LRAction::Reduce(24 /*LogicalAndList*/, 26),
                9 /* '&&' */ => LRAction::Reduce(24 /*LogicalAndList*/, 26),
                19 /* ')' */ => LRAction::Reduce(24 /*LogicalAndList*/, 26),
            },
            gotos: collection! {
                24 /* LogicalAndList */ => 29,
            },
        },
        // State 10
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(40 /*RelationalList*/, 38),
                6 /* '==|!=' */ => LRAction::Reduce(40 /*RelationalList*/, 38),
                8 /* '||' */ => LRAction::Reduce(40 /*RelationalList*/, 38),
                9 /* '&&' */ => LRAction::Reduce(40 /*RelationalList*/, 38),
                10 /* '|' */ => LRAction::Reduce(40 /*RelationalList*/, 38),
                11 /* '&' */ => LRAction::Reduce(40 /*RelationalList*/, 38),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(40 /*RelationalList*/, 38),
                19 /* ')' */ => LRAction::Reduce(40 /*RelationalList*/, 38),
            },
            gotos: collection! {
                40 /* RelationalList */ => 30,
            },
        },
        // State 11
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(6 /*BitwiseAndList*/, 32),
                8 /* '||' */ => LRAction::Reduce(6 /*BitwiseAndList*/, 32),
                9 /* '&&' */ => LRAction::Reduce(6 /*BitwiseAndList*/, 32),
                10 /* '|' */ => LRAction::Reduce(6 /*BitwiseAndList*/, 32),
                11 /* '&' */ => LRAction::Reduce(6 /*BitwiseAndList*/, 32),
                19 /* ')' */ => LRAction::Reduce(6 /*BitwiseAndList*/, 32),
            },
            gotos: collection! {
                6 /* BitwiseAndList */ => 31,
            },
        },
        // State 12
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(38 /*PowerList*/, 52),
                6 /* '==|!=' */ => LRAction::Reduce(38 /*PowerList*/, 52),
                8 /* '||' */ => LRAction::Reduce(38 /*PowerList*/, 52),
                9 /* '&&' */ => LRAction::Reduce(38 /*PowerList*/, 52),
                10 /* '|' */ => LRAction::Reduce(38 /*PowerList*/, 52),
                11 /* '&' */ => LRAction::Reduce(38 /*PowerList*/, 52),
                12 /* '<<|>>' */ => LRAction::Reduce(38 /*PowerList*/, 52),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(38 /*PowerList*/, 52),
                14 /* '+' */ => LRAction::Reduce(38 /*PowerList*/, 52),
                15 /* '-' */ => LRAction::Reduce(38 /*PowerList*/, 52),
                16 /* '**' */ => LRAction::Reduce(38 /*PowerList*/, 52),
                17 /* '\*|\/|%' */ => LRAction::Reduce(38 /*PowerList*/, 52),
                19 /* ')' */ => LRAction::Reduce(38 /*PowerList*/, 52),
            },
            gotos: collection! {
                38 /* PowerList */ => 32,
            },
        },
        // State 13
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                6 /* '==|!=' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                7 /* '(\+|-|\*|\/|%|<<|>>|&|\^|\|)?=' */ => LRAction::Shift(33),
                8 /* '||' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                9 /* '&&' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                10 /* '|' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                11 /* '&' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                12 /* '<<|>>' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                14 /* '+' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                15 /* '-' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                16 /* '**' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                17 /* '\*|\/|%' */ => LRAction::Reduce(21 /*IdRef*/, 59),
            },
            gotos: collection! {
                2 /* AssignOp */ => 34,
            },
        },
        // State 14
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(19 /*Factor*/, 56),
                6 /* '==|!=' */ => LRAction::Reduce(19 /*Factor*/, 56),
                8 /* '||' */ => LRAction::Reduce(19 /*Factor*/, 56),
                9 /* '&&' */ => LRAction::Reduce(19 /*Factor*/, 56),
                10 /* '|' */ => LRAction::Reduce(19 /*Factor*/, 56),
                11 /* '&' */ => LRAction::Reduce(19 /*Factor*/, 56),
                12 /* '<<|>>' */ => LRAction::Reduce(19 /*Factor*/, 56),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(19 /*Factor*/, 56),
                14 /* '+' */ => LRAction::Reduce(19 /*Factor*/, 56),
                15 /* '-' */ => LRAction::Reduce(19 /*Factor*/, 56),
                16 /* '**' */ => LRAction::Reduce(19 /*Factor*/, 56),
                17 /* '\*|\/|%' */ => LRAction::Reduce(19 /*Factor*/, 56),
                19 /* ')' */ => LRAction::Reduce(19 /*Factor*/, 56),
            },
            gotos: collection! {},
        },
        // State 15
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Shift(35),
            },
            gotos: collection! {},
        },
        // State 16
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(27 /*LogicalOrList*/, 23),
                8 /* '||' */ => LRAction::Reduce(27 /*LogicalOrList*/, 23),
                19 /* ')' */ => LRAction::Reduce(27 /*LogicalOrList*/, 23),
            },
            gotos: collection! {
                27 /* LogicalOrList */ => 36,
            },
        },
        // State 17
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(22 /*Instruction*/, 16),
            },
            gotos: collection! {},
        },
        // State 18
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(33 /*Negate*/, 53),
                18 /* '(' */ => LRAction::Reduce(33 /*Negate*/, 53),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(33 /*Negate*/, 53),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(33 /*Negate*/, 53),
            },
            gotos: collection! {},
        },
        // State 19
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(43 /*SummList*/, 46),
                6 /* '==|!=' */ => LRAction::Reduce(43 /*SummList*/, 46),
                8 /* '||' */ => LRAction::Reduce(43 /*SummList*/, 46),
                9 /* '&&' */ => LRAction::Reduce(43 /*SummList*/, 46),
                10 /* '|' */ => LRAction::Reduce(43 /*SummList*/, 46),
                11 /* '&' */ => LRAction::Reduce(43 /*SummList*/, 46),
                12 /* '<<|>>' */ => LRAction::Reduce(43 /*SummList*/, 46),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(43 /*SummList*/, 46),
                14 /* '+' */ => LRAction::Reduce(43 /*SummList*/, 46),
                15 /* '-' */ => LRAction::Reduce(43 /*SummList*/, 46),
                19 /* ')' */ => LRAction::Reduce(43 /*SummList*/, 46),
            },
            gotos: collection! {
                43 /* SummList */ => 37,
            },
        },
        // State 20
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Shift(2),
                18 /* '(' */ => LRAction::Shift(3),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Shift(4),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Shift(5),
            },
            gotos: collection! {
                19 /* Factor */ => 38,
                20 /* Id */ => 25,
                21 /* IdRef */ => 14,
                29 /* Minus */ => 18,
                33 /* Negate */ => 20,
                34 /* Number */ => 21,
            },
        },
        // State 21
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(19 /*Factor*/, 54),
                6 /* '==|!=' */ => LRAction::Reduce(19 /*Factor*/, 54),
                8 /* '||' */ => LRAction::Reduce(19 /*Factor*/, 54),
                9 /* '&&' */ => LRAction::Reduce(19 /*Factor*/, 54),
                10 /* '|' */ => LRAction::Reduce(19 /*Factor*/, 54),
                11 /* '&' */ => LRAction::Reduce(19 /*Factor*/, 54),
                12 /* '<<|>>' */ => LRAction::Reduce(19 /*Factor*/, 54),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(19 /*Factor*/, 54),
                14 /* '+' */ => LRAction::Reduce(19 /*Factor*/, 54),
                15 /* '-' */ => LRAction::Reduce(19 /*Factor*/, 54),
                16 /* '**' */ => LRAction::Reduce(19 /*Factor*/, 54),
                17 /* '\*|\/|%' */ => LRAction::Reduce(19 /*Factor*/, 54),
                19 /* ')' */ => LRAction::Reduce(19 /*Factor*/, 54),
            },
            gotos: collection! {},
        },
        // State 22
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(31 /*MultList*/, 49),
                6 /* '==|!=' */ => LRAction::Reduce(31 /*MultList*/, 49),
                8 /* '||' */ => LRAction::Reduce(31 /*MultList*/, 49),
                9 /* '&&' */ => LRAction::Reduce(31 /*MultList*/, 49),
                10 /* '|' */ => LRAction::Reduce(31 /*MultList*/, 49),
                11 /* '&' */ => LRAction::Reduce(31 /*MultList*/, 49),
                12 /* '<<|>>' */ => LRAction::Reduce(31 /*MultList*/, 49),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(31 /*MultList*/, 49),
                14 /* '+' */ => LRAction::Reduce(31 /*MultList*/, 49),
                15 /* '-' */ => LRAction::Reduce(31 /*MultList*/, 49),
                17 /* '\*|\/|%' */ => LRAction::Reduce(31 /*MultList*/, 49),
                19 /* ')' */ => LRAction::Reduce(31 /*MultList*/, 49),
            },
            gotos: collection! {
                31 /* MultList */ => 39,
            },
        },
        // State 23
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(17 /*EqualityList*/, 35),
                6 /* '==|!=' */ => LRAction::Reduce(17 /*EqualityList*/, 35),
                8 /* '||' */ => LRAction::Reduce(17 /*EqualityList*/, 35),
                9 /* '&&' */ => LRAction::Reduce(17 /*EqualityList*/, 35),
                10 /* '|' */ => LRAction::Reduce(17 /*EqualityList*/, 35),
                11 /* '&' */ => LRAction::Reduce(17 /*EqualityList*/, 35),
                19 /* ')' */ => LRAction::Reduce(17 /*EqualityList*/, 35),
            },
            gotos: collection! {
                17 /* EqualityList */ => 40,
            },
        },
        // State 24
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 41),
                6 /* '==|!=' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 41),
                8 /* '||' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 41),
                9 /* '&&' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 41),
                10 /* '|' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 41),
                11 /* '&' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 41),
                12 /* '<<|>>' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 41),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 41),
                19 /* ')' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 41),
            },
            gotos: collection! {
                12 /* BitwiseShiftList */ => 41,
            },
        },
        // State 25
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                6 /* '==|!=' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                8 /* '||' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                9 /* '&&' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                10 /* '|' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                11 /* '&' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                12 /* '<<|>>' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                14 /* '+' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                15 /* '-' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                16 /* '**' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                17 /* '\*|\/|%' */ => LRAction::Reduce(21 /*IdRef*/, 59),
                19 /* ')' */ => LRAction::Reduce(21 /*IdRef*/, 59),
            },
            gotos: collection! {},
        },
        // State 26
        LR1State {
            actions: collection! {
                19 /* ')' */ => LRAction::Shift(42),
            },
            gotos: collection! {},
        },
        // State 27
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Shift(2),
                18 /* '(' */ => LRAction::Shift(3),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Shift(4),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Shift(5),
            },
            gotos: collection! {
                1 /* AssignItem */ => 43,
                5 /* BitwiseAnd */ => 8,
                8 /* BitwiseOr */ => 9,
                11 /* BitwiseShift */ => 10,
                16 /* Equality */ => 11,
                19 /* Factor */ => 12,
                20 /* Id */ => 13,
                21 /* IdRef */ => 14,
                23 /* LogicalAnd */ => 16,
                26 /* LogicalOr */ => 44,
                29 /* Minus */ => 18,
                30 /* Mult */ => 19,
                33 /* Negate */ => 20,
                34 /* Number */ => 21,
                37 /* Power */ => 22,
                39 /* Relational */ => 23,
                42 /* Summ */ => 24,
            },
        },
        // State 28
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(8 /*BitwiseOr*/, 27),
                8 /* '||' */ => LRAction::Reduce(8 /*BitwiseOr*/, 27),
                9 /* '&&' */ => LRAction::Reduce(8 /*BitwiseOr*/, 27),
                10 /* '|' */ => LRAction::Shift(45),
                19 /* ')' */ => LRAction::Reduce(8 /*BitwiseOr*/, 27),
            },
            gotos: collection! {
                10 /* BitwiseOrOp */ => 46,
            },
        },
        // State 29
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(23 /*LogicalAnd*/, 24),
                8 /* '||' */ => LRAction::Reduce(23 /*LogicalAnd*/, 24),
                9 /* '&&' */ => LRAction::Shift(47),
                19 /* ')' */ => LRAction::Reduce(23 /*LogicalAnd*/, 24),
            },
            gotos: collection! {
                25 /* LogicalAndOp */ => 48,
            },
        },
        // State 30
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(39 /*Relational*/, 36),
                6 /* '==|!=' */ => LRAction::Reduce(39 /*Relational*/, 36),
                8 /* '||' */ => LRAction::Reduce(39 /*Relational*/, 36),
                9 /* '&&' */ => LRAction::Reduce(39 /*Relational*/, 36),
                10 /* '|' */ => LRAction::Reduce(39 /*Relational*/, 36),
                11 /* '&' */ => LRAction::Reduce(39 /*Relational*/, 36),
                13 /* '<=|<|>=|>' */ => LRAction::Shift(49),
                19 /* ')' */ => LRAction::Reduce(39 /*Relational*/, 36),
            },
            gotos: collection! {
                41 /* RelationalOp */ => 50,
            },
        },
        // State 31
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(5 /*BitwiseAnd*/, 30),
                8 /* '||' */ => LRAction::Reduce(5 /*BitwiseAnd*/, 30),
                9 /* '&&' */ => LRAction::Reduce(5 /*BitwiseAnd*/, 30),
                10 /* '|' */ => LRAction::Reduce(5 /*BitwiseAnd*/, 30),
                11 /* '&' */ => LRAction::Shift(51),
                19 /* ')' */ => LRAction::Reduce(5 /*BitwiseAnd*/, 30),
            },
            gotos: collection! {
                7 /* BitwiseAndOp */ => 52,
            },
        },
        // State 32
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(37 /*Power*/, 50),
                6 /* '==|!=' */ => LRAction::Reduce(37 /*Power*/, 50),
                8 /* '||' */ => LRAction::Reduce(37 /*Power*/, 50),
                9 /* '&&' */ => LRAction::Reduce(37 /*Power*/, 50),
                10 /* '|' */ => LRAction::Reduce(37 /*Power*/, 50),
                11 /* '&' */ => LRAction::Reduce(37 /*Power*/, 50),
                12 /* '<<|>>' */ => LRAction::Reduce(37 /*Power*/, 50),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(37 /*Power*/, 50),
                14 /* '+' */ => LRAction::Reduce(37 /*Power*/, 50),
                15 /* '-' */ => LRAction::Reduce(37 /*Power*/, 50),
                16 /* '**' */ => LRAction::Shift(53),
                17 /* '\*|\/|%' */ => LRAction::Reduce(37 /*Power*/, 50),
                19 /* ')' */ => LRAction::Reduce(37 /*Power*/, 50),
            },
            gotos: collection! {
                36 /* PowOp */ => 54,
            },
        },
        // State 33
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(2 /*AssignOp*/, 4),
                18 /* '(' */ => LRAction::Reduce(2 /*AssignOp*/, 4),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(2 /*AssignOp*/, 4),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(2 /*AssignOp*/, 4),
            },
            gotos: collection! {},
        },
        // State 34
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(1 /*AssignItem*/, 17),
                18 /* '(' */ => LRAction::Reduce(1 /*AssignItem*/, 17),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(1 /*AssignItem*/, 17),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(1 /*AssignItem*/, 17),
            },
            gotos: collection! {},
        },
        // State 35
        LR1State {
            actions: collection! {
                0 /* '<$>' */ => LRAction::Reduce(15 /*CalcList*/, 1),
                15 /* '-' */ => LRAction::Reduce(15 /*CalcList*/, 1),
                18 /* '(' */ => LRAction::Reduce(15 /*CalcList*/, 1),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(15 /*CalcList*/, 1),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(15 /*CalcList*/, 1),
            },
            gotos: collection! {},
        },
        // State 36
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(26 /*LogicalOr*/, 21),
                8 /* '||' */ => LRAction::Shift(55),
                19 /* ')' */ => LRAction::Reduce(26 /*LogicalOr*/, 21),
            },
            gotos: collection! {
                28 /* LogicalOrOp */ => 56,
            },
        },
        // State 37
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(42 /*Summ*/, 44),
                6 /* '==|!=' */ => LRAction::Reduce(42 /*Summ*/, 44),
                8 /* '||' */ => LRAction::Reduce(42 /*Summ*/, 44),
                9 /* '&&' */ => LRAction::Reduce(42 /*Summ*/, 44),
                10 /* '|' */ => LRAction::Reduce(42 /*Summ*/, 44),
                11 /* '&' */ => LRAction::Reduce(42 /*Summ*/, 44),
                12 /* '<<|>>' */ => LRAction::Reduce(42 /*Summ*/, 44),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(42 /*Summ*/, 44),
                14 /* '+' */ => LRAction::Shift(57),
                15 /* '-' */ => LRAction::Shift(2),
                19 /* ')' */ => LRAction::Reduce(42 /*Summ*/, 44),
            },
            gotos: collection! {
                0 /* AddOp */ => 58,
                29 /* Minus */ => 59,
                35 /* Plus */ => 60,
            },
        },
        // State 38
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(19 /*Factor*/, 55),
                6 /* '==|!=' */ => LRAction::Reduce(19 /*Factor*/, 55),
                8 /* '||' */ => LRAction::Reduce(19 /*Factor*/, 55),
                9 /* '&&' */ => LRAction::Reduce(19 /*Factor*/, 55),
                10 /* '|' */ => LRAction::Reduce(19 /*Factor*/, 55),
                11 /* '&' */ => LRAction::Reduce(19 /*Factor*/, 55),
                12 /* '<<|>>' */ => LRAction::Reduce(19 /*Factor*/, 55),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(19 /*Factor*/, 55),
                14 /* '+' */ => LRAction::Reduce(19 /*Factor*/, 55),
                15 /* '-' */ => LRAction::Reduce(19 /*Factor*/, 55),
                16 /* '**' */ => LRAction::Reduce(19 /*Factor*/, 55),
                17 /* '\*|\/|%' */ => LRAction::Reduce(19 /*Factor*/, 55),
                19 /* ')' */ => LRAction::Reduce(19 /*Factor*/, 55),
            },
            gotos: collection! {},
        },
        // State 39
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(30 /*Mult*/, 47),
                6 /* '==|!=' */ => LRAction::Reduce(30 /*Mult*/, 47),
                8 /* '||' */ => LRAction::Reduce(30 /*Mult*/, 47),
                9 /* '&&' */ => LRAction::Reduce(30 /*Mult*/, 47),
                10 /* '|' */ => LRAction::Reduce(30 /*Mult*/, 47),
                11 /* '&' */ => LRAction::Reduce(30 /*Mult*/, 47),
                12 /* '<<|>>' */ => LRAction::Reduce(30 /*Mult*/, 47),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(30 /*Mult*/, 47),
                14 /* '+' */ => LRAction::Reduce(30 /*Mult*/, 47),
                15 /* '-' */ => LRAction::Reduce(30 /*Mult*/, 47),
                17 /* '\*|\/|%' */ => LRAction::Shift(61),
                19 /* ')' */ => LRAction::Reduce(30 /*Mult*/, 47),
            },
            gotos: collection! {
                32 /* MultOp */ => 62,
            },
        },
        // State 40
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(16 /*Equality*/, 33),
                6 /* '==|!=' */ => LRAction::Shift(63),
                8 /* '||' */ => LRAction::Reduce(16 /*Equality*/, 33),
                9 /* '&&' */ => LRAction::Reduce(16 /*Equality*/, 33),
                10 /* '|' */ => LRAction::Reduce(16 /*Equality*/, 33),
                11 /* '&' */ => LRAction::Reduce(16 /*Equality*/, 33),
                19 /* ')' */ => LRAction::Reduce(16 /*Equality*/, 33),
            },
            gotos: collection! {
                18 /* EqualityOp */ => 64,
            },
        },
        // State 41
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(11 /*BitwiseShift*/, 39),
                6 /* '==|!=' */ => LRAction::Reduce(11 /*BitwiseShift*/, 39),
                8 /* '||' */ => LRAction::Reduce(11 /*BitwiseShift*/, 39),
                9 /* '&&' */ => LRAction::Reduce(11 /*BitwiseShift*/, 39),
                10 /* '|' */ => LRAction::Reduce(11 /*BitwiseShift*/, 39),
                11 /* '&' */ => LRAction::Reduce(11 /*BitwiseShift*/, 39),
                12 /* '<<|>>' */ => LRAction::Shift(65),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(11 /*BitwiseShift*/, 39),
                19 /* ')' */ => LRAction::Reduce(11 /*BitwiseShift*/, 39),
            },
            gotos: collection! {
                13 /* BitwiseShiftOp */ => 66,
            },
        },
        // State 42
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(19 /*Factor*/, 57),
                6 /* '==|!=' */ => LRAction::Reduce(19 /*Factor*/, 57),
                8 /* '||' */ => LRAction::Reduce(19 /*Factor*/, 57),
                9 /* '&&' */ => LRAction::Reduce(19 /*Factor*/, 57),
                10 /* '|' */ => LRAction::Reduce(19 /*Factor*/, 57),
                11 /* '&' */ => LRAction::Reduce(19 /*Factor*/, 57),
                12 /* '<<|>>' */ => LRAction::Reduce(19 /*Factor*/, 57),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(19 /*Factor*/, 57),
                14 /* '+' */ => LRAction::Reduce(19 /*Factor*/, 57),
                15 /* '-' */ => LRAction::Reduce(19 /*Factor*/, 57),
                16 /* '**' */ => LRAction::Reduce(19 /*Factor*/, 57),
                17 /* '\*|\/|%' */ => LRAction::Reduce(19 /*Factor*/, 57),
                19 /* ')' */ => LRAction::Reduce(19 /*Factor*/, 57),
            },
            gotos: collection! {},
        },
        // State 43
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(4 /*AssignmentList*/, 19),
                18 /* '(' */ => LRAction::Reduce(4 /*AssignmentList*/, 19),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(4 /*AssignmentList*/, 19),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(4 /*AssignmentList*/, 19),
            },
            gotos: collection! {},
        },
        // State 44
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(3 /*Assignment*/, 18),
            },
            gotos: collection! {},
        },
        // State 45
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(10 /*BitwiseOrOp*/, 7),
                18 /* '(' */ => LRAction::Reduce(10 /*BitwiseOrOp*/, 7),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(10 /*BitwiseOrOp*/, 7),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(10 /*BitwiseOrOp*/, 7),
            },
            gotos: collection! {},
        },
        // State 46
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Shift(2),
                18 /* '(' */ => LRAction::Shift(3),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Shift(4),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Shift(5),
            },
            gotos: collection! {
                5 /* BitwiseAnd */ => 67,
                11 /* BitwiseShift */ => 10,
                16 /* Equality */ => 11,
                19 /* Factor */ => 12,
                20 /* Id */ => 25,
                21 /* IdRef */ => 14,
                29 /* Minus */ => 18,
                30 /* Mult */ => 19,
                33 /* Negate */ => 20,
                34 /* Number */ => 21,
                37 /* Power */ => 22,
                39 /* Relational */ => 23,
                42 /* Summ */ => 24,
            },
        },
        // State 47
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(25 /*LogicalAndOp*/, 6),
                18 /* '(' */ => LRAction::Reduce(25 /*LogicalAndOp*/, 6),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(25 /*LogicalAndOp*/, 6),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(25 /*LogicalAndOp*/, 6),
            },
            gotos: collection! {},
        },
        // State 48
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Shift(2),
                18 /* '(' */ => LRAction::Shift(3),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Shift(4),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Shift(5),
            },
            gotos: collection! {
                5 /* BitwiseAnd */ => 8,
                8 /* BitwiseOr */ => 68,
                11 /* BitwiseShift */ => 10,
                16 /* Equality */ => 11,
                19 /* Factor */ => 12,
                20 /* Id */ => 25,
                21 /* IdRef */ => 14,
                29 /* Minus */ => 18,
                30 /* Mult */ => 19,
                33 /* Negate */ => 20,
                34 /* Number */ => 21,
                37 /* Power */ => 22,
                39 /* Relational */ => 23,
                42 /* Summ */ => 24,
            },
        },
        // State 49
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(41 /*RelationalOp*/, 10),
                18 /* '(' */ => LRAction::Reduce(41 /*RelationalOp*/, 10),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(41 /*RelationalOp*/, 10),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(41 /*RelationalOp*/, 10),
            },
            gotos: collection! {},
        },
        // State 50
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Shift(2),
                18 /* '(' */ => LRAction::Shift(3),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Shift(4),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Shift(5),
            },
            gotos: collection! {
                11 /* BitwiseShift */ => 69,
                19 /* Factor */ => 12,
                20 /* Id */ => 25,
                21 /* IdRef */ => 14,
                29 /* Minus */ => 18,
                30 /* Mult */ => 19,
                33 /* Negate */ => 20,
                34 /* Number */ => 21,
                37 /* Power */ => 22,
                42 /* Summ */ => 24,
            },
        },
        // State 51
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(7 /*BitwiseAndOp*/, 8),
                18 /* '(' */ => LRAction::Reduce(7 /*BitwiseAndOp*/, 8),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(7 /*BitwiseAndOp*/, 8),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(7 /*BitwiseAndOp*/, 8),
            },
            gotos: collection! {},
        },
        // State 52
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Shift(2),
                18 /* '(' */ => LRAction::Shift(3),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Shift(4),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Shift(5),
            },
            gotos: collection! {
                11 /* BitwiseShift */ => 10,
                16 /* Equality */ => 70,
                19 /* Factor */ => 12,
                20 /* Id */ => 25,
                21 /* IdRef */ => 14,
                29 /* Minus */ => 18,
                30 /* Mult */ => 19,
                33 /* Negate */ => 20,
                34 /* Number */ => 21,
                37 /* Power */ => 22,
                39 /* Relational */ => 23,
                42 /* Summ */ => 24,
            },
        },
        // State 53
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(36 /*PowOp*/, 13),
                18 /* '(' */ => LRAction::Reduce(36 /*PowOp*/, 13),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(36 /*PowOp*/, 13),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(36 /*PowOp*/, 13),
            },
            gotos: collection! {},
        },
        // State 54
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Shift(2),
                18 /* '(' */ => LRAction::Shift(3),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Shift(4),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Shift(5),
            },
            gotos: collection! {
                19 /* Factor */ => 71,
                20 /* Id */ => 25,
                21 /* IdRef */ => 14,
                29 /* Minus */ => 18,
                33 /* Negate */ => 20,
                34 /* Number */ => 21,
            },
        },
        // State 55
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(28 /*LogicalOrOp*/, 5),
                18 /* '(' */ => LRAction::Reduce(28 /*LogicalOrOp*/, 5),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(28 /*LogicalOrOp*/, 5),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(28 /*LogicalOrOp*/, 5),
            },
            gotos: collection! {},
        },
        // State 56
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Shift(2),
                18 /* '(' */ => LRAction::Shift(3),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Shift(4),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Shift(5),
            },
            gotos: collection! {
                5 /* BitwiseAnd */ => 8,
                8 /* BitwiseOr */ => 9,
                11 /* BitwiseShift */ => 10,
                16 /* Equality */ => 11,
                19 /* Factor */ => 12,
                20 /* Id */ => 25,
                21 /* IdRef */ => 14,
                23 /* LogicalAnd */ => 72,
                29 /* Minus */ => 18,
                30 /* Mult */ => 19,
                33 /* Negate */ => 20,
                34 /* Number */ => 21,
                37 /* Power */ => 22,
                39 /* Relational */ => 23,
                42 /* Summ */ => 24,
            },
        },
        // State 57
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(35 /*Plus*/, 11),
                18 /* '(' */ => LRAction::Reduce(35 /*Plus*/, 11),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(35 /*Plus*/, 11),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(35 /*Plus*/, 11),
            },
            gotos: collection! {},
        },
        // State 58
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Shift(2),
                18 /* '(' */ => LRAction::Shift(3),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Shift(4),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Shift(5),
            },
            gotos: collection! {
                19 /* Factor */ => 12,
                20 /* Id */ => 25,
                21 /* IdRef */ => 14,
                29 /* Minus */ => 18,
                30 /* Mult */ => 73,
                33 /* Negate */ => 20,
                34 /* Number */ => 21,
                37 /* Power */ => 22,
            },
        },
        // State 59
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(0 /*AddOp*/, 43),
                18 /* '(' */ => LRAction::Reduce(0 /*AddOp*/, 43),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(0 /*AddOp*/, 43),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(0 /*AddOp*/, 43),
            },
            gotos: collection! {},
        },
        // State 60
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(0 /*AddOp*/, 42),
                18 /* '(' */ => LRAction::Reduce(0 /*AddOp*/, 42),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(0 /*AddOp*/, 42),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(0 /*AddOp*/, 42),
            },
            gotos: collection! {},
        },
        // State 61
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(32 /*MultOp*/, 14),
                18 /* '(' */ => LRAction::Reduce(32 /*MultOp*/, 14),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(32 /*MultOp*/, 14),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(32 /*MultOp*/, 14),
            },
            gotos: collection! {},
        },
        // State 62
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Shift(2),
                18 /* '(' */ => LRAction::Shift(3),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Shift(4),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Shift(5),
            },
            gotos: collection! {
                19 /* Factor */ => 12,
                20 /* Id */ => 25,
                21 /* IdRef */ => 14,
                29 /* Minus */ => 18,
                33 /* Negate */ => 20,
                34 /* Number */ => 21,
                37 /* Power */ => 74,
            },
        },
        // State 63
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(18 /*EqualityOp*/, 3),
                18 /* '(' */ => LRAction::Reduce(18 /*EqualityOp*/, 3),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(18 /*EqualityOp*/, 3),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(18 /*EqualityOp*/, 3),
            },
            gotos: collection! {},
        },
        // State 64
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Shift(2),
                18 /* '(' */ => LRAction::Shift(3),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Shift(4),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Shift(5),
            },
            gotos: collection! {
                11 /* BitwiseShift */ => 10,
                19 /* Factor */ => 12,
                20 /* Id */ => 25,
                21 /* IdRef */ => 14,
                29 /* Minus */ => 18,
                30 /* Mult */ => 19,
                33 /* Negate */ => 20,
                34 /* Number */ => 21,
                37 /* Power */ => 22,
                39 /* Relational */ => 75,
                42 /* Summ */ => 24,
            },
        },
        // State 65
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Reduce(13 /*BitwiseShiftOp*/, 9),
                18 /* '(' */ => LRAction::Reduce(13 /*BitwiseShiftOp*/, 9),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Reduce(13 /*BitwiseShiftOp*/, 9),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Reduce(13 /*BitwiseShiftOp*/, 9),
            },
            gotos: collection! {},
        },
        // State 66
        LR1State {
            actions: collection! {
                15 /* '-' */ => LRAction::Shift(2),
                18 /* '(' */ => LRAction::Shift(3),
                20 /* '0|[1-9][0-9]*' */ => LRAction::Shift(4),
                21 /* '[a-zA-Z_][a-zA-Z0-9_]*' */ => LRAction::Shift(5),
            },
            gotos: collection! {
                19 /* Factor */ => 12,
                20 /* Id */ => 25,
                21 /* IdRef */ => 14,
                29 /* Minus */ => 18,
                30 /* Mult */ => 19,
                33 /* Negate */ => 20,
                34 /* Number */ => 21,
                37 /* Power */ => 22,
                42 /* Summ */ => 76,
            },
        },
        // State 67
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(9 /*BitwiseOrList*/, 28),
                8 /* '||' */ => LRAction::Reduce(9 /*BitwiseOrList*/, 28),
                9 /* '&&' */ => LRAction::Reduce(9 /*BitwiseOrList*/, 28),
                10 /* '|' */ => LRAction::Reduce(9 /*BitwiseOrList*/, 28),
                19 /* ')' */ => LRAction::Reduce(9 /*BitwiseOrList*/, 28),
            },
            gotos: collection! {},
        },
        // State 68
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(24 /*LogicalAndList*/, 25),
                8 /* '||' */ => LRAction::Reduce(24 /*LogicalAndList*/, 25),
                9 /* '&&' */ => LRAction::Reduce(24 /*LogicalAndList*/, 25),
                19 /* ')' */ => LRAction::Reduce(24 /*LogicalAndList*/, 25),
            },
            gotos: collection! {},
        },
        // State 69
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(40 /*RelationalList*/, 37),
                6 /* '==|!=' */ => LRAction::Reduce(40 /*RelationalList*/, 37),
                8 /* '||' */ => LRAction::Reduce(40 /*RelationalList*/, 37),
                9 /* '&&' */ => LRAction::Reduce(40 /*RelationalList*/, 37),
                10 /* '|' */ => LRAction::Reduce(40 /*RelationalList*/, 37),
                11 /* '&' */ => LRAction::Reduce(40 /*RelationalList*/, 37),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(40 /*RelationalList*/, 37),
                19 /* ')' */ => LRAction::Reduce(40 /*RelationalList*/, 37),
            },
            gotos: collection! {},
        },
        // State 70
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(6 /*BitwiseAndList*/, 31),
                8 /* '||' */ => LRAction::Reduce(6 /*BitwiseAndList*/, 31),
                9 /* '&&' */ => LRAction::Reduce(6 /*BitwiseAndList*/, 31),
                10 /* '|' */ => LRAction::Reduce(6 /*BitwiseAndList*/, 31),
                11 /* '&' */ => LRAction::Reduce(6 /*BitwiseAndList*/, 31),
                19 /* ')' */ => LRAction::Reduce(6 /*BitwiseAndList*/, 31),
            },
            gotos: collection! {},
        },
        // State 71
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(38 /*PowerList*/, 51),
                6 /* '==|!=' */ => LRAction::Reduce(38 /*PowerList*/, 51),
                8 /* '||' */ => LRAction::Reduce(38 /*PowerList*/, 51),
                9 /* '&&' */ => LRAction::Reduce(38 /*PowerList*/, 51),
                10 /* '|' */ => LRAction::Reduce(38 /*PowerList*/, 51),
                11 /* '&' */ => LRAction::Reduce(38 /*PowerList*/, 51),
                12 /* '<<|>>' */ => LRAction::Reduce(38 /*PowerList*/, 51),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(38 /*PowerList*/, 51),
                14 /* '+' */ => LRAction::Reduce(38 /*PowerList*/, 51),
                15 /* '-' */ => LRAction::Reduce(38 /*PowerList*/, 51),
                16 /* '**' */ => LRAction::Reduce(38 /*PowerList*/, 51),
                17 /* '\*|\/|%' */ => LRAction::Reduce(38 /*PowerList*/, 51),
                19 /* ')' */ => LRAction::Reduce(38 /*PowerList*/, 51),
            },
            gotos: collection! {},
        },
        // State 72
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(27 /*LogicalOrList*/, 22),
                8 /* '||' */ => LRAction::Reduce(27 /*LogicalOrList*/, 22),
                19 /* ')' */ => LRAction::Reduce(27 /*LogicalOrList*/, 22),
            },
            gotos: collection! {},
        },
        // State 73
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(43 /*SummList*/, 45),
                6 /* '==|!=' */ => LRAction::Reduce(43 /*SummList*/, 45),
                8 /* '||' */ => LRAction::Reduce(43 /*SummList*/, 45),
                9 /* '&&' */ => LRAction::Reduce(43 /*SummList*/, 45),
                10 /* '|' */ => LRAction::Reduce(43 /*SummList*/, 45),
                11 /* '&' */ => LRAction::Reduce(43 /*SummList*/, 45),
                12 /* '<<|>>' */ => LRAction::Reduce(43 /*SummList*/, 45),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(43 /*SummList*/, 45),
                14 /* '+' */ => LRAction::Reduce(43 /*SummList*/, 45),
                15 /* '-' */ => LRAction::Reduce(43 /*SummList*/, 45),
                19 /* ')' */ => LRAction::Reduce(43 /*SummList*/, 45),
            },
            gotos: collection! {},
        },
        // State 74
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(31 /*MultList*/, 48),
                6 /* '==|!=' */ => LRAction::Reduce(31 /*MultList*/, 48),
                8 /* '||' */ => LRAction::Reduce(31 /*MultList*/, 48),
                9 /* '&&' */ => LRAction::Reduce(31 /*MultList*/, 48),
                10 /* '|' */ => LRAction::Reduce(31 /*MultList*/, 48),
                11 /* '&' */ => LRAction::Reduce(31 /*MultList*/, 48),
                12 /* '<<|>>' */ => LRAction::Reduce(31 /*MultList*/, 48),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(31 /*MultList*/, 48),
                14 /* '+' */ => LRAction::Reduce(31 /*MultList*/, 48),
                15 /* '-' */ => LRAction::Reduce(31 /*MultList*/, 48),
                17 /* '\*|\/|%' */ => LRAction::Reduce(31 /*MultList*/, 48),
                19 /* ')' */ => LRAction::Reduce(31 /*MultList*/, 48),
            },
            gotos: collection! {},
        },
        // State 75
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(17 /*EqualityList*/, 34),
                6 /* '==|!=' */ => LRAction::Reduce(17 /*EqualityList*/, 34),
                8 /* '||' */ => LRAction::Reduce(17 /*EqualityList*/, 34),
                9 /* '&&' */ => LRAction::Reduce(17 /*EqualityList*/, 34),
                10 /* '|' */ => LRAction::Reduce(17 /*EqualityList*/, 34),
                11 /* '&' */ => LRAction::Reduce(17 /*EqualityList*/, 34),
                19 /* ')' */ => LRAction::Reduce(17 /*EqualityList*/, 34),
            },
            gotos: collection! {},
        },
        // State 76
        LR1State {
            actions: collection! {
                5 /* ';' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 40),
                6 /* '==|!=' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 40),
                8 /* '||' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 40),
                9 /* '&&' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 40),
                10 /* '|' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 40),
                11 /* '&' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 40),
                12 /* '<<|>>' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 40),
                13 /* '<=|<|>=|>' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 40),
                19 /* ')' */ => LRAction::Reduce(12 /*BitwiseShiftList*/, 40),
            },
            gotos: collection! {},
        },
    ])
});

pub const PRODUCTIONS: &[LRProduction; 61] = &[
    // 0 - Calc: CalcList /* Vec */;
    LRProduction { lhs: 14, len: 1 },
    // 1 - CalcList: CalcList Instruction ";"^ /* Clipped */;
    LRProduction { lhs: 15, len: 3 },
    // 2 - CalcList: ;
    LRProduction { lhs: 15, len: 0 },
    // 3 - EqualityOp: /==|!=/;
    LRProduction { lhs: 18, len: 1 },
    // 4 - AssignOp: /(\+|-|\*|\/|%|<<|>>|&|\^|\|)?=/;
    LRProduction { lhs: 2, len: 1 },
    // 5 - LogicalOrOp: '||';
    LRProduction { lhs: 28, len: 1 },
    // 6 - LogicalAndOp: '&&';
    LRProduction { lhs: 25, len: 1 },
    // 7 - BitwiseOrOp: '|';
    LRProduction { lhs: 10, len: 1 },
    // 8 - BitwiseAndOp: '&';
    LRProduction { lhs: 7, len: 1 },
    // 9 - BitwiseShiftOp: /<<|>>/;
    LRProduction { lhs: 13, len: 1 },
    // 10 - RelationalOp: /<=|<|>=|>/;
    LRProduction { lhs: 41, len: 1 },
    // 11 - Plus: '+';
    LRProduction { lhs: 35, len: 1 },
    // 12 - Minus: '-';
    LRProduction { lhs: 29, len: 1 },
    // 13 - PowOp: '**';
    LRProduction { lhs: 36, len: 1 },
    // 14 - MultOp: /\*|\/|%/;
    LRProduction { lhs: 32, len: 1 },
    // 15 - Instruction: Assignment;
    LRProduction { lhs: 22, len: 1 },
    // 16 - Instruction: LogicalOr;
    LRProduction { lhs: 22, len: 1 },
    // 17 - AssignItem: Id AssignOp;
    LRProduction { lhs: 1, len: 2 },
    // 18 - Assignment: AssignItem AssignmentList /* Vec */ LogicalOr;
    LRProduction { lhs: 3, len: 3 },
    // 19 - AssignmentList: AssignmentList AssignItem;
    LRProduction { lhs: 4, len: 2 },
    // 20 - AssignmentList: ;
    LRProduction { lhs: 4, len: 0 },
    // 21 - LogicalOr: LogicalAnd LogicalOrList /* Vec */;
    LRProduction { lhs: 26, len: 2 },
    // 22 - LogicalOrList: LogicalOrList LogicalOrOp LogicalAnd;
    LRProduction { lhs: 27, len: 3 },
    // 23 - LogicalOrList: ;
    LRProduction { lhs: 27, len: 0 },
    // 24 - LogicalAnd: BitwiseOr LogicalAndList /* Vec */;
    LRProduction { lhs: 23, len: 2 },
    // 25 - LogicalAndList: LogicalAndList LogicalAndOp BitwiseOr;
    LRProduction { lhs: 24, len: 3 },
    // 26 - LogicalAndList: ;
    LRProduction { lhs: 24, len: 0 },
    // 27 - BitwiseOr: BitwiseAnd BitwiseOrList /* Vec */;
    LRProduction { lhs: 8, len: 2 },
    // 28 - BitwiseOrList: BitwiseOrList BitwiseOrOp BitwiseAnd;
    LRProduction { lhs: 9, len: 3 },
    // 29 - BitwiseOrList: ;
    LRProduction { lhs: 9, len: 0 },
    // 30 - BitwiseAnd: Equality BitwiseAndList /* Vec */;
    LRProduction { lhs: 5, len: 2 },
    // 31 - BitwiseAndList: BitwiseAndList BitwiseAndOp Equality;
    LRProduction { lhs: 6, len: 3 },
    // 32 - BitwiseAndList: ;
    LRProduction { lhs: 6, len: 0 },
    // 33 - Equality: Relational EqualityList /* Vec */;
    LRProduction { lhs: 16, len: 2 },
    // 34 - EqualityList: EqualityList EqualityOp Relational;
    LRProduction { lhs: 17, len: 3 },
    // 35 - EqualityList: ;
    LRProduction { lhs: 17, len: 0 },
    // 36 - Relational: BitwiseShift RelationalList /* Vec */;
    LRProduction { lhs: 39, len: 2 },
    // 37 - RelationalList: RelationalList RelationalOp BitwiseShift;
    LRProduction { lhs: 40, len: 3 },
    // 38 - RelationalList: ;
    LRProduction { lhs: 40, len: 0 },
    // 39 - BitwiseShift: Summ BitwiseShiftList /* Vec */;
    LRProduction { lhs: 11, len: 2 },
    // 40 - BitwiseShiftList: BitwiseShiftList BitwiseShiftOp Summ;
    LRProduction { lhs: 12, len: 3 },
    // 41 - BitwiseShiftList: ;
    LRProduction { lhs: 12, len: 0 },
    // 42 - AddOp: Plus;
    LRProduction { lhs: 0, len: 1 },
    // 43 - AddOp: Minus;
    LRProduction { lhs: 0, len: 1 },
    // 44 - Summ: Mult SummList /* Vec */;
    LRProduction { lhs: 42, len: 2 },
    // 45 - SummList: SummList AddOp Mult;
    LRProduction { lhs: 43, len: 3 },
    // 46 - SummList: ;
    LRProduction { lhs: 43, len: 0 },
    // 47 - Mult: Power MultList /* Vec */;
    LRProduction { lhs: 30, len: 2 },
    // 48 - MultList: MultList MultOp Power;
    LRProduction { lhs: 31, len: 3 },
    // 49 - MultList: ;
    LRProduction { lhs: 31, len: 0 },
    // 50 - Power: Factor PowerList /* Vec */;
    LRProduction { lhs: 37, len: 2 },
    // 51 - PowerList: PowerList PowOp Factor;
    LRProduction { lhs: 38, len: 3 },
    // 52 - PowerList: ;
    LRProduction { lhs: 38, len: 0 },
    // 53 - Negate: Minus;
    LRProduction { lhs: 33, len: 1 },
    // 54 - Factor: Number;
    LRProduction { lhs: 19, len: 1 },
    // 55 - Factor: Negate Factor;
    LRProduction { lhs: 19, len: 2 },
    // 56 - Factor: IdRef;
    LRProduction { lhs: 19, len: 1 },
    // 57 - Factor: '('^ /* Clipped */ LogicalOr ')'^ /* Clipped */;
    LRProduction { lhs: 19, len: 3 },
    // 58 - Number: /0|[1-9][0-9]*/;
    LRProduction { lhs: 34, len: 1 },
    // 59 - IdRef: Id;
    LRProduction { lhs: 21, len: 1 },
    // 60 - Id: /[a-zA-Z_][a-zA-Z0-9_]*/;
    LRProduction { lhs: 20, len: 1 },
];

static SCANNERS: Lazy<Vec<ScannerConfig>> = Lazy::new(|| {
    vec![ScannerConfig::new(
        "INITIAL",
        Tokenizer::build(TERMINALS, SCANNER_0.0, SCANNER_0.1).unwrap(),
        &[],
    )]
});

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut CalcGrammar<'t>,
) -> Result<ParseTree<'t>, ParolError>
where
    T: AsRef<Path>,
{
    let mut lr_parser = LRParser::new(14, &PARSE_TABLE, PRODUCTIONS, TERMINAL_NAMES, NON_TERMINALS);
    lr_parser.trim_parse_tree();

    // Initialize wrapper
    let mut user_actions = CalcGrammarAuto::new(user_actions);
    lr_parser.parse(
        TokenStream::new(input, file_name, &SCANNERS, 1).unwrap(),
        &mut user_actions,
    )
}
