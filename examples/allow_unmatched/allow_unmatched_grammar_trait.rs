// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

// Disable clippy warnings that can result in the way how parol generates code.
#![allow(clippy::enum_variant_names)]
#![allow(clippy::large_enum_variant)]
#![allow(clippy::upper_case_acronyms)]

use parol_runtime::log::trace;
#[allow(unused_imports)]
use parol_runtime::parol_macros::{pop_and_reverse_item, pop_item};
use parol_runtime::parser::{ParseTreeType, UserActionsTrait};
use parol_runtime::{ParserError, Result, Token};

/// Semantic actions trait generated for the user grammar
/// All functions have default implementations.
pub trait AllowUnmatchedGrammarTrait<'t> {
    /// Semantic action for non-terminal 'NUMBER'
    fn n_u_m_b_e_r(&mut self, _arg: &NUMBER<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'PLUS'
    fn p_l_u_s(&mut self, _arg: &PLUS<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'Expr'
    fn expr(&mut self, _arg: &Expr<'t>) -> Result<()> {
        Ok(())
    }

    /// This method provides skipped language comments.
    /// If you need comments please provide your own implementation of this method.
    fn on_comment(&mut self, _token: Token<'t>) {}
}

// -------------------------------------------------------------------------------------------------
//
// Output Types of productions deduced from the structure of the transformed grammar
//

// -------------------------------------------------------------------------------------------------
//
// Types of non-terminals deduced from the structure of the transformed grammar
//

///
/// Type derived for non-terminal Expr
///
#[allow(dead_code)]
#[derive(Debug, Clone)]
pub struct Expr<'t> {
    pub n_u_m_b_e_r: NUMBER<'t>,
    pub expr_list: Vec<ExprList<'t>>,
}

///
/// Type derived for non-terminal ExprList
///
#[allow(dead_code)]
#[derive(Debug, Clone)]
pub struct ExprList<'t> {
    pub p_l_u_s: PLUS<'t>,
    pub n_u_m_b_e_r: NUMBER<'t>,
}

///
/// Type derived for non-terminal NUMBER
///
#[allow(dead_code)]
#[derive(Debug, Clone)]
pub struct NUMBER<'t> {
    pub n_u_m_b_e_r: Token<'t>, /* [0-9]+ */
}

///
/// Type derived for non-terminal PLUS
///
#[allow(dead_code)]
#[derive(Debug, Clone)]
pub struct PLUS<'t> {
    pub p_l_u_s: Token<'t>, /* \+ */
}

// -------------------------------------------------------------------------------------------------

///
/// Deduced ASTType of expanded grammar
///
#[allow(dead_code)]
#[derive(Debug, Clone)]
pub enum ASTType<'t> {
    Expr(Expr<'t>),
    ExprList(Vec<ExprList<'t>>),
    NUMBER(NUMBER<'t>),
    PLUS(PLUS<'t>),
}

// -------------------------------------------------------------------------------------------------

/// Auto-implemented adapter grammar
///
/// The lifetime parameter `'t` refers to the lifetime of the scanned text.
/// The lifetime parameter `'u` refers to the lifetime of user grammar object.
///
#[allow(dead_code)]
pub struct AllowUnmatchedGrammarAuto<'t, 'u>
where
    't: 'u,
{
    // Mutable reference of the actual user grammar to be able to call the semantic actions on it
    user_grammar: &'u mut dyn AllowUnmatchedGrammarTrait<'t>,
    // Stack to construct the AST on it
    item_stack: Vec<ASTType<'t>>,
}

///
/// The `AllowUnmatchedGrammarAuto` impl is automatically generated for the
/// given grammar.
///
impl<'t, 'u> AllowUnmatchedGrammarAuto<'t, 'u> {
    pub fn new(user_grammar: &'u mut dyn AllowUnmatchedGrammarTrait<'t>) -> Self {
        Self {
            user_grammar,
            item_stack: Vec::new(),
        }
    }

    #[allow(dead_code)]
    fn push(&mut self, item: ASTType<'t>, context: &str) {
        trace!("push    {context}: {item:?}");
        self.item_stack.push(item)
    }

    #[allow(dead_code)]
    fn pop(&mut self, context: &str) -> Option<ASTType<'t>> {
        let item = self.item_stack.pop();
        if let Some(ref item) = item {
            trace!("pop     {context}: {item:?}");
        }
        item
    }

    #[allow(dead_code)]
    // Use this function for debugging purposes:
    // trace!("{}", self.trace_item_stack(context));
    fn trace_item_stack(&self, context: &str) -> std::string::String {
        format!(
            "Item stack at {}:\n{}",
            context,
            self.item_stack
                .iter()
                .rev()
                .map(|s| format!("  {s:?}"))
                .collect::<Vec<std::string::String>>()
                .join("\n")
        )
    }

    /// Semantic action for production 0:
    ///
    /// `NUMBER: /[0-9]+/;`
    ///
    #[parol_runtime::function_name::named]
    fn n_u_m_b_e_r(&mut self, n_u_m_b_e_r: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let n_u_m_b_e_r = n_u_m_b_e_r.token()?.clone();
        let n_u_m_b_e_r_built = NUMBER { n_u_m_b_e_r };
        // Calling user action here
        self.user_grammar.n_u_m_b_e_r(&n_u_m_b_e_r_built)?;
        self.push(ASTType::NUMBER(n_u_m_b_e_r_built), context);
        Ok(())
    }

    /// Semantic action for production 1:
    ///
    /// `PLUS: /\+/;`
    ///
    #[parol_runtime::function_name::named]
    fn p_l_u_s(&mut self, p_l_u_s: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let p_l_u_s = p_l_u_s.token()?.clone();
        let p_l_u_s_built = PLUS { p_l_u_s };
        // Calling user action here
        self.user_grammar.p_l_u_s(&p_l_u_s_built)?;
        self.push(ASTType::PLUS(p_l_u_s_built), context);
        Ok(())
    }

    /// Semantic action for production 2:
    ///
    /// `Expr: NUMBER ExprList /* Vec */;`
    ///
    #[parol_runtime::function_name::named]
    fn expr(
        &mut self,
        _n_u_m_b_e_r: &ParseTreeType<'t>,
        _expr_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let expr_list = pop_and_reverse_item!(self, expr_list, ExprList, context);
        let n_u_m_b_e_r = pop_item!(self, n_u_m_b_e_r, NUMBER, context);
        let expr_built = Expr {
            n_u_m_b_e_r,
            expr_list,
        };
        // Calling user action here
        self.user_grammar.expr(&expr_built)?;
        self.push(ASTType::Expr(expr_built), context);
        Ok(())
    }

    /// Semantic action for production 3:
    ///
    /// `ExprList /* Vec<T>::Push */: PLUS NUMBER ExprList;`
    ///
    #[parol_runtime::function_name::named]
    fn expr_list_0(
        &mut self,
        _p_l_u_s: &ParseTreeType<'t>,
        _n_u_m_b_e_r: &ParseTreeType<'t>,
        _expr_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mut expr_list = pop_item!(self, expr_list, ExprList, context);
        let n_u_m_b_e_r = pop_item!(self, n_u_m_b_e_r, NUMBER, context);
        let p_l_u_s = pop_item!(self, p_l_u_s, PLUS, context);
        let expr_list_0_built = ExprList {
            n_u_m_b_e_r,
            p_l_u_s,
        };
        // Add an element to the vector
        expr_list.push(expr_list_0_built);
        self.push(ASTType::ExprList(expr_list), context);
        Ok(())
    }

    /// Semantic action for production 4:
    ///
    /// `ExprList /* Vec<T>::New */: ;`
    ///
    #[parol_runtime::function_name::named]
    fn expr_list_1(&mut self) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let expr_list_1_built = Vec::new();
        self.push(ASTType::ExprList(expr_list_1_built), context);
        Ok(())
    }
}

impl<'t> UserActionsTrait<'t> for AllowUnmatchedGrammarAuto<'t, '_> {
    ///
    /// This function is implemented automatically for the user's item AllowUnmatchedGrammar.
    ///
    fn call_semantic_action_for_production_number(
        &mut self,
        prod_num: usize,
        children: &[ParseTreeType<'t>],
    ) -> Result<()> {
        match prod_num {
            0 => self.n_u_m_b_e_r(&children[0]),
            1 => self.p_l_u_s(&children[0]),
            2 => self.expr(&children[0], &children[1]),
            3 => self.expr_list_0(&children[0], &children[1], &children[2]),
            4 => self.expr_list_1(),
            _ => Err(ParserError::InternalError(format!(
                "Unhandled production number: {prod_num}"
            ))
            .into()),
        }
    }

    fn on_comment(&mut self, token: Token<'t>) {
        self.user_grammar.on_comment(token)
    }
}
