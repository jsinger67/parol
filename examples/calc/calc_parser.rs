// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use parol_runtime::once_cell::sync::Lazy;
#[allow(unused_imports)]
use parol_runtime::parser::{
    LLKParser, LookaheadDFA, ParseTreeType, ParseType, Production, Trans, UserActionsTrait,
};
use parol_runtime::{ParolError, ParseTree, TerminalIndex};
use parol_runtime::{TokenStream, Tokenizer};
use std::cell::RefCell;
use std::path::Path;

use parol_runtime::lexer::tokenizer::{
    ERROR_TOKEN, NEW_LINE_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN,
};

pub const TERMINALS: &[&str; 23] = &[
    /*  0 */ UNMATCHABLE_TOKEN,
    /*  1 */ UNMATCHABLE_TOKEN,
    /*  2 */ UNMATCHABLE_TOKEN,
    /*  3 */ UNMATCHABLE_TOKEN,
    /*  4 */ UNMATCHABLE_TOKEN,
    /*  5 */ r";",
    /*  6 */ r"==|!=",
    /*  7 */ r"(\+|-|\*|/|%|<<|>>|&|\^|\|)?=",
    /*  8 */ r"\|\|",
    /*  9 */ r"&&",
    /* 10 */ r"\|",
    /* 11 */ r"&",
    /* 12 */ r"<<|>>",
    /* 13 */ r"<=|<|>=|>",
    /* 14 */ r"\+",
    /* 15 */ r"-",
    /* 16 */ r"\*\*",
    /* 17 */ r"\*|/|%",
    /* 18 */ r"\(",
    /* 19 */ r"\)",
    /* 20 */ r"0|[1-9][0-9]*",
    /* 21 */ r"[a-zA-Z_][a-zA-Z0-9_]*",
    /* 22 */ ERROR_TOKEN,
];

pub const TERMINAL_NAMES: &[&str; 23] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "Semicolon",
    /*  6 */ "EqualityOp",
    /*  7 */ "AssignOp",
    /*  8 */ "LogicalOrOp",
    /*  9 */ "LogicalAndOp",
    /* 10 */ "BitwiseOrOp",
    /* 11 */ "BitwiseAndOp",
    /* 12 */ "BitwiseShiftOp",
    /* 13 */ "RelationalOp",
    /* 14 */ "Plus",
    /* 15 */ "Minus",
    /* 16 */ "PowOp",
    /* 17 */ "MultOp",
    /* 18 */ "LParen",
    /* 19 */ "RParen",
    /* 20 */ "Number",
    /* 21 */ "Id",
    /* 22 */ "Error",
];

/* SCANNER_0: "INITIAL" */
const SCANNER_0: (&[&str; 5], &[TerminalIndex; 17]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ NEW_LINE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ r"(//.*(\r\n|\r|\n|$))",
        /*  4 */ r"((?ms)/\*.*?\*/)",
    ],
    &[
        5,  /* Semicolon */
        6,  /* EqualityOp */
        7,  /* AssignOp */
        8,  /* LogicalOrOp */
        9,  /* LogicalAndOp */
        10, /* BitwiseOrOp */
        11, /* BitwiseAndOp */
        12, /* BitwiseShiftOp */
        13, /* RelationalOp */
        14, /* Plus */
        15, /* Minus */
        16, /* PowOp */
        17, /* MultOp */
        18, /* LParen */
        19, /* RParen */
        20, /* Number */
        21, /* Id */
    ],
);

const MAX_K: usize = 2;

pub const NON_TERMINALS: &[&str; 65] = &[
    /*  0 */ "AddOp",
    /*  1 */ "AssignItem",
    /*  2 */ "AssignOp",
    /*  3 */ "Assignment",
    /*  4 */ "AssignmentLst1",
    /*  5 */ "AssignmentLst1Itm1",
    /*  6 */ "BitwiseAnd",
    /*  7 */ "BitwiseAndItem",
    /*  8 */ "BitwiseAndLst1",
    /*  9 */ "BitwiseAndLst1Itm1",
    /* 10 */ "BitwiseAndOp",
    /* 11 */ "BitwiseOr",
    /* 12 */ "BitwiseOrItem",
    /* 13 */ "BitwiseOrLst1",
    /* 14 */ "BitwiseOrLst1Itm1",
    /* 15 */ "BitwiseOrOp",
    /* 16 */ "BitwiseShift",
    /* 17 */ "BitwiseShiftItem",
    /* 18 */ "BitwiseShiftLst1",
    /* 19 */ "BitwiseShiftLst1Itm1",
    /* 20 */ "BitwiseShiftOp",
    /* 21 */ "Calc",
    /* 22 */ "CalcLst1",
    /* 23 */ "CalcLst1Itm1",
    /* 24 */ "Equality",
    /* 25 */ "EqualityItem",
    /* 26 */ "EqualityLst1",
    /* 27 */ "EqualityLst1Itm1",
    /* 28 */ "EqualityOp",
    /* 29 */ "Factor",
    /* 30 */ "Id",
    /* 31 */ "IdRef",
    /* 32 */ "Instruction",
    /* 33 */ "LogicalAnd",
    /* 34 */ "LogicalAndItem",
    /* 35 */ "LogicalAndLst1",
    /* 36 */ "LogicalAndLst1Itm1",
    /* 37 */ "LogicalAndOp",
    /* 38 */ "LogicalOr",
    /* 39 */ "LogicalOrItem",
    /* 40 */ "LogicalOrLst1",
    /* 41 */ "LogicalOrLst1Itm1",
    /* 42 */ "LogicalOrOp",
    /* 43 */ "Minus",
    /* 44 */ "Mult",
    /* 45 */ "MultItem",
    /* 46 */ "MultLst1",
    /* 47 */ "MultLst1Itm1",
    /* 48 */ "MultOp",
    /* 49 */ "Negate",
    /* 50 */ "Number",
    /* 51 */ "Plus",
    /* 52 */ "PowOp",
    /* 53 */ "Power",
    /* 54 */ "PowerLst1",
    /* 55 */ "PowerLst1Itm1",
    /* 56 */ "Relational",
    /* 57 */ "RelationalItem",
    /* 58 */ "RelationalLst1",
    /* 59 */ "RelationalLst1Itm1",
    /* 60 */ "RelationalOp",
    /* 61 */ "Summ",
    /* 62 */ "SummItem",
    /* 63 */ "SummLst1",
    /* 64 */ "SummLst1Itm1",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 65] = &[
    /* 0 - "AddOp" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 14, 1, 60), Trans(0, 15, 2, 61)],
        k: 1,
    },
    /* 1 - "AssignItem" */
    LookaheadDFA {
        prod0: 8,
        transitions: &[],
        k: 0,
    },
    /* 2 - "AssignOp" */
    LookaheadDFA {
        prod0: 7,
        transitions: &[],
        k: 0,
    },
    /* 3 - "Assignment" */
    LookaheadDFA {
        prod0: 9,
        transitions: &[],
        k: 0,
    },
    /* 4 - "AssignmentLst1" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 15, 3, -1),
            Trans(0, 18, 3, -1),
            Trans(0, 20, 4, -1),
            Trans(0, 21, 1, -1),
            Trans(1, 5, 5, 12),
            Trans(1, 6, 5, 12),
            Trans(1, 7, 2, 10),
            Trans(1, 8, 5, 12),
            Trans(1, 9, 5, 12),
            Trans(1, 10, 5, 12),
            Trans(1, 11, 5, 12),
            Trans(1, 12, 5, 12),
            Trans(1, 13, 5, 12),
            Trans(1, 14, 5, 12),
            Trans(1, 15, 5, 12),
            Trans(1, 16, 5, 12),
            Trans(1, 17, 5, 12),
            Trans(3, 15, 5, 12),
            Trans(3, 18, 5, 12),
            Trans(3, 20, 5, 12),
            Trans(3, 21, 5, 12),
            Trans(4, 5, 5, 12),
            Trans(4, 6, 5, 12),
            Trans(4, 8, 5, 12),
            Trans(4, 9, 5, 12),
            Trans(4, 10, 5, 12),
            Trans(4, 11, 5, 12),
            Trans(4, 12, 5, 12),
            Trans(4, 13, 5, 12),
            Trans(4, 14, 5, 12),
            Trans(4, 15, 5, 12),
            Trans(4, 16, 5, 12),
            Trans(4, 17, 5, 12),
        ],
        k: 2,
    },
    /* 5 - "AssignmentLst1Itm1" */
    LookaheadDFA {
        prod0: 11,
        transitions: &[],
        k: 0,
    },
    /* 6 - "BitwiseAnd" */
    LookaheadDFA {
        prod0: 31,
        transitions: &[],
        k: 0,
    },
    /* 7 - "BitwiseAndItem" */
    LookaheadDFA {
        prod0: 36,
        transitions: &[],
        k: 0,
    },
    /* 8 - "BitwiseAndLst1" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 2, 34),
            Trans(0, 8, 2, 34),
            Trans(0, 9, 2, 34),
            Trans(0, 10, 2, 34),
            Trans(0, 11, 1, 32),
            Trans(0, 19, 2, 34),
        ],
        k: 1,
    },
    /* 9 - "BitwiseAndLst1Itm1" */
    LookaheadDFA {
        prod0: 33,
        transitions: &[],
        k: 0,
    },
    /* 10 - "BitwiseAndOp" */
    LookaheadDFA {
        prod0: 35,
        transitions: &[],
        k: 0,
    },
    /* 11 - "BitwiseOr" */
    LookaheadDFA {
        prod0: 25,
        transitions: &[],
        k: 0,
    },
    /* 12 - "BitwiseOrItem" */
    LookaheadDFA {
        prod0: 30,
        transitions: &[],
        k: 0,
    },
    /* 13 - "BitwiseOrLst1" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 2, 28),
            Trans(0, 8, 2, 28),
            Trans(0, 9, 2, 28),
            Trans(0, 10, 1, 26),
            Trans(0, 19, 2, 28),
        ],
        k: 1,
    },
    /* 14 - "BitwiseOrLst1Itm1" */
    LookaheadDFA {
        prod0: 27,
        transitions: &[],
        k: 0,
    },
    /* 15 - "BitwiseOrOp" */
    LookaheadDFA {
        prod0: 29,
        transitions: &[],
        k: 0,
    },
    /* 16 - "BitwiseShift" */
    LookaheadDFA {
        prod0: 49,
        transitions: &[],
        k: 0,
    },
    /* 17 - "BitwiseShiftItem" */
    LookaheadDFA {
        prod0: 53,
        transitions: &[],
        k: 0,
    },
    /* 18 - "BitwiseShiftLst1" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 2, 52),
            Trans(0, 6, 2, 52),
            Trans(0, 8, 2, 52),
            Trans(0, 9, 2, 52),
            Trans(0, 10, 2, 52),
            Trans(0, 11, 2, 52),
            Trans(0, 12, 1, 50),
            Trans(0, 13, 2, 52),
            Trans(0, 19, 2, 52),
        ],
        k: 1,
    },
    /* 19 - "BitwiseShiftLst1Itm1" */
    LookaheadDFA {
        prod0: 51,
        transitions: &[],
        k: 0,
    },
    /* 20 - "BitwiseShiftOp" */
    LookaheadDFA {
        prod0: 42,
        transitions: &[],
        k: 0,
    },
    /* 21 - "Calc" */
    LookaheadDFA {
        prod0: 0,
        transitions: &[],
        k: 0,
    },
    /* 22 - "CalcLst1" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 3),
            Trans(0, 15, 1, 1),
            Trans(0, 18, 1, 1),
            Trans(0, 20, 1, 1),
            Trans(0, 21, 1, 1),
        ],
        k: 1,
    },
    /* 23 - "CalcLst1Itm1" */
    LookaheadDFA {
        prod0: 2,
        transitions: &[],
        k: 0,
    },
    /* 24 - "Equality" */
    LookaheadDFA {
        prod0: 37,
        transitions: &[],
        k: 0,
    },
    /* 25 - "EqualityItem" */
    LookaheadDFA {
        prod0: 41,
        transitions: &[],
        k: 0,
    },
    /* 26 - "EqualityLst1" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 2, 40),
            Trans(0, 6, 1, 38),
            Trans(0, 8, 2, 40),
            Trans(0, 9, 2, 40),
            Trans(0, 10, 2, 40),
            Trans(0, 11, 2, 40),
            Trans(0, 19, 2, 40),
        ],
        k: 1,
    },
    /* 27 - "EqualityLst1Itm1" */
    LookaheadDFA {
        prod0: 39,
        transitions: &[],
        k: 0,
    },
    /* 28 - "EqualityOp" */
    LookaheadDFA {
        prod0: 6,
        transitions: &[],
        k: 0,
    },
    /* 29 - "Factor" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 15, 3, 77),
            Trans(0, 18, 4, 78),
            Trans(0, 20, 1, 75),
            Trans(0, 21, 2, 76),
        ],
        k: 1,
    },
    /* 30 - "Id" */
    LookaheadDFA {
        prod0: 81,
        transitions: &[],
        k: 0,
    },
    /* 31 - "IdRef" */
    LookaheadDFA {
        prod0: 80,
        transitions: &[],
        k: 0,
    },
    /* 32 - "Instruction" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 15, 3, -1),
            Trans(0, 18, 3, -1),
            Trans(0, 20, 4, -1),
            Trans(0, 21, 1, -1),
            Trans(1, 5, 5, 5),
            Trans(1, 6, 5, 5),
            Trans(1, 7, 2, 4),
            Trans(1, 8, 5, 5),
            Trans(1, 9, 5, 5),
            Trans(1, 10, 5, 5),
            Trans(1, 11, 5, 5),
            Trans(1, 12, 5, 5),
            Trans(1, 13, 5, 5),
            Trans(1, 14, 5, 5),
            Trans(1, 15, 5, 5),
            Trans(1, 16, 5, 5),
            Trans(1, 17, 5, 5),
            Trans(3, 15, 5, 5),
            Trans(3, 18, 5, 5),
            Trans(3, 20, 5, 5),
            Trans(3, 21, 5, 5),
            Trans(4, 5, 5, 5),
            Trans(4, 6, 5, 5),
            Trans(4, 8, 5, 5),
            Trans(4, 9, 5, 5),
            Trans(4, 10, 5, 5),
            Trans(4, 11, 5, 5),
            Trans(4, 12, 5, 5),
            Trans(4, 13, 5, 5),
            Trans(4, 14, 5, 5),
            Trans(4, 15, 5, 5),
            Trans(4, 16, 5, 5),
            Trans(4, 17, 5, 5),
        ],
        k: 2,
    },
    /* 33 - "LogicalAnd" */
    LookaheadDFA {
        prod0: 19,
        transitions: &[],
        k: 0,
    },
    /* 34 - "LogicalAndItem" */
    LookaheadDFA {
        prod0: 24,
        transitions: &[],
        k: 0,
    },
    /* 35 - "LogicalAndLst1" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 2, 22),
            Trans(0, 8, 2, 22),
            Trans(0, 9, 1, 20),
            Trans(0, 19, 2, 22),
        ],
        k: 1,
    },
    /* 36 - "LogicalAndLst1Itm1" */
    LookaheadDFA {
        prod0: 21,
        transitions: &[],
        k: 0,
    },
    /* 37 - "LogicalAndOp" */
    LookaheadDFA {
        prod0: 23,
        transitions: &[],
        k: 0,
    },
    /* 38 - "LogicalOr" */
    LookaheadDFA {
        prod0: 13,
        transitions: &[],
        k: 0,
    },
    /* 39 - "LogicalOrItem" */
    LookaheadDFA {
        prod0: 18,
        transitions: &[],
        k: 0,
    },
    /* 40 - "LogicalOrLst1" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 5, 2, 16), Trans(0, 8, 1, 14), Trans(0, 19, 2, 16)],
        k: 1,
    },
    /* 41 - "LogicalOrLst1Itm1" */
    LookaheadDFA {
        prod0: 15,
        transitions: &[],
        k: 0,
    },
    /* 42 - "LogicalOrOp" */
    LookaheadDFA {
        prod0: 17,
        transitions: &[],
        k: 0,
    },
    /* 43 - "Minus" */
    LookaheadDFA {
        prod0: 59,
        transitions: &[],
        k: 0,
    },
    /* 44 - "Mult" */
    LookaheadDFA {
        prod0: 64,
        transitions: &[],
        k: 0,
    },
    /* 45 - "MultItem" */
    LookaheadDFA {
        prod0: 69,
        transitions: &[],
        k: 0,
    },
    /* 46 - "MultLst1" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 2, 67),
            Trans(0, 6, 2, 67),
            Trans(0, 8, 2, 67),
            Trans(0, 9, 2, 67),
            Trans(0, 10, 2, 67),
            Trans(0, 11, 2, 67),
            Trans(0, 12, 2, 67),
            Trans(0, 13, 2, 67),
            Trans(0, 14, 2, 67),
            Trans(0, 15, 2, 67),
            Trans(0, 17, 1, 65),
            Trans(0, 19, 2, 67),
        ],
        k: 1,
    },
    /* 47 - "MultLst1Itm1" */
    LookaheadDFA {
        prod0: 66,
        transitions: &[],
        k: 0,
    },
    /* 48 - "MultOp" */
    LookaheadDFA {
        prod0: 68,
        transitions: &[],
        k: 0,
    },
    /* 49 - "Negate" */
    LookaheadDFA {
        prod0: 74,
        transitions: &[],
        k: 0,
    },
    /* 50 - "Number" */
    LookaheadDFA {
        prod0: 79,
        transitions: &[],
        k: 0,
    },
    /* 51 - "Plus" */
    LookaheadDFA {
        prod0: 58,
        transitions: &[],
        k: 0,
    },
    /* 52 - "PowOp" */
    LookaheadDFA {
        prod0: 63,
        transitions: &[],
        k: 0,
    },
    /* 53 - "Power" */
    LookaheadDFA {
        prod0: 70,
        transitions: &[],
        k: 0,
    },
    /* 54 - "PowerLst1" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 2, 73),
            Trans(0, 6, 2, 73),
            Trans(0, 8, 2, 73),
            Trans(0, 9, 2, 73),
            Trans(0, 10, 2, 73),
            Trans(0, 11, 2, 73),
            Trans(0, 12, 2, 73),
            Trans(0, 13, 2, 73),
            Trans(0, 14, 2, 73),
            Trans(0, 15, 2, 73),
            Trans(0, 16, 1, 71),
            Trans(0, 17, 2, 73),
            Trans(0, 19, 2, 73),
        ],
        k: 1,
    },
    /* 55 - "PowerLst1Itm1" */
    LookaheadDFA {
        prod0: 72,
        transitions: &[],
        k: 0,
    },
    /* 56 - "Relational" */
    LookaheadDFA {
        prod0: 43,
        transitions: &[],
        k: 0,
    },
    /* 57 - "RelationalItem" */
    LookaheadDFA {
        prod0: 48,
        transitions: &[],
        k: 0,
    },
    /* 58 - "RelationalLst1" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 2, 46),
            Trans(0, 6, 2, 46),
            Trans(0, 8, 2, 46),
            Trans(0, 9, 2, 46),
            Trans(0, 10, 2, 46),
            Trans(0, 11, 2, 46),
            Trans(0, 13, 1, 44),
            Trans(0, 19, 2, 46),
        ],
        k: 1,
    },
    /* 59 - "RelationalLst1Itm1" */
    LookaheadDFA {
        prod0: 45,
        transitions: &[],
        k: 0,
    },
    /* 60 - "RelationalOp" */
    LookaheadDFA {
        prod0: 47,
        transitions: &[],
        k: 0,
    },
    /* 61 - "Summ" */
    LookaheadDFA {
        prod0: 54,
        transitions: &[],
        k: 0,
    },
    /* 62 - "SummItem" */
    LookaheadDFA {
        prod0: 62,
        transitions: &[],
        k: 0,
    },
    /* 63 - "SummLst1" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 2, 57),
            Trans(0, 6, 2, 57),
            Trans(0, 8, 2, 57),
            Trans(0, 9, 2, 57),
            Trans(0, 10, 2, 57),
            Trans(0, 11, 2, 57),
            Trans(0, 12, 2, 57),
            Trans(0, 13, 2, 57),
            Trans(0, 14, 1, 55),
            Trans(0, 15, 1, 55),
            Trans(0, 19, 2, 57),
        ],
        k: 1,
    },
    /* 64 - "SummLst1Itm1" */
    LookaheadDFA {
        prod0: 56,
        transitions: &[],
        k: 0,
    },
];

pub const PRODUCTIONS: &[Production; 82] = &[
    // 0 - Calc: CalcLst1;
    Production {
        lhs: 21,
        production: &[ParseType::N(22)],
    },
    // 1 - CalcLst1: CalcLst1Itm1 CalcLst1;
    Production {
        lhs: 22,
        production: &[ParseType::N(22), ParseType::N(23)],
    },
    // 2 - CalcLst1Itm1: Instruction ";";
    Production {
        lhs: 23,
        production: &[ParseType::T(5), ParseType::N(32)],
    },
    // 3 - CalcLst1: ;
    Production {
        lhs: 22,
        production: &[],
    },
    // 4 - Instruction: Assignment;
    Production {
        lhs: 32,
        production: &[ParseType::N(3)],
    },
    // 5 - Instruction: LogicalOr;
    Production {
        lhs: 32,
        production: &[ParseType::N(38)],
    },
    // 6 - EqualityOp: "==|!=";
    Production {
        lhs: 28,
        production: &[ParseType::T(6)],
    },
    // 7 - AssignOp: "(\+|-|\*|/|%|<<|>>|&|\^|\|)?=";
    Production {
        lhs: 2,
        production: &[ParseType::T(7)],
    },
    // 8 - AssignItem: Id AssignOp;
    Production {
        lhs: 1,
        production: &[ParseType::N(2), ParseType::N(30)],
    },
    // 9 - Assignment: AssignItem AssignmentLst1 LogicalOr;
    Production {
        lhs: 3,
        production: &[ParseType::N(38), ParseType::N(4), ParseType::N(1)],
    },
    // 10 - AssignmentLst1: AssignmentLst1Itm1 AssignmentLst1;
    Production {
        lhs: 4,
        production: &[ParseType::N(4), ParseType::N(5)],
    },
    // 11 - AssignmentLst1Itm1: AssignItem;
    Production {
        lhs: 5,
        production: &[ParseType::N(1)],
    },
    // 12 - AssignmentLst1: ;
    Production {
        lhs: 4,
        production: &[],
    },
    // 13 - LogicalOr: LogicalAnd LogicalOrLst1;
    Production {
        lhs: 38,
        production: &[ParseType::N(40), ParseType::N(33)],
    },
    // 14 - LogicalOrLst1: LogicalOrLst1Itm1 LogicalOrLst1;
    Production {
        lhs: 40,
        production: &[ParseType::N(40), ParseType::N(41)],
    },
    // 15 - LogicalOrLst1Itm1: LogicalOrItem;
    Production {
        lhs: 41,
        production: &[ParseType::N(39)],
    },
    // 16 - LogicalOrLst1: ;
    Production {
        lhs: 40,
        production: &[],
    },
    // 17 - LogicalOrOp: "\|\|";
    Production {
        lhs: 42,
        production: &[ParseType::T(8)],
    },
    // 18 - LogicalOrItem: LogicalOrOp LogicalAnd;
    Production {
        lhs: 39,
        production: &[ParseType::N(33), ParseType::N(42)],
    },
    // 19 - LogicalAnd: BitwiseOr LogicalAndLst1;
    Production {
        lhs: 33,
        production: &[ParseType::N(35), ParseType::N(11)],
    },
    // 20 - LogicalAndLst1: LogicalAndLst1Itm1 LogicalAndLst1;
    Production {
        lhs: 35,
        production: &[ParseType::N(35), ParseType::N(36)],
    },
    // 21 - LogicalAndLst1Itm1: LogicalAndItem;
    Production {
        lhs: 36,
        production: &[ParseType::N(34)],
    },
    // 22 - LogicalAndLst1: ;
    Production {
        lhs: 35,
        production: &[],
    },
    // 23 - LogicalAndOp: "&&";
    Production {
        lhs: 37,
        production: &[ParseType::T(9)],
    },
    // 24 - LogicalAndItem: LogicalAndOp BitwiseOr;
    Production {
        lhs: 34,
        production: &[ParseType::N(11), ParseType::N(37)],
    },
    // 25 - BitwiseOr: BitwiseAnd BitwiseOrLst1;
    Production {
        lhs: 11,
        production: &[ParseType::N(13), ParseType::N(6)],
    },
    // 26 - BitwiseOrLst1: BitwiseOrLst1Itm1 BitwiseOrLst1;
    Production {
        lhs: 13,
        production: &[ParseType::N(13), ParseType::N(14)],
    },
    // 27 - BitwiseOrLst1Itm1: BitwiseOrItem;
    Production {
        lhs: 14,
        production: &[ParseType::N(12)],
    },
    // 28 - BitwiseOrLst1: ;
    Production {
        lhs: 13,
        production: &[],
    },
    // 29 - BitwiseOrOp: "\|";
    Production {
        lhs: 15,
        production: &[ParseType::T(10)],
    },
    // 30 - BitwiseOrItem: BitwiseOrOp BitwiseAnd;
    Production {
        lhs: 12,
        production: &[ParseType::N(6), ParseType::N(15)],
    },
    // 31 - BitwiseAnd: Equality BitwiseAndLst1;
    Production {
        lhs: 6,
        production: &[ParseType::N(8), ParseType::N(24)],
    },
    // 32 - BitwiseAndLst1: BitwiseAndLst1Itm1 BitwiseAndLst1;
    Production {
        lhs: 8,
        production: &[ParseType::N(8), ParseType::N(9)],
    },
    // 33 - BitwiseAndLst1Itm1: BitwiseAndItem;
    Production {
        lhs: 9,
        production: &[ParseType::N(7)],
    },
    // 34 - BitwiseAndLst1: ;
    Production {
        lhs: 8,
        production: &[],
    },
    // 35 - BitwiseAndOp: "&";
    Production {
        lhs: 10,
        production: &[ParseType::T(11)],
    },
    // 36 - BitwiseAndItem: BitwiseAndOp Equality;
    Production {
        lhs: 7,
        production: &[ParseType::N(24), ParseType::N(10)],
    },
    // 37 - Equality: Relational EqualityLst1;
    Production {
        lhs: 24,
        production: &[ParseType::N(26), ParseType::N(56)],
    },
    // 38 - EqualityLst1: EqualityLst1Itm1 EqualityLst1;
    Production {
        lhs: 26,
        production: &[ParseType::N(26), ParseType::N(27)],
    },
    // 39 - EqualityLst1Itm1: EqualityItem;
    Production {
        lhs: 27,
        production: &[ParseType::N(25)],
    },
    // 40 - EqualityLst1: ;
    Production {
        lhs: 26,
        production: &[],
    },
    // 41 - EqualityItem: EqualityOp Relational;
    Production {
        lhs: 25,
        production: &[ParseType::N(56), ParseType::N(28)],
    },
    // 42 - BitwiseShiftOp: "<<|>>";
    Production {
        lhs: 20,
        production: &[ParseType::T(12)],
    },
    // 43 - Relational: BitwiseShift RelationalLst1;
    Production {
        lhs: 56,
        production: &[ParseType::N(58), ParseType::N(16)],
    },
    // 44 - RelationalLst1: RelationalLst1Itm1 RelationalLst1;
    Production {
        lhs: 58,
        production: &[ParseType::N(58), ParseType::N(59)],
    },
    // 45 - RelationalLst1Itm1: RelationalItem;
    Production {
        lhs: 59,
        production: &[ParseType::N(57)],
    },
    // 46 - RelationalLst1: ;
    Production {
        lhs: 58,
        production: &[],
    },
    // 47 - RelationalOp: "<=|<|>=|>";
    Production {
        lhs: 60,
        production: &[ParseType::T(13)],
    },
    // 48 - RelationalItem: RelationalOp BitwiseShift;
    Production {
        lhs: 57,
        production: &[ParseType::N(16), ParseType::N(60)],
    },
    // 49 - BitwiseShift: Summ BitwiseShiftLst1;
    Production {
        lhs: 16,
        production: &[ParseType::N(18), ParseType::N(61)],
    },
    // 50 - BitwiseShiftLst1: BitwiseShiftLst1Itm1 BitwiseShiftLst1;
    Production {
        lhs: 18,
        production: &[ParseType::N(18), ParseType::N(19)],
    },
    // 51 - BitwiseShiftLst1Itm1: BitwiseShiftItem;
    Production {
        lhs: 19,
        production: &[ParseType::N(17)],
    },
    // 52 - BitwiseShiftLst1: ;
    Production {
        lhs: 18,
        production: &[],
    },
    // 53 - BitwiseShiftItem: BitwiseShiftOp Summ;
    Production {
        lhs: 17,
        production: &[ParseType::N(61), ParseType::N(20)],
    },
    // 54 - Summ: Mult SummLst1;
    Production {
        lhs: 61,
        production: &[ParseType::N(63), ParseType::N(44)],
    },
    // 55 - SummLst1: SummLst1Itm1 SummLst1;
    Production {
        lhs: 63,
        production: &[ParseType::N(63), ParseType::N(64)],
    },
    // 56 - SummLst1Itm1: SummItem;
    Production {
        lhs: 64,
        production: &[ParseType::N(62)],
    },
    // 57 - SummLst1: ;
    Production {
        lhs: 63,
        production: &[],
    },
    // 58 - Plus: "\+";
    Production {
        lhs: 51,
        production: &[ParseType::T(14)],
    },
    // 59 - Minus: "-";
    Production {
        lhs: 43,
        production: &[ParseType::T(15)],
    },
    // 60 - AddOp: Plus;
    Production {
        lhs: 0,
        production: &[ParseType::N(51)],
    },
    // 61 - AddOp: Minus;
    Production {
        lhs: 0,
        production: &[ParseType::N(43)],
    },
    // 62 - SummItem: AddOp Mult;
    Production {
        lhs: 62,
        production: &[ParseType::N(44), ParseType::N(0)],
    },
    // 63 - PowOp: "\*\*";
    Production {
        lhs: 52,
        production: &[ParseType::T(16)],
    },
    // 64 - Mult: Power MultLst1;
    Production {
        lhs: 44,
        production: &[ParseType::N(46), ParseType::N(53)],
    },
    // 65 - MultLst1: MultLst1Itm1 MultLst1;
    Production {
        lhs: 46,
        production: &[ParseType::N(46), ParseType::N(47)],
    },
    // 66 - MultLst1Itm1: MultItem;
    Production {
        lhs: 47,
        production: &[ParseType::N(45)],
    },
    // 67 - MultLst1: ;
    Production {
        lhs: 46,
        production: &[],
    },
    // 68 - MultOp: "\*|/|%";
    Production {
        lhs: 48,
        production: &[ParseType::T(17)],
    },
    // 69 - MultItem: MultOp Power;
    Production {
        lhs: 45,
        production: &[ParseType::N(53), ParseType::N(48)],
    },
    // 70 - Power: Factor PowerLst1;
    Production {
        lhs: 53,
        production: &[ParseType::N(54), ParseType::N(29)],
    },
    // 71 - PowerLst1: PowerLst1Itm1 PowerLst1;
    Production {
        lhs: 54,
        production: &[ParseType::N(54), ParseType::N(55)],
    },
    // 72 - PowerLst1Itm1: PowOp Factor;
    Production {
        lhs: 55,
        production: &[ParseType::N(29), ParseType::N(52)],
    },
    // 73 - PowerLst1: ;
    Production {
        lhs: 54,
        production: &[],
    },
    // 74 - Negate: Minus;
    Production {
        lhs: 49,
        production: &[ParseType::N(43)],
    },
    // 75 - Factor: Number;
    Production {
        lhs: 29,
        production: &[ParseType::N(50)],
    },
    // 76 - Factor: IdRef;
    Production {
        lhs: 29,
        production: &[ParseType::N(31)],
    },
    // 77 - Factor: Negate Factor;
    Production {
        lhs: 29,
        production: &[ParseType::N(29), ParseType::N(49)],
    },
    // 78 - Factor: "\(" LogicalOr "\)";
    Production {
        lhs: 29,
        production: &[ParseType::T(19), ParseType::N(38), ParseType::T(18)],
    },
    // 79 - Number: "0|[1-9][0-9]*";
    Production {
        lhs: 50,
        production: &[ParseType::T(20)],
    },
    // 80 - IdRef: Id;
    Production {
        lhs: 31,
        production: &[ParseType::N(30)],
    },
    // 81 - Id: "[a-zA-Z_][a-zA-Z0-9_]*";
    Production {
        lhs: 30,
        production: &[ParseType::T(21)],
    },
];

static TOKENIZERS: Lazy<Vec<(&'static str, Tokenizer)>> = Lazy::new(|| {
    vec![(
        "INITIAL",
        Tokenizer::build(TERMINALS, SCANNER_0.0, SCANNER_0.1).unwrap(),
    )]
});

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut dyn UserActionsTrait<'t>,
) -> Result<ParseTree<'t>, ParolError>
where
    T: AsRef<Path>,
{
    let mut llk_parser = LLKParser::new(
        21,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    let token_stream =
        RefCell::new(TokenStream::new(input, file_name, &TOKENIZERS, MAX_K).unwrap());
    llk_parser.parse(token_stream, user_actions)
}
