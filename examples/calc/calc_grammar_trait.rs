// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

// Disable clippy warnings that can result in the way how parol generates code.
#![allow(clippy::enum_variant_names)]
#![allow(clippy::large_enum_variant)]
#![allow(clippy::upper_case_acronyms)]

use parol_runtime::derive_builder::Builder;
use parol_runtime::log::trace;
#[allow(unused_imports)]
use parol_runtime::parol_macros::{pop_and_reverse_item, pop_item};
use parol_runtime::parser::parse_tree_type::{NonTerminalEnum, TerminalEnum};
use parol_runtime::parser::{ParseTreeType, UserActionsTrait};
use parol_runtime::{ParserError, Result, Token};

/// Semantic actions trait generated for the user grammar
/// All functions have default implementations.
pub trait CalcGrammarTrait<'t> {
    /// Semantic action for non-terminal 'Calc'
    fn calc(&mut self, _arg: &Calc<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'EqualityOp'
    fn equality_op(&mut self, _arg: &EqualityOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'AssignOp'
    fn assign_op(&mut self, _arg: &AssignOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'LogicalOrOp'
    fn logical_or_op(&mut self, _arg: &LogicalOrOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'LogicalAndOp'
    fn logical_and_op(&mut self, _arg: &LogicalAndOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'BitwiseOrOp'
    fn bitwise_or_op(&mut self, _arg: &BitwiseOrOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'BitwiseAndOp'
    fn bitwise_and_op(&mut self, _arg: &BitwiseAndOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'BitwiseShiftOp'
    fn bitwise_shift_op(&mut self, _arg: &BitwiseShiftOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'RelationalOp'
    fn relational_op(&mut self, _arg: &RelationalOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'Plus'
    fn plus(&mut self, _arg: &Plus<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'Minus'
    fn minus(&mut self, _arg: &Minus<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'PowOp'
    fn pow_op(&mut self, _arg: &PowOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'MultOp'
    fn mult_op(&mut self, _arg: &MultOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'Instruction'
    fn instruction(&mut self, _arg: &Instruction<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'AssignItem'
    fn assign_item(&mut self, _arg: &AssignItem<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'Assignment'
    fn assignment(&mut self, _arg: &Assignment<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'LogicalOr'
    fn logical_or(&mut self, _arg: &LogicalOr<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'LogicalAnd'
    fn logical_and(&mut self, _arg: &LogicalAnd<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'BitwiseOr'
    fn bitwise_or(&mut self, _arg: &BitwiseOr<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'BitwiseAnd'
    fn bitwise_and(&mut self, _arg: &BitwiseAnd<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'Equality'
    fn equality(&mut self, _arg: &Equality<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'Relational'
    fn relational(&mut self, _arg: &Relational<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'BitwiseShift'
    fn bitwise_shift(&mut self, _arg: &BitwiseShift<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'AddOp'
    fn add_op(&mut self, _arg: &AddOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'Summ'
    fn summ(&mut self, _arg: &Summ<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'Mult'
    fn mult(&mut self, _arg: &Mult<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'Power'
    fn power(&mut self, _arg: &Power<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'Negate'
    fn negate(&mut self, _arg: &Negate<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'Factor'
    fn factor(&mut self, _arg: &Factor<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'Number'
    fn number(&mut self, _arg: &Number) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'IdRef'
    fn id_ref(&mut self, _arg: &IdRef<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'Id'
    fn id(&mut self, _arg: &Id<'t>) -> Result<()> {
        Ok(())
    }

    /// This method provides skipped language comments.
    /// If you need comments please provide your own implementation of this method.
    fn on_comment(&mut self, _token: Token<'t>) {}
}

// -------------------------------------------------------------------------------------------------
//
// Output Types of productions deduced from the structure of the transformed grammar
//

///
/// Type derived for production 15
///
/// `Instruction: Assignment;`
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct InstructionAssignment<'t> {
    pub assignment: Assignment<'t>,
}

///
/// Type derived for production 16
///
/// `Instruction: LogicalOr;`
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct InstructionLogicalOr<'t> {
    pub logical_or: LogicalOr<'t>,
}

///
/// Type derived for production 42
///
/// `AddOp: Plus;`
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct AddOpPlus<'t> {
    pub plus: Plus<'t>,
}

///
/// Type derived for production 43
///
/// `AddOp: Minus;`
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct AddOpMinus<'t> {
    pub minus: Minus<'t>,
}

///
/// Type derived for production 54
///
/// `Factor: Number;`
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct FactorNumber {
    pub number: Number,
}

///
/// Type derived for production 55
///
/// `Factor: IdRef;`
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct FactorIdRef<'t> {
    pub id_ref: IdRef<'t>,
}

///
/// Type derived for production 56
///
/// `Factor: Negate Factor;`
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct FactorNegateFactor<'t> {
    pub negate: Negate<'t>,
    pub factor: Box<Factor<'t>>,
}

///
/// Type derived for production 57
///
/// `Factor: "\("^ /* Clipped */ LogicalOr "\)"^ /* Clipped */;`
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct FactorLParenLogicalOrRParen<'t> {
    pub logical_or: Box<LogicalOr<'t>>,
}

// -------------------------------------------------------------------------------------------------
//
// Types of non-terminals deduced from the structure of the transformed grammar
//

///
/// Type derived for non-terminal AddOp
///
#[allow(dead_code)]
#[derive(Debug, Clone)]
pub enum AddOp<'t> {
    Plus(AddOpPlus<'t>),
    Minus(AddOpMinus<'t>),
}

///
/// Type derived for non-terminal AssignItem
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct AssignItem<'t> {
    pub id: Id<'t>,
    pub assign_op: AssignOp<'t>,
}

///
/// Type derived for non-terminal AssignOp
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct AssignOp<'t> {
    pub assign_op: Token<'t>, /* (\+|-|\*|/|%|<<|>>|&|\^|\|)?= */
}

///
/// Type derived for non-terminal Assignment
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct Assignment<'t> {
    pub assign_item: AssignItem<'t>,
    pub assignment_list: Vec<AssignmentList<'t>>,
    pub logical_or: LogicalOr<'t>,
}

///
/// Type derived for non-terminal AssignmentList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct AssignmentList<'t> {
    pub assign_item: AssignItem<'t>,
}

///
/// Type derived for non-terminal BitwiseAnd
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct BitwiseAnd<'t> {
    pub equality: Equality<'t>,
    pub bitwise_and_list: Vec<BitwiseAndList<'t>>,
}

///
/// Type derived for non-terminal BitwiseAndList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct BitwiseAndList<'t> {
    pub bitwise_and_op: BitwiseAndOp<'t>,
    pub equality: Equality<'t>,
}

///
/// Type derived for non-terminal BitwiseAndOp
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct BitwiseAndOp<'t> {
    pub bitwise_and_op: Token<'t>, /* & */
}

///
/// Type derived for non-terminal BitwiseOr
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct BitwiseOr<'t> {
    pub bitwise_and: BitwiseAnd<'t>,
    pub bitwise_or_list: Vec<BitwiseOrList<'t>>,
}

///
/// Type derived for non-terminal BitwiseOrList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct BitwiseOrList<'t> {
    pub bitwise_or_op: BitwiseOrOp<'t>,
    pub bitwise_and: BitwiseAnd<'t>,
}

///
/// Type derived for non-terminal BitwiseOrOp
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct BitwiseOrOp<'t> {
    pub bitwise_or_op: Token<'t>, /* \| */
}

///
/// Type derived for non-terminal BitwiseShift
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct BitwiseShift<'t> {
    pub summ: Summ<'t>,
    pub bitwise_shift_list: Vec<BitwiseShiftList<'t>>,
}

///
/// Type derived for non-terminal BitwiseShiftList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct BitwiseShiftList<'t> {
    pub bitwise_shift_op: BitwiseShiftOp<'t>,
    pub summ: Summ<'t>,
}

///
/// Type derived for non-terminal BitwiseShiftOp
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct BitwiseShiftOp<'t> {
    pub bitwise_shift_op: Token<'t>, /* <<|>> */
}

///
/// Type derived for non-terminal Calc
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct Calc<'t> {
    pub calc_list: Vec<CalcList<'t>>,
}

///
/// Type derived for non-terminal CalcList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct CalcList<'t> {
    pub instruction: Instruction<'t>,
}

///
/// Type derived for non-terminal Equality
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct Equality<'t> {
    pub relational: Relational<'t>,
    pub equality_list: Vec<EqualityList<'t>>,
}

///
/// Type derived for non-terminal EqualityList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct EqualityList<'t> {
    pub equality_op: EqualityOp<'t>,
    pub relational: Relational<'t>,
}

///
/// Type derived for non-terminal EqualityOp
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct EqualityOp<'t> {
    pub equality_op: Token<'t>, /* ==|!= */
}

///
/// Type derived for non-terminal Factor
///
#[allow(dead_code)]
#[derive(Debug, Clone)]
pub enum Factor<'t> {
    Number(FactorNumber),
    IdRef(FactorIdRef<'t>),
    NegateFactor(FactorNegateFactor<'t>),
    LParenLogicalOrRParen(FactorLParenLogicalOrRParen<'t>),
}

///
/// Type derived for non-terminal Id
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct Id<'t> {
    pub id: Token<'t>, /* [a-zA-Z_][a-zA-Z0-9_]* */
}

///
/// Type derived for non-terminal IdRef
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct IdRef<'t> {
    pub id: Id<'t>,
}

///
/// Type derived for non-terminal Instruction
///
#[allow(dead_code)]
#[derive(Debug, Clone)]
pub enum Instruction<'t> {
    Assignment(InstructionAssignment<'t>),
    LogicalOr(InstructionLogicalOr<'t>),
}

///
/// Type derived for non-terminal LogicalAnd
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct LogicalAnd<'t> {
    pub bitwise_or: BitwiseOr<'t>,
    pub logical_and_list: Vec<LogicalAndList<'t>>,
}

///
/// Type derived for non-terminal LogicalAndList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct LogicalAndList<'t> {
    pub logical_and_op: LogicalAndOp<'t>,
    pub bitwise_or: BitwiseOr<'t>,
}

///
/// Type derived for non-terminal LogicalAndOp
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct LogicalAndOp<'t> {
    pub logical_and_op: Token<'t>, /* && */
}

///
/// Type derived for non-terminal LogicalOr
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct LogicalOr<'t> {
    pub logical_and: LogicalAnd<'t>,
    pub logical_or_list: Vec<LogicalOrList<'t>>,
}

///
/// Type derived for non-terminal LogicalOrList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct LogicalOrList<'t> {
    pub logical_or_op: LogicalOrOp<'t>,
    pub logical_and: LogicalAnd<'t>,
}

///
/// Type derived for non-terminal LogicalOrOp
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct LogicalOrOp<'t> {
    pub logical_or_op: Token<'t>, /* \|\| */
}

///
/// Type derived for non-terminal Minus
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct Minus<'t> {
    pub minus: Token<'t>, /* - */
}

///
/// Type derived for non-terminal Mult
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct Mult<'t> {
    pub power: Power<'t>,
    pub mult_list: Vec<MultList<'t>>,
}

///
/// Type derived for non-terminal MultList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct MultList<'t> {
    pub mult_op: MultOp<'t>,
    pub power: Power<'t>,
}

///
/// Type derived for non-terminal MultOp
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct MultOp<'t> {
    pub mult_op: Token<'t>, /* \*|/|% */
}

///
/// Type derived for non-terminal Negate
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct Negate<'t> {
    pub minus: Minus<'t>,
}

///
/// Type derived for non-terminal Number
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct Number {
    pub number: crate::calc_grammar::Number, /* 0|[1-9][0-9]* */
}

///
/// Type derived for non-terminal Plus
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct Plus<'t> {
    pub plus: Token<'t>, /* \+ */
}

///
/// Type derived for non-terminal PowOp
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct PowOp<'t> {
    pub pow_op: Token<'t>, /* \*\* */
}

///
/// Type derived for non-terminal Power
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct Power<'t> {
    pub factor: Factor<'t>,
    pub power_list: Vec<PowerList<'t>>,
}

///
/// Type derived for non-terminal PowerList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct PowerList<'t> {
    pub pow_op: PowOp<'t>,
    pub factor: Factor<'t>,
}

///
/// Type derived for non-terminal Relational
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct Relational<'t> {
    pub bitwise_shift: BitwiseShift<'t>,
    pub relational_list: Vec<RelationalList<'t>>,
}

///
/// Type derived for non-terminal RelationalList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct RelationalList<'t> {
    pub relational_op: RelationalOp<'t>,
    pub bitwise_shift: BitwiseShift<'t>,
}

///
/// Type derived for non-terminal RelationalOp
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct RelationalOp<'t> {
    pub relational_op: Token<'t>, /* <=|<|>=|> */
}

///
/// Type derived for non-terminal Summ
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct Summ<'t> {
    pub mult: Mult<'t>,
    pub summ_list: Vec<SummList<'t>>,
}

///
/// Type derived for non-terminal SummList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct SummList<'t> {
    pub add_op: AddOp<'t>,
    pub mult: Mult<'t>,
}

// -------------------------------------------------------------------------------------------------

///
/// Deduced ASTType of expanded grammar
///
#[allow(dead_code)]
#[derive(Debug, Clone)]
pub enum ASTType<'t> {
    AddOp(AddOp<'t>),
    AssignItem(AssignItem<'t>),
    AssignOp(AssignOp<'t>),
    Assignment(Assignment<'t>),
    AssignmentList(Vec<AssignmentList<'t>>),
    BitwiseAnd(BitwiseAnd<'t>),
    BitwiseAndList(Vec<BitwiseAndList<'t>>),
    BitwiseAndOp(BitwiseAndOp<'t>),
    BitwiseOr(BitwiseOr<'t>),
    BitwiseOrList(Vec<BitwiseOrList<'t>>),
    BitwiseOrOp(BitwiseOrOp<'t>),
    BitwiseShift(BitwiseShift<'t>),
    BitwiseShiftList(Vec<BitwiseShiftList<'t>>),
    BitwiseShiftOp(BitwiseShiftOp<'t>),
    Calc(Calc<'t>),
    CalcList(Vec<CalcList<'t>>),
    Equality(Equality<'t>),
    EqualityList(Vec<EqualityList<'t>>),
    EqualityOp(EqualityOp<'t>),
    Factor(Factor<'t>),
    Id(Id<'t>),
    IdRef(IdRef<'t>),
    Instruction(Instruction<'t>),
    LogicalAnd(LogicalAnd<'t>),
    LogicalAndList(Vec<LogicalAndList<'t>>),
    LogicalAndOp(LogicalAndOp<'t>),
    LogicalOr(LogicalOr<'t>),
    LogicalOrList(Vec<LogicalOrList<'t>>),
    LogicalOrOp(LogicalOrOp<'t>),
    Minus(Minus<'t>),
    Mult(Mult<'t>),
    MultList(Vec<MultList<'t>>),
    MultOp(MultOp<'t>),
    Negate(Negate<'t>),
    Number(Number),
    Plus(Plus<'t>),
    PowOp(PowOp<'t>),
    Power(Power<'t>),
    PowerList(Vec<PowerList<'t>>),
    Relational(Relational<'t>),
    RelationalList(Vec<RelationalList<'t>>),
    RelationalOp(RelationalOp<'t>),
    Summ(Summ<'t>),
    SummList(Vec<SummList<'t>>),
}

// -------------------------------------------------------------------------------------------------

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum NonTerminalKind {
    AddOp,
    AssignItem,
    AssignOp,
    Assignment,
    AssignmentList,
    BitwiseAnd,
    BitwiseAndList,
    BitwiseAndOp,
    BitwiseOr,
    BitwiseOrList,
    BitwiseOrOp,
    BitwiseShift,
    BitwiseShiftList,
    BitwiseShiftOp,
    Calc,
    CalcList,
    Equality,
    EqualityList,
    EqualityOp,
    Factor,
    Id,
    IdRef,
    Instruction,
    LogicalAnd,
    LogicalAndList,
    LogicalAndOp,
    LogicalOr,
    LogicalOrList,
    LogicalOrOp,
    Minus,
    Mult,
    MultList,
    MultOp,
    Negate,
    Number,
    Plus,
    PowOp,
    Power,
    PowerList,
    Relational,
    RelationalList,
    RelationalOp,
    Summ,
    SummList,
    Root,
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum TerminalKind {
    NewLine,
    Whitespace,
    LineComment,
    BlockComment,
    Semicolon,
    EqualityOp,
    AssignOp,
    LogicalOrOp,
    LogicalAndOp,
    BitwiseOrOp,
    BitwiseAndOp,
    BitwiseShiftOp,
    RelationalOp,
    Plus,
    Minus,
    PowOp,
    MultOp,
    LParen,
    RParen,
    Number,
    Id,
}

impl TerminalEnum for TerminalKind {
    fn from_terminal_index(index: u16) -> Self {
        match index {
            1 => Self::NewLine,
            2 => Self::Whitespace,
            3 => Self::LineComment,
            4 => Self::BlockComment,
            5 => Self::Semicolon,
            6 => Self::EqualityOp,
            7 => Self::AssignOp,
            8 => Self::LogicalOrOp,
            9 => Self::LogicalAndOp,
            10 => Self::BitwiseOrOp,
            11 => Self::BitwiseAndOp,
            12 => Self::BitwiseShiftOp,
            13 => Self::RelationalOp,
            14 => Self::Plus,
            15 => Self::Minus,
            16 => Self::PowOp,
            17 => Self::MultOp,
            18 => Self::LParen,
            19 => Self::RParen,
            20 => Self::Number,
            21 => Self::Id,
            _ => panic!("Invalid terminal index: {}", index),
        }
    }
}

impl NonTerminalEnum for NonTerminalKind {
    fn from_non_terminal_name(name: &str) -> Self {
        match name {
            "AddOp" => Self::AddOp,
            "AssignItem" => Self::AssignItem,
            "AssignOp" => Self::AssignOp,
            "Assignment" => Self::Assignment,
            "AssignmentList" => Self::AssignmentList,
            "BitwiseAnd" => Self::BitwiseAnd,
            "BitwiseAndList" => Self::BitwiseAndList,
            "BitwiseAndOp" => Self::BitwiseAndOp,
            "BitwiseOr" => Self::BitwiseOr,
            "BitwiseOrList" => Self::BitwiseOrList,
            "BitwiseOrOp" => Self::BitwiseOrOp,
            "BitwiseShift" => Self::BitwiseShift,
            "BitwiseShiftList" => Self::BitwiseShiftList,
            "BitwiseShiftOp" => Self::BitwiseShiftOp,
            "Calc" => Self::Calc,
            "CalcList" => Self::CalcList,
            "Equality" => Self::Equality,
            "EqualityList" => Self::EqualityList,
            "EqualityOp" => Self::EqualityOp,
            "Factor" => Self::Factor,
            "Id" => Self::Id,
            "IdRef" => Self::IdRef,
            "Instruction" => Self::Instruction,
            "LogicalAnd" => Self::LogicalAnd,
            "LogicalAndList" => Self::LogicalAndList,
            "LogicalAndOp" => Self::LogicalAndOp,
            "LogicalOr" => Self::LogicalOr,
            "LogicalOrList" => Self::LogicalOrList,
            "LogicalOrOp" => Self::LogicalOrOp,
            "Minus" => Self::Minus,
            "Mult" => Self::Mult,
            "MultList" => Self::MultList,
            "MultOp" => Self::MultOp,
            "Negate" => Self::Negate,
            "Number" => Self::Number,
            "Plus" => Self::Plus,
            "PowOp" => Self::PowOp,
            "Power" => Self::Power,
            "PowerList" => Self::PowerList,
            "Relational" => Self::Relational,
            "RelationalList" => Self::RelationalList,
            "RelationalOp" => Self::RelationalOp,
            "Summ" => Self::Summ,
            "SummList" => Self::SummList,
            "" => Self::Root,
            _ => panic!("Invalid non-terminal name: {}", name),
        }
    }
}

// -------------------------------------------------------------------------------------------------

/// Auto-implemented adapter grammar
///
/// The lifetime parameter `'t` refers to the lifetime of the scanned text.
/// The lifetime parameter `'u` refers to the lifetime of user grammar object.
///
#[allow(dead_code)]
pub struct CalcGrammarAuto<'t, 'u>
where
    't: 'u,
{
    // Mutable reference of the actual user grammar to be able to call the semantic actions on it
    user_grammar: &'u mut dyn CalcGrammarTrait<'t>,
    // Stack to construct the AST on it
    item_stack: Vec<ASTType<'t>>,
}

///
/// The `CalcGrammarAuto` impl is automatically generated for the
/// given grammar.
///
impl<'t, 'u> CalcGrammarAuto<'t, 'u> {
    pub fn new(user_grammar: &'u mut dyn CalcGrammarTrait<'t>) -> Self {
        Self {
            user_grammar,
            item_stack: Vec::new(),
        }
    }

    #[allow(dead_code)]
    fn push(&mut self, item: ASTType<'t>, context: &str) {
        trace!("push    {}: {:?}", context, item);
        self.item_stack.push(item)
    }

    #[allow(dead_code)]
    fn pop(&mut self, context: &str) -> Option<ASTType<'t>> {
        let item = self.item_stack.pop();
        if let Some(ref item) = item {
            trace!("pop     {}: {:?}", context, item);
        }
        item
    }

    #[allow(dead_code)]
    // Use this function for debugging purposes:
    // trace!("{}", self.trace_item_stack(context));
    fn trace_item_stack(&self, context: &str) -> std::string::String {
        format!(
            "Item stack at {}:\n{}",
            context,
            self.item_stack
                .iter()
                .rev()
                .map(|s| format!("  {:?}", s))
                .collect::<Vec<std::string::String>>()
                .join("\n")
        )
    }

    /// Semantic action for production 0:
    ///
    /// `Calc: CalcList /* Vec */;`
    ///
    #[parol_runtime::function_name::named]
    fn calc(&mut self, _calc_list: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let calc_list = pop_and_reverse_item!(self, calc_list, CalcList, context);
        let calc_built = Calc { calc_list };
        // Calling user action here
        self.user_grammar.calc(&calc_built)?;
        self.push(ASTType::Calc(calc_built), context);
        Ok(())
    }

    /// Semantic action for production 1:
    ///
    /// `CalcList /* Vec<T>::Push */: Instruction ";"^ /* Clipped */ CalcList;`
    ///
    #[parol_runtime::function_name::named]
    fn calc_list_0(
        &mut self,
        _instruction: &ParseTreeType<'t>,
        _semicolon: &ParseTreeType<'t>,
        _calc_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mut calc_list = pop_item!(self, calc_list, CalcList, context);
        let instruction = pop_item!(self, instruction, Instruction, context);
        let calc_list_0_built = CalcList { instruction };
        // Add an element to the vector
        calc_list.push(calc_list_0_built);
        self.push(ASTType::CalcList(calc_list), context);
        Ok(())
    }

    /// Semantic action for production 2:
    ///
    /// `CalcList /* Vec<T>::New */: ;`
    ///
    #[parol_runtime::function_name::named]
    fn calc_list_1(&mut self) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let calc_list_1_built = Vec::new();
        self.push(ASTType::CalcList(calc_list_1_built), context);
        Ok(())
    }

    /// Semantic action for production 3:
    ///
    /// `EqualityOp: "==|!=";`
    ///
    #[parol_runtime::function_name::named]
    fn equality_op(&mut self, equality_op: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let equality_op = equality_op.token()?.clone();
        let equality_op_built = EqualityOp { equality_op };
        // Calling user action here
        self.user_grammar.equality_op(&equality_op_built)?;
        self.push(ASTType::EqualityOp(equality_op_built), context);
        Ok(())
    }

    /// Semantic action for production 4:
    ///
    /// `AssignOp: "(\+|-|\*|/|%|<<|>>|&|\^|\|)?=";`
    ///
    #[parol_runtime::function_name::named]
    fn assign_op(&mut self, assign_op: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let assign_op = assign_op.token()?.clone();
        let assign_op_built = AssignOp { assign_op };
        // Calling user action here
        self.user_grammar.assign_op(&assign_op_built)?;
        self.push(ASTType::AssignOp(assign_op_built), context);
        Ok(())
    }

    /// Semantic action for production 5:
    ///
    /// `LogicalOrOp: "\|\|";`
    ///
    #[parol_runtime::function_name::named]
    fn logical_or_op(&mut self, logical_or_op: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let logical_or_op = logical_or_op.token()?.clone();
        let logical_or_op_built = LogicalOrOp { logical_or_op };
        // Calling user action here
        self.user_grammar.logical_or_op(&logical_or_op_built)?;
        self.push(ASTType::LogicalOrOp(logical_or_op_built), context);
        Ok(())
    }

    /// Semantic action for production 6:
    ///
    /// `LogicalAndOp: "&&";`
    ///
    #[parol_runtime::function_name::named]
    fn logical_and_op(&mut self, logical_and_op: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let logical_and_op = logical_and_op.token()?.clone();
        let logical_and_op_built = LogicalAndOp { logical_and_op };
        // Calling user action here
        self.user_grammar.logical_and_op(&logical_and_op_built)?;
        self.push(ASTType::LogicalAndOp(logical_and_op_built), context);
        Ok(())
    }

    /// Semantic action for production 7:
    ///
    /// `BitwiseOrOp: "\|";`
    ///
    #[parol_runtime::function_name::named]
    fn bitwise_or_op(&mut self, bitwise_or_op: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let bitwise_or_op = bitwise_or_op.token()?.clone();
        let bitwise_or_op_built = BitwiseOrOp { bitwise_or_op };
        // Calling user action here
        self.user_grammar.bitwise_or_op(&bitwise_or_op_built)?;
        self.push(ASTType::BitwiseOrOp(bitwise_or_op_built), context);
        Ok(())
    }

    /// Semantic action for production 8:
    ///
    /// `BitwiseAndOp: "&";`
    ///
    #[parol_runtime::function_name::named]
    fn bitwise_and_op(&mut self, bitwise_and_op: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let bitwise_and_op = bitwise_and_op.token()?.clone();
        let bitwise_and_op_built = BitwiseAndOp { bitwise_and_op };
        // Calling user action here
        self.user_grammar.bitwise_and_op(&bitwise_and_op_built)?;
        self.push(ASTType::BitwiseAndOp(bitwise_and_op_built), context);
        Ok(())
    }

    /// Semantic action for production 9:
    ///
    /// `BitwiseShiftOp: "<<|>>";`
    ///
    #[parol_runtime::function_name::named]
    fn bitwise_shift_op(&mut self, bitwise_shift_op: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let bitwise_shift_op = bitwise_shift_op.token()?.clone();
        let bitwise_shift_op_built = BitwiseShiftOp { bitwise_shift_op };
        // Calling user action here
        self.user_grammar
            .bitwise_shift_op(&bitwise_shift_op_built)?;
        self.push(ASTType::BitwiseShiftOp(bitwise_shift_op_built), context);
        Ok(())
    }

    /// Semantic action for production 10:
    ///
    /// `RelationalOp: "<=|<|>=|>";`
    ///
    #[parol_runtime::function_name::named]
    fn relational_op(&mut self, relational_op: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let relational_op = relational_op.token()?.clone();
        let relational_op_built = RelationalOp { relational_op };
        // Calling user action here
        self.user_grammar.relational_op(&relational_op_built)?;
        self.push(ASTType::RelationalOp(relational_op_built), context);
        Ok(())
    }

    /// Semantic action for production 11:
    ///
    /// `Plus: "\+";`
    ///
    #[parol_runtime::function_name::named]
    fn plus(&mut self, plus: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let plus = plus.token()?.clone();
        let plus_built = Plus { plus };
        // Calling user action here
        self.user_grammar.plus(&plus_built)?;
        self.push(ASTType::Plus(plus_built), context);
        Ok(())
    }

    /// Semantic action for production 12:
    ///
    /// `Minus: "-";`
    ///
    #[parol_runtime::function_name::named]
    fn minus(&mut self, minus: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let minus = minus.token()?.clone();
        let minus_built = Minus { minus };
        // Calling user action here
        self.user_grammar.minus(&minus_built)?;
        self.push(ASTType::Minus(minus_built), context);
        Ok(())
    }

    /// Semantic action for production 13:
    ///
    /// `PowOp: "\*\*";`
    ///
    #[parol_runtime::function_name::named]
    fn pow_op(&mut self, pow_op: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let pow_op = pow_op.token()?.clone();
        let pow_op_built = PowOp { pow_op };
        // Calling user action here
        self.user_grammar.pow_op(&pow_op_built)?;
        self.push(ASTType::PowOp(pow_op_built), context);
        Ok(())
    }

    /// Semantic action for production 14:
    ///
    /// `MultOp: "\*|/|%";`
    ///
    #[parol_runtime::function_name::named]
    fn mult_op(&mut self, mult_op: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mult_op = mult_op.token()?.clone();
        let mult_op_built = MultOp { mult_op };
        // Calling user action here
        self.user_grammar.mult_op(&mult_op_built)?;
        self.push(ASTType::MultOp(mult_op_built), context);
        Ok(())
    }

    /// Semantic action for production 15:
    ///
    /// `Instruction: Assignment;`
    ///
    #[parol_runtime::function_name::named]
    fn instruction_0(&mut self, _assignment: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let assignment = pop_item!(self, assignment, Assignment, context);
        let instruction_0_built = InstructionAssignment { assignment };
        let instruction_0_built = Instruction::Assignment(instruction_0_built);
        // Calling user action here
        self.user_grammar.instruction(&instruction_0_built)?;
        self.push(ASTType::Instruction(instruction_0_built), context);
        Ok(())
    }

    /// Semantic action for production 16:
    ///
    /// `Instruction: LogicalOr;`
    ///
    #[parol_runtime::function_name::named]
    fn instruction_1(&mut self, _logical_or: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let logical_or = pop_item!(self, logical_or, LogicalOr, context);
        let instruction_1_built = InstructionLogicalOr { logical_or };
        let instruction_1_built = Instruction::LogicalOr(instruction_1_built);
        // Calling user action here
        self.user_grammar.instruction(&instruction_1_built)?;
        self.push(ASTType::Instruction(instruction_1_built), context);
        Ok(())
    }

    /// Semantic action for production 17:
    ///
    /// `AssignItem: Id AssignOp;`
    ///
    #[parol_runtime::function_name::named]
    fn assign_item(
        &mut self,
        _id: &ParseTreeType<'t>,
        _assign_op: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let assign_op = pop_item!(self, assign_op, AssignOp, context);
        let id = pop_item!(self, id, Id, context);
        let assign_item_built = AssignItem { id, assign_op };
        // Calling user action here
        self.user_grammar.assign_item(&assign_item_built)?;
        self.push(ASTType::AssignItem(assign_item_built), context);
        Ok(())
    }

    /// Semantic action for production 18:
    ///
    /// `Assignment: AssignItem AssignmentList /* Vec */ LogicalOr;`
    ///
    #[parol_runtime::function_name::named]
    fn assignment(
        &mut self,
        _assign_item: &ParseTreeType<'t>,
        _assignment_list: &ParseTreeType<'t>,
        _logical_or: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let logical_or = pop_item!(self, logical_or, LogicalOr, context);
        let assignment_list = pop_and_reverse_item!(self, assignment_list, AssignmentList, context);
        let assign_item = pop_item!(self, assign_item, AssignItem, context);
        let assignment_built = Assignment {
            assign_item,
            assignment_list,
            logical_or,
        };
        // Calling user action here
        self.user_grammar.assignment(&assignment_built)?;
        self.push(ASTType::Assignment(assignment_built), context);
        Ok(())
    }

    /// Semantic action for production 19:
    ///
    /// `AssignmentList /* Vec<T>::Push */: AssignItem AssignmentList;`
    ///
    #[parol_runtime::function_name::named]
    fn assignment_list_0(
        &mut self,
        _assign_item: &ParseTreeType<'t>,
        _assignment_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mut assignment_list = pop_item!(self, assignment_list, AssignmentList, context);
        let assign_item = pop_item!(self, assign_item, AssignItem, context);
        let assignment_list_0_built = AssignmentList { assign_item };
        // Add an element to the vector
        assignment_list.push(assignment_list_0_built);
        self.push(ASTType::AssignmentList(assignment_list), context);
        Ok(())
    }

    /// Semantic action for production 20:
    ///
    /// `AssignmentList /* Vec<T>::New */: ;`
    ///
    #[parol_runtime::function_name::named]
    fn assignment_list_1(&mut self) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let assignment_list_1_built = Vec::new();
        self.push(ASTType::AssignmentList(assignment_list_1_built), context);
        Ok(())
    }

    /// Semantic action for production 21:
    ///
    /// `LogicalOr: LogicalAnd LogicalOrList /* Vec */;`
    ///
    #[parol_runtime::function_name::named]
    fn logical_or(
        &mut self,
        _logical_and: &ParseTreeType<'t>,
        _logical_or_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let logical_or_list = pop_and_reverse_item!(self, logical_or_list, LogicalOrList, context);
        let logical_and = pop_item!(self, logical_and, LogicalAnd, context);
        let logical_or_built = LogicalOr {
            logical_and,
            logical_or_list,
        };
        // Calling user action here
        self.user_grammar.logical_or(&logical_or_built)?;
        self.push(ASTType::LogicalOr(logical_or_built), context);
        Ok(())
    }

    /// Semantic action for production 22:
    ///
    /// `LogicalOrList /* Vec<T>::Push */: LogicalOrOp LogicalAnd LogicalOrList;`
    ///
    #[parol_runtime::function_name::named]
    fn logical_or_list_0(
        &mut self,
        _logical_or_op: &ParseTreeType<'t>,
        _logical_and: &ParseTreeType<'t>,
        _logical_or_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mut logical_or_list = pop_item!(self, logical_or_list, LogicalOrList, context);
        let logical_and = pop_item!(self, logical_and, LogicalAnd, context);
        let logical_or_op = pop_item!(self, logical_or_op, LogicalOrOp, context);
        let logical_or_list_0_built = LogicalOrList {
            logical_and,
            logical_or_op,
        };
        // Add an element to the vector
        logical_or_list.push(logical_or_list_0_built);
        self.push(ASTType::LogicalOrList(logical_or_list), context);
        Ok(())
    }

    /// Semantic action for production 23:
    ///
    /// `LogicalOrList /* Vec<T>::New */: ;`
    ///
    #[parol_runtime::function_name::named]
    fn logical_or_list_1(&mut self) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let logical_or_list_1_built = Vec::new();
        self.push(ASTType::LogicalOrList(logical_or_list_1_built), context);
        Ok(())
    }

    /// Semantic action for production 24:
    ///
    /// `LogicalAnd: BitwiseOr LogicalAndList /* Vec */;`
    ///
    #[parol_runtime::function_name::named]
    fn logical_and(
        &mut self,
        _bitwise_or: &ParseTreeType<'t>,
        _logical_and_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let logical_and_list =
            pop_and_reverse_item!(self, logical_and_list, LogicalAndList, context);
        let bitwise_or = pop_item!(self, bitwise_or, BitwiseOr, context);
        let logical_and_built = LogicalAnd {
            bitwise_or,
            logical_and_list,
        };
        // Calling user action here
        self.user_grammar.logical_and(&logical_and_built)?;
        self.push(ASTType::LogicalAnd(logical_and_built), context);
        Ok(())
    }

    /// Semantic action for production 25:
    ///
    /// `LogicalAndList /* Vec<T>::Push */: LogicalAndOp BitwiseOr LogicalAndList;`
    ///
    #[parol_runtime::function_name::named]
    fn logical_and_list_0(
        &mut self,
        _logical_and_op: &ParseTreeType<'t>,
        _bitwise_or: &ParseTreeType<'t>,
        _logical_and_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mut logical_and_list = pop_item!(self, logical_and_list, LogicalAndList, context);
        let bitwise_or = pop_item!(self, bitwise_or, BitwiseOr, context);
        let logical_and_op = pop_item!(self, logical_and_op, LogicalAndOp, context);
        let logical_and_list_0_built = LogicalAndList {
            bitwise_or,
            logical_and_op,
        };
        // Add an element to the vector
        logical_and_list.push(logical_and_list_0_built);
        self.push(ASTType::LogicalAndList(logical_and_list), context);
        Ok(())
    }

    /// Semantic action for production 26:
    ///
    /// `LogicalAndList /* Vec<T>::New */: ;`
    ///
    #[parol_runtime::function_name::named]
    fn logical_and_list_1(&mut self) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let logical_and_list_1_built = Vec::new();
        self.push(ASTType::LogicalAndList(logical_and_list_1_built), context);
        Ok(())
    }

    /// Semantic action for production 27:
    ///
    /// `BitwiseOr: BitwiseAnd BitwiseOrList /* Vec */;`
    ///
    #[parol_runtime::function_name::named]
    fn bitwise_or(
        &mut self,
        _bitwise_and: &ParseTreeType<'t>,
        _bitwise_or_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let bitwise_or_list = pop_and_reverse_item!(self, bitwise_or_list, BitwiseOrList, context);
        let bitwise_and = pop_item!(self, bitwise_and, BitwiseAnd, context);
        let bitwise_or_built = BitwiseOr {
            bitwise_and,
            bitwise_or_list,
        };
        // Calling user action here
        self.user_grammar.bitwise_or(&bitwise_or_built)?;
        self.push(ASTType::BitwiseOr(bitwise_or_built), context);
        Ok(())
    }

    /// Semantic action for production 28:
    ///
    /// `BitwiseOrList /* Vec<T>::Push */: BitwiseOrOp BitwiseAnd BitwiseOrList;`
    ///
    #[parol_runtime::function_name::named]
    fn bitwise_or_list_0(
        &mut self,
        _bitwise_or_op: &ParseTreeType<'t>,
        _bitwise_and: &ParseTreeType<'t>,
        _bitwise_or_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mut bitwise_or_list = pop_item!(self, bitwise_or_list, BitwiseOrList, context);
        let bitwise_and = pop_item!(self, bitwise_and, BitwiseAnd, context);
        let bitwise_or_op = pop_item!(self, bitwise_or_op, BitwiseOrOp, context);
        let bitwise_or_list_0_built = BitwiseOrList {
            bitwise_and,
            bitwise_or_op,
        };
        // Add an element to the vector
        bitwise_or_list.push(bitwise_or_list_0_built);
        self.push(ASTType::BitwiseOrList(bitwise_or_list), context);
        Ok(())
    }

    /// Semantic action for production 29:
    ///
    /// `BitwiseOrList /* Vec<T>::New */: ;`
    ///
    #[parol_runtime::function_name::named]
    fn bitwise_or_list_1(&mut self) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let bitwise_or_list_1_built = Vec::new();
        self.push(ASTType::BitwiseOrList(bitwise_or_list_1_built), context);
        Ok(())
    }

    /// Semantic action for production 30:
    ///
    /// `BitwiseAnd: Equality BitwiseAndList /* Vec */;`
    ///
    #[parol_runtime::function_name::named]
    fn bitwise_and(
        &mut self,
        _equality: &ParseTreeType<'t>,
        _bitwise_and_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let bitwise_and_list =
            pop_and_reverse_item!(self, bitwise_and_list, BitwiseAndList, context);
        let equality = pop_item!(self, equality, Equality, context);
        let bitwise_and_built = BitwiseAnd {
            equality,
            bitwise_and_list,
        };
        // Calling user action here
        self.user_grammar.bitwise_and(&bitwise_and_built)?;
        self.push(ASTType::BitwiseAnd(bitwise_and_built), context);
        Ok(())
    }

    /// Semantic action for production 31:
    ///
    /// `BitwiseAndList /* Vec<T>::Push */: BitwiseAndOp Equality BitwiseAndList;`
    ///
    #[parol_runtime::function_name::named]
    fn bitwise_and_list_0(
        &mut self,
        _bitwise_and_op: &ParseTreeType<'t>,
        _equality: &ParseTreeType<'t>,
        _bitwise_and_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mut bitwise_and_list = pop_item!(self, bitwise_and_list, BitwiseAndList, context);
        let equality = pop_item!(self, equality, Equality, context);
        let bitwise_and_op = pop_item!(self, bitwise_and_op, BitwiseAndOp, context);
        let bitwise_and_list_0_built = BitwiseAndList {
            equality,
            bitwise_and_op,
        };
        // Add an element to the vector
        bitwise_and_list.push(bitwise_and_list_0_built);
        self.push(ASTType::BitwiseAndList(bitwise_and_list), context);
        Ok(())
    }

    /// Semantic action for production 32:
    ///
    /// `BitwiseAndList /* Vec<T>::New */: ;`
    ///
    #[parol_runtime::function_name::named]
    fn bitwise_and_list_1(&mut self) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let bitwise_and_list_1_built = Vec::new();
        self.push(ASTType::BitwiseAndList(bitwise_and_list_1_built), context);
        Ok(())
    }

    /// Semantic action for production 33:
    ///
    /// `Equality: Relational EqualityList /* Vec */;`
    ///
    #[parol_runtime::function_name::named]
    fn equality(
        &mut self,
        _relational: &ParseTreeType<'t>,
        _equality_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let equality_list = pop_and_reverse_item!(self, equality_list, EqualityList, context);
        let relational = pop_item!(self, relational, Relational, context);
        let equality_built = Equality {
            relational,
            equality_list,
        };
        // Calling user action here
        self.user_grammar.equality(&equality_built)?;
        self.push(ASTType::Equality(equality_built), context);
        Ok(())
    }

    /// Semantic action for production 34:
    ///
    /// `EqualityList /* Vec<T>::Push */: EqualityOp Relational EqualityList;`
    ///
    #[parol_runtime::function_name::named]
    fn equality_list_0(
        &mut self,
        _equality_op: &ParseTreeType<'t>,
        _relational: &ParseTreeType<'t>,
        _equality_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mut equality_list = pop_item!(self, equality_list, EqualityList, context);
        let relational = pop_item!(self, relational, Relational, context);
        let equality_op = pop_item!(self, equality_op, EqualityOp, context);
        let equality_list_0_built = EqualityList {
            relational,
            equality_op,
        };
        // Add an element to the vector
        equality_list.push(equality_list_0_built);
        self.push(ASTType::EqualityList(equality_list), context);
        Ok(())
    }

    /// Semantic action for production 35:
    ///
    /// `EqualityList /* Vec<T>::New */: ;`
    ///
    #[parol_runtime::function_name::named]
    fn equality_list_1(&mut self) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let equality_list_1_built = Vec::new();
        self.push(ASTType::EqualityList(equality_list_1_built), context);
        Ok(())
    }

    /// Semantic action for production 36:
    ///
    /// `Relational: BitwiseShift RelationalList /* Vec */;`
    ///
    #[parol_runtime::function_name::named]
    fn relational(
        &mut self,
        _bitwise_shift: &ParseTreeType<'t>,
        _relational_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let relational_list = pop_and_reverse_item!(self, relational_list, RelationalList, context);
        let bitwise_shift = pop_item!(self, bitwise_shift, BitwiseShift, context);
        let relational_built = Relational {
            bitwise_shift,
            relational_list,
        };
        // Calling user action here
        self.user_grammar.relational(&relational_built)?;
        self.push(ASTType::Relational(relational_built), context);
        Ok(())
    }

    /// Semantic action for production 37:
    ///
    /// `RelationalList /* Vec<T>::Push */: RelationalOp BitwiseShift RelationalList;`
    ///
    #[parol_runtime::function_name::named]
    fn relational_list_0(
        &mut self,
        _relational_op: &ParseTreeType<'t>,
        _bitwise_shift: &ParseTreeType<'t>,
        _relational_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mut relational_list = pop_item!(self, relational_list, RelationalList, context);
        let bitwise_shift = pop_item!(self, bitwise_shift, BitwiseShift, context);
        let relational_op = pop_item!(self, relational_op, RelationalOp, context);
        let relational_list_0_built = RelationalList {
            bitwise_shift,
            relational_op,
        };
        // Add an element to the vector
        relational_list.push(relational_list_0_built);
        self.push(ASTType::RelationalList(relational_list), context);
        Ok(())
    }

    /// Semantic action for production 38:
    ///
    /// `RelationalList /* Vec<T>::New */: ;`
    ///
    #[parol_runtime::function_name::named]
    fn relational_list_1(&mut self) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let relational_list_1_built = Vec::new();
        self.push(ASTType::RelationalList(relational_list_1_built), context);
        Ok(())
    }

    /// Semantic action for production 39:
    ///
    /// `BitwiseShift: Summ BitwiseShiftList /* Vec */;`
    ///
    #[parol_runtime::function_name::named]
    fn bitwise_shift(
        &mut self,
        _summ: &ParseTreeType<'t>,
        _bitwise_shift_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let bitwise_shift_list =
            pop_and_reverse_item!(self, bitwise_shift_list, BitwiseShiftList, context);
        let summ = pop_item!(self, summ, Summ, context);
        let bitwise_shift_built = BitwiseShift {
            summ,
            bitwise_shift_list,
        };
        // Calling user action here
        self.user_grammar.bitwise_shift(&bitwise_shift_built)?;
        self.push(ASTType::BitwiseShift(bitwise_shift_built), context);
        Ok(())
    }

    /// Semantic action for production 40:
    ///
    /// `BitwiseShiftList /* Vec<T>::Push */: BitwiseShiftOp Summ BitwiseShiftList;`
    ///
    #[parol_runtime::function_name::named]
    fn bitwise_shift_list_0(
        &mut self,
        _bitwise_shift_op: &ParseTreeType<'t>,
        _summ: &ParseTreeType<'t>,
        _bitwise_shift_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mut bitwise_shift_list = pop_item!(self, bitwise_shift_list, BitwiseShiftList, context);
        let summ = pop_item!(self, summ, Summ, context);
        let bitwise_shift_op = pop_item!(self, bitwise_shift_op, BitwiseShiftOp, context);
        let bitwise_shift_list_0_built = BitwiseShiftList {
            summ,
            bitwise_shift_op,
        };
        // Add an element to the vector
        bitwise_shift_list.push(bitwise_shift_list_0_built);
        self.push(ASTType::BitwiseShiftList(bitwise_shift_list), context);
        Ok(())
    }

    /// Semantic action for production 41:
    ///
    /// `BitwiseShiftList /* Vec<T>::New */: ;`
    ///
    #[parol_runtime::function_name::named]
    fn bitwise_shift_list_1(&mut self) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let bitwise_shift_list_1_built = Vec::new();
        self.push(
            ASTType::BitwiseShiftList(bitwise_shift_list_1_built),
            context,
        );
        Ok(())
    }

    /// Semantic action for production 42:
    ///
    /// `AddOp: Plus;`
    ///
    #[parol_runtime::function_name::named]
    fn add_op_0(&mut self, _plus: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let plus = pop_item!(self, plus, Plus, context);
        let add_op_0_built = AddOpPlus { plus };
        let add_op_0_built = AddOp::Plus(add_op_0_built);
        // Calling user action here
        self.user_grammar.add_op(&add_op_0_built)?;
        self.push(ASTType::AddOp(add_op_0_built), context);
        Ok(())
    }

    /// Semantic action for production 43:
    ///
    /// `AddOp: Minus;`
    ///
    #[parol_runtime::function_name::named]
    fn add_op_1(&mut self, _minus: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let minus = pop_item!(self, minus, Minus, context);
        let add_op_1_built = AddOpMinus { minus };
        let add_op_1_built = AddOp::Minus(add_op_1_built);
        // Calling user action here
        self.user_grammar.add_op(&add_op_1_built)?;
        self.push(ASTType::AddOp(add_op_1_built), context);
        Ok(())
    }

    /// Semantic action for production 44:
    ///
    /// `Summ: Mult SummList /* Vec */;`
    ///
    #[parol_runtime::function_name::named]
    fn summ(&mut self, _mult: &ParseTreeType<'t>, _summ_list: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let summ_list = pop_and_reverse_item!(self, summ_list, SummList, context);
        let mult = pop_item!(self, mult, Mult, context);
        let summ_built = Summ { mult, summ_list };
        // Calling user action here
        self.user_grammar.summ(&summ_built)?;
        self.push(ASTType::Summ(summ_built), context);
        Ok(())
    }

    /// Semantic action for production 45:
    ///
    /// `SummList /* Vec<T>::Push */: AddOp Mult SummList;`
    ///
    #[parol_runtime::function_name::named]
    fn summ_list_0(
        &mut self,
        _add_op: &ParseTreeType<'t>,
        _mult: &ParseTreeType<'t>,
        _summ_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mut summ_list = pop_item!(self, summ_list, SummList, context);
        let mult = pop_item!(self, mult, Mult, context);
        let add_op = pop_item!(self, add_op, AddOp, context);
        let summ_list_0_built = SummList { mult, add_op };
        // Add an element to the vector
        summ_list.push(summ_list_0_built);
        self.push(ASTType::SummList(summ_list), context);
        Ok(())
    }

    /// Semantic action for production 46:
    ///
    /// `SummList /* Vec<T>::New */: ;`
    ///
    #[parol_runtime::function_name::named]
    fn summ_list_1(&mut self) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let summ_list_1_built = Vec::new();
        self.push(ASTType::SummList(summ_list_1_built), context);
        Ok(())
    }

    /// Semantic action for production 47:
    ///
    /// `Mult: Power MultList /* Vec */;`
    ///
    #[parol_runtime::function_name::named]
    fn mult(&mut self, _power: &ParseTreeType<'t>, _mult_list: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mult_list = pop_and_reverse_item!(self, mult_list, MultList, context);
        let power = pop_item!(self, power, Power, context);
        let mult_built = Mult { power, mult_list };
        // Calling user action here
        self.user_grammar.mult(&mult_built)?;
        self.push(ASTType::Mult(mult_built), context);
        Ok(())
    }

    /// Semantic action for production 48:
    ///
    /// `MultList /* Vec<T>::Push */: MultOp Power MultList;`
    ///
    #[parol_runtime::function_name::named]
    fn mult_list_0(
        &mut self,
        _mult_op: &ParseTreeType<'t>,
        _power: &ParseTreeType<'t>,
        _mult_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mut mult_list = pop_item!(self, mult_list, MultList, context);
        let power = pop_item!(self, power, Power, context);
        let mult_op = pop_item!(self, mult_op, MultOp, context);
        let mult_list_0_built = MultList { power, mult_op };
        // Add an element to the vector
        mult_list.push(mult_list_0_built);
        self.push(ASTType::MultList(mult_list), context);
        Ok(())
    }

    /// Semantic action for production 49:
    ///
    /// `MultList /* Vec<T>::New */: ;`
    ///
    #[parol_runtime::function_name::named]
    fn mult_list_1(&mut self) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mult_list_1_built = Vec::new();
        self.push(ASTType::MultList(mult_list_1_built), context);
        Ok(())
    }

    /// Semantic action for production 50:
    ///
    /// `Power: Factor PowerList /* Vec */;`
    ///
    #[parol_runtime::function_name::named]
    fn power(
        &mut self,
        _factor: &ParseTreeType<'t>,
        _power_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let power_list = pop_and_reverse_item!(self, power_list, PowerList, context);
        let factor = pop_item!(self, factor, Factor, context);
        let power_built = Power { factor, power_list };
        // Calling user action here
        self.user_grammar.power(&power_built)?;
        self.push(ASTType::Power(power_built), context);
        Ok(())
    }

    /// Semantic action for production 51:
    ///
    /// `PowerList /* Vec<T>::Push */: PowOp Factor PowerList;`
    ///
    #[parol_runtime::function_name::named]
    fn power_list_0(
        &mut self,
        _pow_op: &ParseTreeType<'t>,
        _factor: &ParseTreeType<'t>,
        _power_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mut power_list = pop_item!(self, power_list, PowerList, context);
        let factor = pop_item!(self, factor, Factor, context);
        let pow_op = pop_item!(self, pow_op, PowOp, context);
        let power_list_0_built = PowerList { factor, pow_op };
        // Add an element to the vector
        power_list.push(power_list_0_built);
        self.push(ASTType::PowerList(power_list), context);
        Ok(())
    }

    /// Semantic action for production 52:
    ///
    /// `PowerList /* Vec<T>::New */: ;`
    ///
    #[parol_runtime::function_name::named]
    fn power_list_1(&mut self) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let power_list_1_built = Vec::new();
        self.push(ASTType::PowerList(power_list_1_built), context);
        Ok(())
    }

    /// Semantic action for production 53:
    ///
    /// `Negate: Minus;`
    ///
    #[parol_runtime::function_name::named]
    fn negate(&mut self, _minus: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let minus = pop_item!(self, minus, Minus, context);
        let negate_built = Negate { minus };
        // Calling user action here
        self.user_grammar.negate(&negate_built)?;
        self.push(ASTType::Negate(negate_built), context);
        Ok(())
    }

    /// Semantic action for production 54:
    ///
    /// `Factor: Number;`
    ///
    #[parol_runtime::function_name::named]
    fn factor_0(&mut self, _number: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let number = pop_item!(self, number, Number, context);
        let factor_0_built = FactorNumber { number };
        let factor_0_built = Factor::Number(factor_0_built);
        // Calling user action here
        self.user_grammar.factor(&factor_0_built)?;
        self.push(ASTType::Factor(factor_0_built), context);
        Ok(())
    }

    /// Semantic action for production 55:
    ///
    /// `Factor: IdRef;`
    ///
    #[parol_runtime::function_name::named]
    fn factor_1(&mut self, _id_ref: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let id_ref = pop_item!(self, id_ref, IdRef, context);
        let factor_1_built = FactorIdRef { id_ref };
        let factor_1_built = Factor::IdRef(factor_1_built);
        // Calling user action here
        self.user_grammar.factor(&factor_1_built)?;
        self.push(ASTType::Factor(factor_1_built), context);
        Ok(())
    }

    /// Semantic action for production 56:
    ///
    /// `Factor: Negate Factor;`
    ///
    #[parol_runtime::function_name::named]
    fn factor_2(&mut self, _negate: &ParseTreeType<'t>, _factor: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let factor = pop_item!(self, factor, Factor, context);
        let negate = pop_item!(self, negate, Negate, context);
        let factor_2_built = FactorNegateFactor {
            negate,
            factor: Box::new(factor),
        };
        let factor_2_built = Factor::NegateFactor(factor_2_built);
        // Calling user action here
        self.user_grammar.factor(&factor_2_built)?;
        self.push(ASTType::Factor(factor_2_built), context);
        Ok(())
    }

    /// Semantic action for production 57:
    ///
    /// `Factor: "\("^ /* Clipped */ LogicalOr "\)"^ /* Clipped */;`
    ///
    #[parol_runtime::function_name::named]
    fn factor_3(
        &mut self,
        _l_paren: &ParseTreeType<'t>,
        _logical_or: &ParseTreeType<'t>,
        _r_paren: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let logical_or = pop_item!(self, logical_or, LogicalOr, context);
        let factor_3_built = FactorLParenLogicalOrRParen {
            logical_or: Box::new(logical_or),
        };
        let factor_3_built = Factor::LParenLogicalOrRParen(factor_3_built);
        // Calling user action here
        self.user_grammar.factor(&factor_3_built)?;
        self.push(ASTType::Factor(factor_3_built), context);
        Ok(())
    }

    /// Semantic action for production 58:
    ///
    /// `Number: "0|[1-9][0-9]*" : crate::calc_grammar::Number;`
    ///
    #[parol_runtime::function_name::named]
    fn number(&mut self, number: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let number = number
            .token()?
            .try_into()
            .map_err(parol_runtime::ParolError::UserError)?;
        let number_built = Number { number };
        // Calling user action here
        self.user_grammar.number(&number_built)?;
        self.push(ASTType::Number(number_built), context);
        Ok(())
    }

    /// Semantic action for production 59:
    ///
    /// `IdRef: Id;`
    ///
    #[parol_runtime::function_name::named]
    fn id_ref(&mut self, _id: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let id = pop_item!(self, id, Id, context);
        let id_ref_built = IdRef { id };
        // Calling user action here
        self.user_grammar.id_ref(&id_ref_built)?;
        self.push(ASTType::IdRef(id_ref_built), context);
        Ok(())
    }

    /// Semantic action for production 60:
    ///
    /// `Id: "[a-zA-Z_][a-zA-Z0-9_]*";`
    ///
    #[parol_runtime::function_name::named]
    fn id(&mut self, id: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let id = id.token()?.clone();
        let id_built = Id { id };
        // Calling user action here
        self.user_grammar.id(&id_built)?;
        self.push(ASTType::Id(id_built), context);
        Ok(())
    }
}

impl<'t> UserActionsTrait<'t> for CalcGrammarAuto<'t, '_> {
    ///
    /// This function is implemented automatically for the user's item CalcGrammar.
    ///
    fn call_semantic_action_for_production_number(
        &mut self,
        prod_num: usize,
        children: &[ParseTreeType<'t>],
    ) -> Result<()> {
        match prod_num {
            0 => self.calc(&children[0]),
            1 => self.calc_list_0(&children[0], &children[1], &children[2]),
            2 => self.calc_list_1(),
            3 => self.equality_op(&children[0]),
            4 => self.assign_op(&children[0]),
            5 => self.logical_or_op(&children[0]),
            6 => self.logical_and_op(&children[0]),
            7 => self.bitwise_or_op(&children[0]),
            8 => self.bitwise_and_op(&children[0]),
            9 => self.bitwise_shift_op(&children[0]),
            10 => self.relational_op(&children[0]),
            11 => self.plus(&children[0]),
            12 => self.minus(&children[0]),
            13 => self.pow_op(&children[0]),
            14 => self.mult_op(&children[0]),
            15 => self.instruction_0(&children[0]),
            16 => self.instruction_1(&children[0]),
            17 => self.assign_item(&children[0], &children[1]),
            18 => self.assignment(&children[0], &children[1], &children[2]),
            19 => self.assignment_list_0(&children[0], &children[1]),
            20 => self.assignment_list_1(),
            21 => self.logical_or(&children[0], &children[1]),
            22 => self.logical_or_list_0(&children[0], &children[1], &children[2]),
            23 => self.logical_or_list_1(),
            24 => self.logical_and(&children[0], &children[1]),
            25 => self.logical_and_list_0(&children[0], &children[1], &children[2]),
            26 => self.logical_and_list_1(),
            27 => self.bitwise_or(&children[0], &children[1]),
            28 => self.bitwise_or_list_0(&children[0], &children[1], &children[2]),
            29 => self.bitwise_or_list_1(),
            30 => self.bitwise_and(&children[0], &children[1]),
            31 => self.bitwise_and_list_0(&children[0], &children[1], &children[2]),
            32 => self.bitwise_and_list_1(),
            33 => self.equality(&children[0], &children[1]),
            34 => self.equality_list_0(&children[0], &children[1], &children[2]),
            35 => self.equality_list_1(),
            36 => self.relational(&children[0], &children[1]),
            37 => self.relational_list_0(&children[0], &children[1], &children[2]),
            38 => self.relational_list_1(),
            39 => self.bitwise_shift(&children[0], &children[1]),
            40 => self.bitwise_shift_list_0(&children[0], &children[1], &children[2]),
            41 => self.bitwise_shift_list_1(),
            42 => self.add_op_0(&children[0]),
            43 => self.add_op_1(&children[0]),
            44 => self.summ(&children[0], &children[1]),
            45 => self.summ_list_0(&children[0], &children[1], &children[2]),
            46 => self.summ_list_1(),
            47 => self.mult(&children[0], &children[1]),
            48 => self.mult_list_0(&children[0], &children[1], &children[2]),
            49 => self.mult_list_1(),
            50 => self.power(&children[0], &children[1]),
            51 => self.power_list_0(&children[0], &children[1], &children[2]),
            52 => self.power_list_1(),
            53 => self.negate(&children[0]),
            54 => self.factor_0(&children[0]),
            55 => self.factor_1(&children[0]),
            56 => self.factor_2(&children[0], &children[1]),
            57 => self.factor_3(&children[0], &children[1], &children[2]),
            58 => self.number(&children[0]),
            59 => self.id_ref(&children[0]),
            60 => self.id(&children[0]),
            _ => Err(ParserError::InternalError(format!(
                "Unhandled production number: {}",
                prod_num
            ))
            .into()),
        }
    }

    fn on_comment(&mut self, token: Token<'t>) {
        self.user_grammar.on_comment(token)
    }
}
