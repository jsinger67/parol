%start Start
%title "Test grammar"
%comment "Tests correct handling of scanner states"

// The following declarations only apply to scanner INITIAL
%line_comment "//"
%block_comment "/\*" "\*/"

// Here we introduce a new scanner state 'String'
%scanner String {
    %auto_newline_off
    %auto_ws_off
}

%%

Start
    : { Content };

Content
    : Identifier
    | StringDelimiter
      // Here we push the current scanner index (INITIAL) on the scanner stack and switch to
      // the scanner 'String'
      %push(String)
      StringContent StringDelimiter
      // And here we return to the scanner INITIAL again by popping it from the scanner stack and
      // switching to it.
      %pop()
    ;

// Another valid version of the production above with the same effect is to use %sc as shown below.
// %sc performs a direct switch to the given scanner state without affecting the scanner stack.
// An omitted scanner state (as in %s()) implies scanner state INITIAL.
//
// Content
//     : Identifier
//     | StringDelimiter %sc(String) StringContent StringDelimiter %sc()

StringContent
    : { StringElement }
    ;

StringElement
    : Escaped
    | EscapedLineEnd
    | NoneQuote
    ;

Identifier
    // This terminal is only valid in scanner state INITIAL (implicitly)
    : /[a-zA-Z_]\w*/
    ;

Escaped
    // This terminal is only valid in scanner state 'String'
    : <String>/\\["\\bfnt]/
    ;

EscapedLineEnd
    // This terminal is only valid in scanner state 'String'
    // NOTE: [\s--\n\r] matches all whitespace characters *except* \r and \n
    // Otherwise, the regex will greedily pickup newlines See issue #5
    : <String>/\\[\s--\n\r]*\r?\n/
    ;

NoneQuote
    // This terminal is only valid in scanner state 'String'
    : <String>/[^"\\]+/
    ;

StringDelimiter
    // This terminal is valid in both scanner states INITIAL and 'String'
    : <String, INITIAL>/"/
    ;
