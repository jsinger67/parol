// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use parol_runtime::{
    parser::{
        parse_tree_type::TreeConstruct, LLKParser, LookaheadDFA, ParseType, Production, Trans,
    },
    ParolError, ParseTree, TokenStream,
};
use scnr2::scanner;
use std::path::Path;

use crate::scanner_states_grammar::ScannerStatesGrammar;
use crate::scanner_states_grammar_trait::ScannerStatesGrammarAuto;

pub const TERMINAL_NAMES: &[&str; 11] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "Identifier",
    /*  6 */ "Escaped",
    /*  7 */ "EscapedLineEnd",
    /*  8 */ "NoneQuote",
    /*  9 */ "StringDelimiter",
    /* 10 */ "Error",
];

scanner! {
    ScannerStatesGrammarScanner {
        mode INITIAL {
            token r"\r\n|\r|\n" => 1; // "Newline"
            token r"[\s--\r\n]+" => 2; // "Whitespace"
            token r"//.*(\r\n|\r|\n)?" => 3; // "LineComment"
            token r"/\*([^*]|\*[^/])*\*/" => 4; // "BlockComment"
            token r"[a-zA-Z_]\w*" => 5; // "Identifier"
            token r#"""# => 9; // "StringDelimiter"
            on 9 enter String;
        }
        mode String {
            token r#"\\["\\bfnt]"# => 6; // "Escaped"
            token r"\\[\s--\n\r]*\r?\n" => 7; // "EscapedLineEnd"
            token r#"[^"\\]+"# => 8; // "NoneQuote"
            token r#"""# => 9; // "StringDelimiter"
            on 9 enter INITIAL;
        }
    }
}

const MAX_K: usize = 1;

pub const NON_TERMINALS: &[&str; 11] = &[
    /*  0 */ "Content",
    /*  1 */ "Escaped",
    /*  2 */ "EscapedLineEnd",
    /*  3 */ "Identifier",
    /*  4 */ "NoneQuote",
    /*  5 */ "Start",
    /*  6 */ "StartList",
    /*  7 */ "StringContent",
    /*  8 */ "StringContentList",
    /*  9 */ "StringDelimiter",
    /* 10 */ "StringElement",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 11] = &[
    /* 0 - "Content" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 5, 1, 3), Trans(0, 9, 2, 4)],
        k: 1,
    },
    /* 1 - "Escaped" */
    LookaheadDFA {
        prod0: 12,
        transitions: &[],
        k: 0,
    },
    /* 2 - "EscapedLineEnd" */
    LookaheadDFA {
        prod0: 13,
        transitions: &[],
        k: 0,
    },
    /* 3 - "Identifier" */
    LookaheadDFA {
        prod0: 11,
        transitions: &[],
        k: 0,
    },
    /* 4 - "NoneQuote" */
    LookaheadDFA {
        prod0: 14,
        transitions: &[],
        k: 0,
    },
    /* 5 - "Start" */
    LookaheadDFA {
        prod0: 0,
        transitions: &[],
        k: 0,
    },
    /* 6 - "StartList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 0, 2, 2), Trans(0, 5, 1, 1), Trans(0, 9, 1, 1)],
        k: 1,
    },
    /* 7 - "StringContent" */
    LookaheadDFA {
        prod0: 5,
        transitions: &[],
        k: 0,
    },
    /* 8 - "StringContentList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 1, 6),
            Trans(0, 7, 1, 6),
            Trans(0, 8, 1, 6),
            Trans(0, 9, 2, 7),
        ],
        k: 1,
    },
    /* 9 - "StringDelimiter" */
    LookaheadDFA {
        prod0: 15,
        transitions: &[],
        k: 0,
    },
    /* 10 - "StringElement" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 6, 1, 8), Trans(0, 7, 2, 9), Trans(0, 8, 3, 10)],
        k: 1,
    },
];

pub const PRODUCTIONS: &[Production; 16] = &[
    // 0 - Start: StartList /* Vec */;
    Production {
        lhs: 5,
        production: &[ParseType::N(6)],
    },
    // 1 - StartList: Content StartList;
    Production {
        lhs: 6,
        production: &[ParseType::N(6), ParseType::N(0)],
    },
    // 2 - StartList: ;
    Production {
        lhs: 6,
        production: &[],
    },
    // 3 - Content: Identifier;
    Production {
        lhs: 0,
        production: &[ParseType::N(3)],
    },
    // 4 - Content: StringDelimiter StringContent StringDelimiter;
    Production {
        lhs: 0,
        production: &[ParseType::N(9), ParseType::N(7), ParseType::N(9)],
    },
    // 5 - StringContent: StringContentList /* Vec */;
    Production {
        lhs: 7,
        production: &[ParseType::N(8)],
    },
    // 6 - StringContentList: StringElement StringContentList;
    Production {
        lhs: 8,
        production: &[ParseType::N(8), ParseType::N(10)],
    },
    // 7 - StringContentList: ;
    Production {
        lhs: 8,
        production: &[],
    },
    // 8 - StringElement: Escaped;
    Production {
        lhs: 10,
        production: &[ParseType::N(1)],
    },
    // 9 - StringElement: EscapedLineEnd;
    Production {
        lhs: 10,
        production: &[ParseType::N(2)],
    },
    // 10 - StringElement: NoneQuote;
    Production {
        lhs: 10,
        production: &[ParseType::N(4)],
    },
    // 11 - Identifier: /[a-zA-Z_]\w*/;
    Production {
        lhs: 3,
        production: &[ParseType::T(5)],
    },
    // 12 - Escaped: /\\["\\bfnt]/;
    Production {
        lhs: 1,
        production: &[ParseType::T(6)],
    },
    // 13 - EscapedLineEnd: /\\[\s--\n\r]*\r?\n/;
    Production {
        lhs: 2,
        production: &[ParseType::T(7)],
    },
    // 14 - NoneQuote: /[^"\\]+/;
    Production {
        lhs: 4,
        production: &[ParseType::T(8)],
    },
    // 15 - StringDelimiter: /"/;
    Production {
        lhs: 9,
        production: &[ParseType::T(9)],
    },
];

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut ScannerStatesGrammar<'t>,
) -> Result<ParseTree, ParolError>
where
    T: AsRef<Path>,
{
    use parol_runtime::{
        parser::{parse_tree_type::SynTree, parser_types::SynTreeFlavor},
        syntree::Builder,
    };
    let mut builder = Builder::<SynTree, SynTreeFlavor>::new_with();
    parse_into(input, &mut builder, file_name, user_actions)?;
    Ok(builder.build()?)
}
#[allow(dead_code)]
pub fn parse_into<'t, T: TreeConstruct<'t>>(
    input: &'t str,
    tree_builder: &mut T,
    file_name: impl AsRef<Path>,
    user_actions: &mut ScannerStatesGrammar<'t>,
) -> Result<(), ParolError>
where
    ParolError: From<T::Error>,
{
    use scanner_states_grammar_scanner::ScannerStatesGrammarScanner;
    let mut llk_parser = LLKParser::new(
        5,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    llk_parser.disable_recovery();
    let scanner = ScannerStatesGrammarScanner::new();
    // Initialize wrapper
    let mut user_actions = ScannerStatesGrammarAuto::new(user_actions);
    llk_parser.parse_into(
        tree_builder,
        TokenStream::new(
            input,
            file_name,
            &scanner.scanner_impl,
            &ScannerStatesGrammarScanner::match_function,
            MAX_K,
        )
        .unwrap(),
        &mut user_actions,
    )
}
