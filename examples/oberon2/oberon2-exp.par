%start Oberon2
%title "Oberon2 grammar"
%comment "Adapted from https://cseweb.ucsd.edu/~wgg/CSE131B/oberon2.htm for `parol`"
%block_comment "\(\*" "\*\)"

%%

/*   0 */ KwBegin: "BEGIN"^ /* Clipped */;
/*   1 */ KwCase: "CASE"^ /* Clipped */;
/*   2 */ KwDo: "DO"^ /* Clipped */;
/*   3 */ KwElse: "ELSE"^ /* Clipped */;
/*   4 */ KwElsif: "ELSIF"^ /* Clipped */;
/*   5 */ KwEnd: "END"^ /* Clipped */;
/*   6 */ KwIf: "IF"^ /* Clipped */;
/*   7 */ KwOf: "OF"^ /* Clipped */;
/*   8 */ KwProcedure: "PROCEDURE"^ /* Clipped */;
/*   9 */ KwThen: "THEN"^ /* Clipped */;
/*  10 */ KwTo: "TO"^ /* Clipped */;
/*  11 */ KwVar: "VAR"^ /* Clipped */;
/*  12 */ Oberon2: ModuleHead Oberon2Opt /* Option */ DeclSeq ModuleBody;
/*  13 */ Oberon2Opt /* Option<T>::Some */: ImportList;
/*  14 */ Oberon2Opt /* Option<T>::None */: ;
/*  15 */ ModuleHead: "MODULE"^ /* Clipped */ Ident ";"^ /* Clipped */;
/*  16 */ ModuleBody: StatementBlock "\."^ /* Clipped */;
/*  17 */ ImportList: "IMPORT"^ /* Clipped */ ImportListOpt /* Option */ Ident ImportListList /* Vec */ ";"^ /* Clipped */;
/*  18 */ ImportListList /* Vec<T>::Push */: ","^ /* Clipped */ ImportListOpt0 /* Option */ Ident ImportListList;
/*  19 */ ImportListList /* Vec<T>::New */: ;
/*  20 */ ImportListOpt0 /* Option<T>::Some */: Ident ":="^ /* Clipped */;
/*  21 */ ImportListOpt0 /* Option<T>::None */: ;
/*  22 */ ImportListOpt /* Option<T>::Some */: Ident ":="^ /* Clipped */;
/*  23 */ ImportListOpt /* Option<T>::None */: ;
/*  24 */ DeclSeq: DeclSeqList /* Vec */ DeclSeqList0 /* Vec */;
/*  25 */ DeclSeqList0 /* Vec<T>::Push */: DeclSeqList0Group DeclSeqList0;
/*  26 */ DeclSeqList0Group: ProcDecl ";"^ /* Clipped */;
/*  27 */ DeclSeqList0Group: ForwardDecl ";"^ /* Clipped */;
/*  28 */ DeclSeqList0 /* Vec<T>::New */: ;
/*  29 */ DeclSeqList /* Vec<T>::Push */: DeclBlock DeclSeqList;
/*  30 */ DeclSeqList /* Vec<T>::New */: ;
/*  31 */ DeclBlock: ConstDeclBlock;
/*  32 */ DeclBlock: TypeDeclBlock;
/*  33 */ DeclBlock: VarDeclBlock;
/*  34 */ ConstDeclBlock: "CONST"^ /* Clipped */ ConstDeclBlockList /* Vec */;
/*  35 */ ConstDeclBlockList /* Vec<T>::Push */: ConstDecl ";"^ /* Clipped */ ConstDeclBlockList;
/*  36 */ ConstDeclBlockList /* Vec<T>::New */: ;
/*  37 */ TypeDeclBlock: "TYPE"^ /* Clipped */ TypeDeclBlockList /* Vec */;
/*  38 */ TypeDeclBlockList /* Vec<T>::Push */: TypeDecl ";"^ /* Clipped */ TypeDeclBlockList;
/*  39 */ TypeDeclBlockList /* Vec<T>::New */: ;
/*  40 */ VarDeclBlock: KwVar^ /* Clipped */ VarDeclBlockList /* Vec */;
/*  41 */ VarDeclBlockList /* Vec<T>::Push */: VarDecl ";"^ /* Clipped */ VarDeclBlockList;
/*  42 */ VarDeclBlockList /* Vec<T>::New */: ;
/*  43 */ ConstDecl: IdentDef "="^ /* Clipped */ ConstExpr;
/*  44 */ TypeDecl: IdentDef "="^ /* Clipped */ TypeDef;
/*  45 */ VarDecl: IdentList ":"^ /* Clipped */ TypeDef;
/*  46 */ ProcDecl: ProcedureHeading ";"^ /* Clipped */ ProcedureBody;
/*  47 */ ProcedureHeading: KwProcedure^ /* Clipped */ ProcedureHeadingOpt /* Option */ IdentDef ProcedureHeadingOpt0 /* Option */;
/*  48 */ ProcedureHeadingOpt0 /* Option<T>::Some */: FormalPars;
/*  49 */ ProcedureHeadingOpt0 /* Option<T>::None */: ;
/*  50 */ ProcedureHeadingOpt /* Option<T>::Some */: Receiver;
/*  51 */ ProcedureHeadingOpt /* Option<T>::None */: ;
/*  52 */ ProcedureBody: DeclSeq StatementBlock;
/*  53 */ StatementBlock: StatementBlockOpt /* Option */ KwEnd^ /* Clipped */ Ident;
/*  54 */ StatementBlockOpt /* Option<T>::Some */: KwBegin^ /* Clipped */ StatementSeq;
/*  55 */ StatementBlockOpt /* Option<T>::None */: ;
/*  56 */ ForwardDecl: KwProcedure^ /* Clipped */ "\^" ForwardDeclOpt /* Option */ IdentDef ForwardDeclOpt0 /* Option */;
/*  57 */ ForwardDeclOpt0 /* Option<T>::Some */: FormalPars;
/*  58 */ ForwardDeclOpt0 /* Option<T>::None */: ;
/*  59 */ ForwardDeclOpt /* Option<T>::Some */: Receiver;
/*  60 */ ForwardDeclOpt /* Option<T>::None */: ;
/*  61 */ FormalPars: "\("^ /* Clipped */ FormalParsOpt /* Option */ "\)"^ /* Clipped */ FormalParsOpt0 /* Option */;
/*  62 */ FormalParsOpt0 /* Option<T>::Some */: ":"^ /* Clipped */ QualIdent;
/*  63 */ FormalParsOpt0 /* Option<T>::None */: ;
/*  64 */ FormalParsOpt /* Option<T>::Some */: FPSection FormalParsOptList /* Vec */;
/*  65 */ FormalParsOptList /* Vec<T>::Push */: ";"^ /* Clipped */ FPSection FormalParsOptList;
/*  66 */ FormalParsOptList /* Vec<T>::New */: ;
/*  67 */ FormalParsOpt /* Option<T>::None */: ;
/*  68 */ FPSection: FPSectionOpt /* Option */ Ident FPSectionList /* Vec */ ":"^ /* Clipped */ TypeDef;
/*  69 */ FPSectionList /* Vec<T>::Push */: ","^ /* Clipped */ Ident FPSectionList;
/*  70 */ FPSectionList /* Vec<T>::New */: ;
/*  71 */ FPSectionOpt /* Option<T>::Some */: KwVar^ /* Clipped */;
/*  72 */ FPSectionOpt /* Option<T>::None */: ;
/*  73 */ Receiver: "\("^ /* Clipped */ ReceiverOpt /* Option */ ReceiverVarDecl "\)"^ /* Clipped */;
/*  74 */ ReceiverOpt /* Option<T>::Some */: KwVar^ /* Clipped */;
/*  75 */ ReceiverOpt /* Option<T>::None */: ;
/*  76 */ ReceiverVarDecl: Ident ":"^ /* Clipped */ Ident;
/*  77 */ TypeDef: QualIdent;
/*  78 */ TypeDef: "ARRAY"^ /* Clipped */ TypeDefOpt /* Option */ KwOf^ /* Clipped */ TypeDef;
/*  79 */ TypeDef: "RECORD"^ /* Clipped */ TypeDefOpt0 /* Option */ FieldList TypeDefList /* Vec */ KwEnd^ /* Clipped */;
/*  80 */ TypeDefList /* Vec<T>::Push */: ";"^ /* Clipped */ FieldList TypeDefList;
/*  81 */ TypeDefList /* Vec<T>::New */: ;
/*  82 */ TypeDef: "POINTER"^ /* Clipped */ KwTo^ /* Clipped */ TypeDef;
/*  83 */ TypeDef: KwProcedure^ /* Clipped */ TypeDefOpt1 /* Option */;
/*  84 */ TypeDefOpt1 /* Option<T>::Some */: FormalPars;
/*  85 */ TypeDefOpt1 /* Option<T>::None */: ;
/*  86 */ TypeDefOpt0 /* Option<T>::Some */: "\("^ /* Clipped */ QualIdent "\)"^ /* Clipped */;
/*  87 */ TypeDefOpt0 /* Option<T>::None */: ;
/*  88 */ TypeDefOpt /* Option<T>::Some */: ConstExpr TypeDefOptList /* Vec */;
/*  89 */ TypeDefOptList /* Vec<T>::Push */: ","^ /* Clipped */ ConstExpr TypeDefOptList;
/*  90 */ TypeDefOptList /* Vec<T>::New */: ;
/*  91 */ TypeDefOpt /* Option<T>::None */: ;
/*  92 */ FieldList: FieldListOpt /* Option */;
/*  93 */ FieldListOpt /* Option<T>::Some */: IdentList ":"^ /* Clipped */ TypeDef;
/*  94 */ FieldListOpt /* Option<T>::None */: ;
/*  95 */ StatementSeq: Statement StatementSeqList /* Vec */;
/*  96 */ StatementSeqList /* Vec<T>::Push */: ";"^ /* Clipped */ Statement StatementSeqList;
/*  97 */ StatementSeqList /* Vec<T>::New */: ;
/*  98 */ Statement: StatementOpt /* Option */;
/*  99 */ StatementOpt /* Option<T>::Some */: StatementOptGroup;
/* 100 */ StatementOptGroup: Designator StatementOptGroupSuffix;
/* 101 */ StatementOptGroupSuffix: ":="^ /* Clipped */ Expr;
/* 102 */ StatementOptGroupSuffix: StatementOpt0 /* Option */;
/* 103 */ StatementOptGroup: KwIf^ /* Clipped */ Expr ThenBlock StatementOptGroupList /* Vec */ OptElsePartEnd;
/* 104 */ StatementOptGroup: KwCase^ /* Clipped */ Expr KwOf^ /* Clipped */ Cases OptElsePartEnd;
/* 105 */ StatementOptGroup: "WHILE"^ /* Clipped */ Expr DoBlock;
/* 106 */ StatementOptGroup: "REPEAT"^ /* Clipped */ StatementSeq "UNTIL"^ /* Clipped */ Expr;
/* 107 */ StatementOptGroup: "FOR"^ /* Clipped */ ForInit StatementOpt1 /* Option */ DoBlock;
/* 108 */ StatementOptGroup: "LOOP"^ /* Clipped */ StatementSeq KwEnd^ /* Clipped */;
/* 109 */ StatementOptGroup: "WITH"^ /* Clipped */ GuardedDoBlock StatementOptGroupList0 /* Vec */ OptElsePartEnd;
/* 110 */ StatementOptGroup: "EXIT"^ /* Clipped */;
/* 111 */ StatementOptGroup: "RETURN"^ /* Clipped */ StatementOpt2 /* Option */;
/* 112 */ StatementOptGroupList /* Vec<T>::Push */: ElsifPart StatementOptGroupList;
/* 113 */ StatementOptGroupList /* Vec<T>::New */: ;
/* 114 */ StatementOptGroupList0 /* Vec<T>::Push */: "\|"^ /* Clipped */ GuardedDoBlock StatementOptGroupList0;
/* 115 */ StatementOptGroupList0 /* Vec<T>::New */: ;
/* 116 */ StatementOpt2 /* Option<T>::Some */: Expr;
/* 117 */ StatementOpt2 /* Option<T>::None */: ;
/* 118 */ StatementOpt1 /* Option<T>::Some */: ForStep;
/* 119 */ StatementOpt1 /* Option<T>::None */: ;
/* 120 */ StatementOpt0 /* Option<T>::Some */: "\("^ /* Clipped */ StatementOpt3 /* Option */ "\)"^ /* Clipped */;
/* 121 */ StatementOpt3 /* Option<T>::Some */: ExprList;
/* 122 */ StatementOpt3 /* Option<T>::None */: ;
/* 123 */ StatementOpt0 /* Option<T>::None */: ;
/* 124 */ StatementOpt /* Option<T>::None */: ;
/* 125 */ ThenBlock: KwThen^ /* Clipped */ StatementSeq;
/* 126 */ Cases: Case CasesList /* Vec */;
/* 127 */ CasesList /* Vec<T>::Push */: "\|"^ /* Clipped */ Case CasesList;
/* 128 */ CasesList /* Vec<T>::New */: ;
/* 129 */ ElsifPart: KwElsif^ /* Clipped */ Expr ThenBlock;
/* 130 */ ElsePart: KwElse^ /* Clipped */ StatementSeq;
/* 131 */ OptElsePartEnd: OptElsePartEndOpt /* Option */ KwEnd^ /* Clipped */;
/* 132 */ OptElsePartEndOpt /* Option<T>::Some */: ElsePart;
/* 133 */ OptElsePartEndOpt /* Option<T>::None */: ;
/* 134 */ DoBlock: KwDo^ /* Clipped */ StatementSeq KwEnd^ /* Clipped */;
/* 135 */ GuardedDoBlock: Guard KwDo^ /* Clipped */ StatementSeq;
/* 136 */ ForInit: Ident ":="^ /* Clipped */ Expr KwTo^ /* Clipped */ Expr;
/* 137 */ ForStep: "BY"^ /* Clipped */ ConstExpr;
/* 138 */ Case: CaseOpt /* Option */;
/* 139 */ CaseOpt /* Option<T>::Some */: CaseLabels CaseOptList /* Vec */ ":"^ /* Clipped */ StatementSeq;
/* 140 */ CaseOptList /* Vec<T>::Push */: ","^ /* Clipped */ CaseLabels CaseOptList;
/* 141 */ CaseOptList /* Vec<T>::New */: ;
/* 142 */ CaseOpt /* Option<T>::None */: ;
/* 143 */ CaseLabels: ConstExpr CaseLabelsOpt /* Option */;
/* 144 */ CaseLabelsOpt /* Option<T>::Some */: "\.\." ConstExpr;
/* 145 */ CaseLabelsOpt /* Option<T>::None */: ;
/* 146 */ Guard: QualIdent ":"^ /* Clipped */ QualIdent;
/* 147 */ ConstExpr: Expr;
/* 148 */ Expr: SimpleExpr ExprOpt /* Option */;
/* 149 */ ExprOpt /* Option<T>::Some */: Relation SimpleExpr;
/* 150 */ ExprOpt /* Option<T>::None */: ;
/* 151 */ SimpleExpr: SimpleExprOpt /* Option */ Term SimpleExprList /* Vec */;
/* 152 */ SimpleExprList /* Vec<T>::Push */: AddOp Term SimpleExprList;
/* 153 */ SimpleExprList /* Vec<T>::New */: ;
/* 154 */ SimpleExprOpt /* Option<T>::Some */: SimpleExprOptGroup;
/* 155 */ SimpleExprOptGroup: "\+";
/* 156 */ SimpleExprOptGroup: "-";
/* 157 */ SimpleExprOpt /* Option<T>::None */: ;
/* 158 */ Term: Factor TermList /* Vec */;
/* 159 */ TermList /* Vec<T>::Push */: MulOp Factor TermList;
/* 160 */ TermList /* Vec<T>::New */: ;
/* 161 */ Factor: Designator FactorOpt /* Option */;
/* 162 */ Factor: Number;
/* 163 */ Factor: Character;
/* 164 */ Factor: String;
/* 165 */ Factor: "NIL"^ /* Clipped */;
/* 166 */ Factor: Set;
/* 167 */ Factor: "\("^ /* Clipped */ Expr "\)"^ /* Clipped */;
/* 168 */ Factor: "~"^ /* Clipped */ Factor;
/* 169 */ FactorOpt /* Option<T>::Some */: "\("^ /* Clipped */ FactorOpt0 /* Option */ "\)"^ /* Clipped */;
/* 170 */ FactorOpt0 /* Option<T>::Some */: ExprList;
/* 171 */ FactorOpt0 /* Option<T>::None */: ;
/* 172 */ FactorOpt /* Option<T>::None */: ;
/* 173 */ Set: "\{"^ /* Clipped */ SetOpt /* Option */ "\}"^ /* Clipped */;
/* 174 */ SetOpt /* Option<T>::Some */: Element SetOptList /* Vec */;
/* 175 */ SetOptList /* Vec<T>::Push */: ","^ /* Clipped */ Element SetOptList;
/* 176 */ SetOptList /* Vec<T>::New */: ;
/* 177 */ SetOpt /* Option<T>::None */: ;
/* 178 */ Element: Expr ElementOpt /* Option */;
/* 179 */ ElementOpt /* Option<T>::Some */: "\.\."^ /* Clipped */ Expr;
/* 180 */ ElementOpt /* Option<T>::None */: ;
/* 181 */ Relation: "="^ /* Clipped */;
/* 182 */ Relation: "#";
/* 183 */ Relation: "<";
/* 184 */ Relation: "<=";
/* 185 */ Relation: ">";
/* 186 */ Relation: ">=";
/* 187 */ Relation: InOp;
/* 188 */ Relation: "IS";
/* 189 */ AddOp: "\+";
/* 190 */ AddOp: "-";
/* 191 */ AddOp: "OR";
/* 192 */ MulOp: "\*";
/* 193 */ MulOp: "/";
/* 194 */ MulOp: "DIV";
/* 195 */ MulOp: "MOD";
/* 196 */ MulOp: "&";
/* 197 */ Designator: QualIdent DesignatorList /* Vec */;
/* 198 */ DesignatorList /* Vec<T>::Push */: DesignatorSuffix DesignatorList;
/* 199 */ DesignatorList /* Vec<T>::New */: ;
/* 200 */ DesignatorSuffix: "\."^ /* Clipped */ Ident;
/* 201 */ DesignatorSuffix: "\["^ /* Clipped */ ExprList "\]"^ /* Clipped */;
/* 202 */ DesignatorSuffix: "\^"^ /* Clipped */;
/* 203 */ ExprList: Expr ExprListList /* Vec */;
/* 204 */ ExprListList /* Vec<T>::Push */: ","^ /* Clipped */ Expr ExprListList;
/* 205 */ ExprListList /* Vec<T>::New */: ;
/* 206 */ IdentList: IdentDef IdentListList /* Vec */;
/* 207 */ IdentListList /* Vec<T>::Push */: ","^ /* Clipped */ IdentDef IdentListList;
/* 208 */ IdentListList /* Vec<T>::New */: ;
/* 209 */ QualIdent: Ident;
/* 210 */ QualIdent: QIdent;
/* 211 */ IdentDef: Ident IdentDefOpt /* Option */;
/* 212 */ IdentDefOpt /* Option<T>::Some */: IdentDefOptGroup;
/* 213 */ IdentDefOptGroup: "\*";
/* 214 */ IdentDefOptGroup: "-";
/* 215 */ IdentDefOpt /* Option<T>::None */: ;
/* 216 */ Number: Integer;
/* 217 */ Number: Real;
/* 218 */ Real: "[0-9][0-9]*\.[0-9]*(ED[+-]?[0-9][0-9]*)?";
/* 219 */ Character: "[0-9][0-9A-F]*X";
/* 220 */ Integer: "[0-9][0-9]*|[0-9][0-9A-F]*H";
/* 221 */ QIdent: "[a-zA-Z_]\w*\.[a-zA-Z_]\w*";
/* 222 */ Ident: "[a-zA-Z_]\w*";
/* 223 */ String: "\u{0022}[^\u{0022}]*\u{0022}|'[^']*'";
/* 224 */ InOp: "IN"^ /* Clipped */;
