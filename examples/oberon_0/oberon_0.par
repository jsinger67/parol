%start Module
%title "Oberon-0 Grammar"
%block_comment "\(\*" "\*\)"

%%

Selector
    : SelectorList
    ;

SelectorList
    : "\." Ident SelectorList
    ;

SelectorList
    : "\[" Expression "]" SelectorList
    ;

SelectorList
    : 
    ;

Factor
    : Ident Selector
    ;

Factor
    : Integer
    ;

Factor
    : "\(" Expression "\)"
    ;

Factor
    : "~" Factor
    ;

Factor
    : UnaryOp Factor
    ;

Term
    : Factor MulExpression
    ;

MulExpression
    : MulOperator Factor MulExpression
    ;

MulExpression
    : 
    ;

SimpleExpression
    : Term AddExpression
    ;

AddExpression
    : AddOperator Term AddExpression
    ;

AddExpression
    : 
    ;

AssignOp
    : ':='
    ;

RelationOp
    : AssignOp
    ;

RelationOp
    : RelationalOps
    ;

RelationalOps
    : />=|<=|\#|<|>/
    ;

Expression
    : SimpleExpression RelationOp SimpleExpression
    ;

Expression
    : SimpleExpression
    ;

Assignment
    : Ident Selector AssignOp Expression
    ;

ActualParameters
    : '(' ')'
    ;

ActualParameters
    : '(' Expression ExpressionListRest ')'
    ;

ExpressionListRest
    : ',' Expression ExpressionListRest
    ;

ExpressionListRest
    : 
    ;

ProcedureCall
    : Ident ActualParameters
    ;

ProcedureCall
    : Ident
    ;

IfStatement
    : IfPrefix 'ELSE' StatementSequence 'END'
    ;

IfStatement
    : IfPrefix 'END'
    ;

IfPrefix
    : 'IF' Expression 'THEN' StatementSequence ElseIfList
    ;

ElseIfList
    : 'ELSIF' Expression 'THEN' StatementSequence ElseIfList
    ;

ElseIfList
    : 
    ;

WhileStatement
    : 'WHILE' Expression 'DO' StatementSequence 'END'
    ;

RepeatStatement
    : 'REPEAT' StatementSequence 'UNTIL' Expression
    ;

Statement
    : Assignment
    ;

Statement
    : ProcedureCall
    ;

Statement
    : IfStatement
    ;

Statement
    : WhileStatement
    ;

Statement
    : RepeatStatement
    ;

Statement
    : 
    ;

StatementSequence
    : Statement StatementSequenceRest
    ;

StatementSequenceRest
    : ';' Statement StatementSequenceRest
    ;

StatementSequenceRest
    : 
    ;

IdentList
    : Ident IdentListRest
    ;

IdentListRest
    : ',' Ident IdentListRest
    ;

IdentListRest
    : 
    ;

ArrayType
    : 'ARRAY' Expression 'OF' Type
    ;

FieldList
    : IdentList ':' Type
    ;

FieldList
    : 
    ;

RecordType
    : 'RECORD' FieldList FieldListRest 'END'
    ;

FieldListRest
    : ';' FieldList FieldListRest
    ;

FieldListRest
    : 
    ;

Type
    : Ident
    ;

Type
    : ArrayType
    ;

Type
    : RecordType
    ;

FPSection
    : 'VAR' IdentList ':' Type
    ;

FPSection
    : IdentList ':' Type
    ;

FormalParameters
    : '(' ')'
    ;

FormalParameters
    : '(' FPSection FPSectionRest ')'
    ;

FPSectionRest
    : ';' FPSection FPSectionRest
    ;

FPSectionRest
    : 
    ;

ProcedureHeading
    : 'PROCEDURE' Ident FormalParameters
    ;

ProcedureHeading
    : 'PROCEDURE' Ident
    ;

ProcedureBody
    : Declarations 'BEGIN' StatementSequence 'RETURN' Expression 'END' Ident
    ;

ProcedureBody
    : Declarations 'RETURN' Expression 'END' Ident
    ;

ProcedureBody
    : Declarations 'BEGIN' StatementSequence 'END' Ident
    ;

ProcedureBody
    : Declarations 'END' Ident
    ;

ProcedureDeclaration
    : ProcedureHeading ';' ProcedureBody
    ;

Declarations
    : 'CONST' ConstDecls 'TYPE' TypeDecls 'VAR' VarDecls ProcedureDeclarationList
    ;

Declarations
    : 'CONST' ConstDecls 'TYPE' TypeDecls ProcedureDeclarationList
    ;

Declarations
    : 'CONST' ConstDecls 'VAR' VarDecls ProcedureDeclarationList
    ;

Declarations
    : 'CONST' ConstDecls ProcedureDeclarationList
    ;

Declarations
    : 'TYPE' TypeDecls 'VAR' VarDecls ProcedureDeclarationList
    ;

Declarations
    : 'TYPE' TypeDecls ProcedureDeclarationList
    ;

Declarations
    : 'VAR' VarDecls ProcedureDeclarationList
    ;

Declarations
    : ProcedureDeclarationList
    ;

ProcedureDeclarationList
    : ProcedureDeclaration ';' ProcedureDeclarationList
    ;

ProcedureDeclarationList
    : 
    ;

ConstDecls
    : Ident AssignOp Expression ';' ConstDecls
    ;

ConstDecls
    : 
    ;

TypeDecls
    : Ident AssignOp Type ';' TypeDecls
    ;

TypeDecls
    : 
    ;

VarDecls
    : IdentList ':' Type ';' VarDecls
    ;

VarDecls
    : 
    ;

Module
    : 'MODULE' Ident ';' Declarations 'BEGIN' StatementSequence 'END' Ident '\.'
    ;

Module
    : 'MODULE' Ident ';' Declarations 'END' Ident '\.'
    ;

MulOperator
    : "\*|/|DIV|MOD|&"
    ;

AddOperator
    : /\+|-|OR/
    ;

UnaryOp
    : /\+|-/
    ;

Ident
    : /[a-zA-Z][a-zA-Z0-9]*/
    ;

Integer
    : /[0-9]+/
    ;
