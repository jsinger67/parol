// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use parol_runtime::{
    ParolError, ParseTree, TokenStream,
    parser::{
        LLKParser, LookaheadDFA, ParseType, Production, Trans, parse_tree_type::TreeConstruct,
    },
};
use scnr2::scanner;
use std::path::Path;

use crate::oberon_0_grammar::Oberon0Grammar;
use crate::oberon_0_grammar_trait::Oberon0GrammarAuto;

pub const TERMINAL_NAMES: &[&str; 44] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "Dot",
    /*  6 */ "LBracket",
    /*  7 */ "RBracket",
    /*  8 */ "LParen",
    /*  9 */ "RParen",
    /* 10 */ "Tilde",
    /* 11 */ "AssignOp",
    /* 12 */ "RelationalOps",
    /* 13 */ "LParen0",
    /* 14 */ "RParen0",
    /* 15 */ "Comma",
    /* 16 */ "ELSE",
    /* 17 */ "END",
    /* 18 */ "IF",
    /* 19 */ "THEN",
    /* 20 */ "ELSIF",
    /* 21 */ "WHILE",
    /* 22 */ "DO",
    /* 23 */ "REPEAT",
    /* 24 */ "UNTIL",
    /* 25 */ "Semicolon",
    /* 26 */ "ARRAY",
    /* 27 */ "OF",
    /* 28 */ "Colon",
    /* 29 */ "RECORD",
    /* 30 */ "VAR",
    /* 31 */ "PROCEDURE",
    /* 32 */ "BEGIN",
    /* 33 */ "RETURN",
    /* 34 */ "TYPE",
    /* 35 */ "CONST",
    /* 36 */ "MODULE",
    /* 37 */ "Dot0",
    /* 38 */ "MulOperator",
    /* 39 */ "AddOperator",
    /* 40 */ "UnaryOp",
    /* 41 */ "Ident",
    /* 42 */ "Integer",
    /* 43 */ "Error",
];

scanner! {
    Oberon0GrammarScanner {
        mode INITIAL {
            token r"\r\n|\r|\n" => 1; // "Newline"
            token r"[\s--\r\n]+" => 2; // "Whitespace"
            token r"\(\*([^*]|\*[^)])*\*\)" => 4; // "BlockComment"
            token r"\." => 5; // "Dot"
            token r"\[" => 6; // "LBracket"
            token r"]" => 7; // "RBracket"
            token r"\(" => 8; // "LParen"
            token r"\)" => 9; // "RParen"
            token r"~" => 10; // "Tilde"
            token r":=" => 11; // "AssignOp"
            token r">=|<=|\#|<|>" => 12; // "RelationalOps"
            token r"\(" => 13; // "LParen0"
            token r"\)" => 14; // "RParen0"
            token r"," => 15; // "Comma"
            token r"ELSE" => 16; // "ELSE"
            token r"END" => 17; // "END"
            token r"IF" => 18; // "IF"
            token r"THEN" => 19; // "THEN"
            token r"ELSIF" => 20; // "ELSIF"
            token r"WHILE" => 21; // "WHILE"
            token r"DO" => 22; // "DO"
            token r"REPEAT" => 23; // "REPEAT"
            token r"UNTIL" => 24; // "UNTIL"
            token r";" => 25; // "Semicolon"
            token r"ARRAY" => 26; // "ARRAY"
            token r"OF" => 27; // "OF"
            token r":" => 28; // "Colon"
            token r"RECORD" => 29; // "RECORD"
            token r"VAR" => 30; // "VAR"
            token r"PROCEDURE" => 31; // "PROCEDURE"
            token r"BEGIN" => 32; // "BEGIN"
            token r"RETURN" => 33; // "RETURN"
            token r"TYPE" => 34; // "TYPE"
            token r"CONST" => 35; // "CONST"
            token r"MODULE" => 36; // "MODULE"
            token r"\\\." => 37; // "Dot0"
            token r"\*|/|DIV|MOD|&" => 38; // "MulOperator"
            token r"\+|-|OR" => 39; // "AddOperator"
            token r"\+|-" => 40; // "UnaryOp"
            token r"[a-zA-Z][a-zA-Z0-9]*" => 41; // "Ident"
            token r"[0-9]+" => 42; // "Integer"
            token r"." => 43; // "Error"
        }
    }
}

const MAX_K: usize = 2;

pub const NON_TERMINALS: &[&str; 59] = &[
    /*  0 */ "ActualParameters",
    /*  1 */ "ActualParametersSuffix",
    /*  2 */ "AddExpression",
    /*  3 */ "AddOperator",
    /*  4 */ "ArrayType",
    /*  5 */ "AssignOp",
    /*  6 */ "Assignment",
    /*  7 */ "ConstDecls",
    /*  8 */ "Declarations",
    /*  9 */ "DeclarationsSuffix",
    /* 10 */ "DeclarationsSuffix0",
    /* 11 */ "DeclarationsSuffix1",
    /* 12 */ "ElseIfList",
    /* 13 */ "Expression",
    /* 14 */ "ExpressionListRest",
    /* 15 */ "ExpressionSuffix",
    /* 16 */ "FPSection",
    /* 17 */ "FPSectionRest",
    /* 18 */ "Factor",
    /* 19 */ "FieldList",
    /* 20 */ "FieldListRest",
    /* 21 */ "FormalParameters",
    /* 22 */ "FormalParametersSuffix",
    /* 23 */ "Ident",
    /* 24 */ "IdentList",
    /* 25 */ "IdentListRest",
    /* 26 */ "IfPrefix",
    /* 27 */ "IfStatement",
    /* 28 */ "IfStatementSuffix",
    /* 29 */ "Integer",
    /* 30 */ "Module",
    /* 31 */ "ModuleSuffix",
    /* 32 */ "MulExpression",
    /* 33 */ "MulOperator",
    /* 34 */ "ProcedureBody",
    /* 35 */ "ProcedureBodySuffix",
    /* 36 */ "ProcedureBodySuffix0",
    /* 37 */ "ProcedureCall",
    /* 38 */ "ProcedureCallSuffix",
    /* 39 */ "ProcedureDeclaration",
    /* 40 */ "ProcedureDeclarationList",
    /* 41 */ "ProcedureHeading",
    /* 42 */ "ProcedureHeadingSuffix",
    /* 43 */ "RecordType",
    /* 44 */ "RelationOp",
    /* 45 */ "RelationalOps",
    /* 46 */ "RepeatStatement",
    /* 47 */ "Selector",
    /* 48 */ "SelectorList",
    /* 49 */ "SimpleExpression",
    /* 50 */ "Statement",
    /* 51 */ "StatementSequence",
    /* 52 */ "StatementSequenceRest",
    /* 53 */ "Term",
    /* 54 */ "Type",
    /* 55 */ "TypeDecls",
    /* 56 */ "UnaryOp",
    /* 57 */ "VarDecls",
    /* 58 */ "WhileStatement",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 59] = &[
    /* 0 - "ActualParameters" */
    LookaheadDFA {
        prod0: 23,
        transitions: &[],
        k: 0,
    },
    /* 1 - "ActualParametersSuffix" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 8, 2, 25),
            Trans(0, 10, 2, 25),
            Trans(0, 14, 1, 24),
            Trans(0, 40, 2, 25),
            Trans(0, 41, 2, 25),
            Trans(0, 42, 2, 25),
        ],
        k: 1,
    },
    /* 2 - "AddExpression" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 7, 2, 14),
            Trans(0, 9, 2, 14),
            Trans(0, 11, 2, 14),
            Trans(0, 12, 2, 14),
            Trans(0, 14, 2, 14),
            Trans(0, 15, 2, 14),
            Trans(0, 16, 2, 14),
            Trans(0, 17, 2, 14),
            Trans(0, 19, 2, 14),
            Trans(0, 20, 2, 14),
            Trans(0, 22, 2, 14),
            Trans(0, 24, 2, 14),
            Trans(0, 25, 2, 14),
            Trans(0, 27, 2, 14),
            Trans(0, 33, 2, 14),
            Trans(0, 39, 1, 13),
        ],
        k: 1,
    },
    /* 3 - "AddOperator" */
    LookaheadDFA {
        prod0: 100,
        transitions: &[],
        k: 0,
    },
    /* 4 - "ArrayType" */
    LookaheadDFA {
        prod0: 51,
        transitions: &[],
        k: 0,
    },
    /* 5 - "AssignOp" */
    LookaheadDFA {
        prod0: 15,
        transitions: &[],
        k: 0,
    },
    /* 6 - "Assignment" */
    LookaheadDFA {
        prod0: 22,
        transitions: &[],
        k: 0,
    },
    /* 7 - "ConstDecls" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 17, 2, 91),
            Trans(0, 30, 2, 91),
            Trans(0, 31, 2, 91),
            Trans(0, 32, 2, 91),
            Trans(0, 33, 2, 91),
            Trans(0, 34, 2, 91),
            Trans(0, 41, 1, 90),
        ],
        k: 1,
    },
    /* 8 - "Declarations" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 17, 4, 82),
            Trans(0, 30, 3, 81),
            Trans(0, 31, 4, 82),
            Trans(0, 32, 4, 82),
            Trans(0, 33, 4, 82),
            Trans(0, 34, 1, 77),
            Trans(0, 35, 2, 78),
        ],
        k: 1,
    },
    /* 9 - "DeclarationsSuffix" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 17, 2, 87),
            Trans(0, 30, 1, 86),
            Trans(0, 31, 2, 87),
            Trans(0, 32, 2, 87),
            Trans(0, 33, 2, 87),
        ],
        k: 1,
    },
    /* 10 - "DeclarationsSuffix0" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 17, 3, 85),
            Trans(0, 30, 2, 84),
            Trans(0, 31, 3, 85),
            Trans(0, 32, 3, 85),
            Trans(0, 33, 3, 85),
            Trans(0, 34, 1, 83),
        ],
        k: 1,
    },
    /* 11 - "DeclarationsSuffix1" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 17, 2, 80),
            Trans(0, 30, 1, 79),
            Trans(0, 31, 2, 80),
            Trans(0, 32, 2, 80),
            Trans(0, 33, 2, 80),
        ],
        k: 1,
    },
    /* 12 - "ElseIfList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 16, 2, 36),
            Trans(0, 17, 2, 36),
            Trans(0, 20, 1, 35),
        ],
        k: 1,
    },
    /* 13 - "Expression" */
    LookaheadDFA {
        prod0: 19,
        transitions: &[],
        k: 0,
    },
    /* 14 - "ExpressionListRest" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 14, 2, 27), Trans(0, 15, 1, 26)],
        k: 1,
    },
    /* 15 - "ExpressionSuffix" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 7, 2, 21),
            Trans(0, 9, 2, 21),
            Trans(0, 11, 1, 20),
            Trans(0, 12, 1, 20),
            Trans(0, 14, 2, 21),
            Trans(0, 15, 2, 21),
            Trans(0, 16, 2, 21),
            Trans(0, 17, 2, 21),
            Trans(0, 19, 2, 21),
            Trans(0, 20, 2, 21),
            Trans(0, 22, 2, 21),
            Trans(0, 24, 2, 21),
            Trans(0, 25, 2, 21),
            Trans(0, 27, 2, 21),
            Trans(0, 33, 2, 21),
        ],
        k: 1,
    },
    /* 16 - "FPSection" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 30, 1, 60), Trans(0, 41, 2, 61)],
        k: 1,
    },
    /* 17 - "FPSectionRest" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 14, 2, 66), Trans(0, 25, 1, 65)],
        k: 1,
    },
    /* 18 - "Factor" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 8, 3, 6),
            Trans(0, 10, 4, 7),
            Trans(0, 40, 5, 8),
            Trans(0, 41, 1, 4),
            Trans(0, 42, 2, 5),
        ],
        k: 1,
    },
    /* 19 - "FieldList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 17, 2, 53),
            Trans(0, 25, 2, 53),
            Trans(0, 41, 1, 52),
        ],
        k: 1,
    },
    /* 20 - "FieldListRest" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 17, 2, 56), Trans(0, 25, 1, 55)],
        k: 1,
    },
    /* 21 - "FormalParameters" */
    LookaheadDFA {
        prod0: 62,
        transitions: &[],
        k: 0,
    },
    /* 22 - "FormalParametersSuffix" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 14, 1, 63),
            Trans(0, 30, 2, 64),
            Trans(0, 41, 2, 64),
        ],
        k: 1,
    },
    /* 23 - "Ident" */
    LookaheadDFA {
        prod0: 102,
        transitions: &[],
        k: 0,
    },
    /* 24 - "IdentList" */
    LookaheadDFA {
        prod0: 48,
        transitions: &[],
        k: 0,
    },
    /* 25 - "IdentListRest" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 15, 1, 49), Trans(0, 28, 2, 50)],
        k: 1,
    },
    /* 26 - "IfPrefix" */
    LookaheadDFA {
        prod0: 34,
        transitions: &[],
        k: 0,
    },
    /* 27 - "IfStatement" */
    LookaheadDFA {
        prod0: 31,
        transitions: &[],
        k: 0,
    },
    /* 28 - "IfStatementSuffix" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 16, 1, 32), Trans(0, 17, 2, 33)],
        k: 1,
    },
    /* 29 - "Integer" */
    LookaheadDFA {
        prod0: 103,
        transitions: &[],
        k: 0,
    },
    /* 30 - "Module" */
    LookaheadDFA {
        prod0: 96,
        transitions: &[],
        k: 0,
    },
    /* 31 - "ModuleSuffix" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 17, 2, 98), Trans(0, 32, 1, 97)],
        k: 1,
    },
    /* 32 - "MulExpression" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 7, 2, 11),
            Trans(0, 9, 2, 11),
            Trans(0, 11, 2, 11),
            Trans(0, 12, 2, 11),
            Trans(0, 14, 2, 11),
            Trans(0, 15, 2, 11),
            Trans(0, 16, 2, 11),
            Trans(0, 17, 2, 11),
            Trans(0, 19, 2, 11),
            Trans(0, 20, 2, 11),
            Trans(0, 22, 2, 11),
            Trans(0, 24, 2, 11),
            Trans(0, 25, 2, 11),
            Trans(0, 27, 2, 11),
            Trans(0, 33, 2, 11),
            Trans(0, 38, 1, 10),
            Trans(0, 39, 2, 11),
        ],
        k: 1,
    },
    /* 33 - "MulOperator" */
    LookaheadDFA {
        prod0: 99,
        transitions: &[],
        k: 0,
    },
    /* 34 - "ProcedureBody" */
    LookaheadDFA {
        prod0: 70,
        transitions: &[],
        k: 0,
    },
    /* 35 - "ProcedureBodySuffix" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 17, 2, 75), Trans(0, 33, 1, 74)],
        k: 1,
    },
    /* 36 - "ProcedureBodySuffix0" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 17, 3, 73),
            Trans(0, 32, 1, 71),
            Trans(0, 33, 2, 72),
        ],
        k: 1,
    },
    /* 37 - "ProcedureCall" */
    LookaheadDFA {
        prod0: 28,
        transitions: &[],
        k: 0,
    },
    /* 38 - "ProcedureCallSuffix" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 13, 1, 29),
            Trans(0, 16, 2, 30),
            Trans(0, 17, 2, 30),
            Trans(0, 20, 2, 30),
            Trans(0, 24, 2, 30),
            Trans(0, 25, 2, 30),
            Trans(0, 33, 2, 30),
        ],
        k: 1,
    },
    /* 39 - "ProcedureDeclaration" */
    LookaheadDFA {
        prod0: 76,
        transitions: &[],
        k: 0,
    },
    /* 40 - "ProcedureDeclarationList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 17, 2, 89),
            Trans(0, 31, 1, 88),
            Trans(0, 32, 2, 89),
            Trans(0, 33, 2, 89),
        ],
        k: 1,
    },
    /* 41 - "ProcedureHeading" */
    LookaheadDFA {
        prod0: 67,
        transitions: &[],
        k: 0,
    },
    /* 42 - "ProcedureHeadingSuffix" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 13, 1, 68), Trans(0, 25, 2, 69)],
        k: 1,
    },
    /* 43 - "RecordType" */
    LookaheadDFA {
        prod0: 54,
        transitions: &[],
        k: 0,
    },
    /* 44 - "RelationOp" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 11, 1, 16), Trans(0, 12, 2, 17)],
        k: 1,
    },
    /* 45 - "RelationalOps" */
    LookaheadDFA {
        prod0: 18,
        transitions: &[],
        k: 0,
    },
    /* 46 - "RepeatStatement" */
    LookaheadDFA {
        prod0: 38,
        transitions: &[],
        k: 0,
    },
    /* 47 - "Selector" */
    LookaheadDFA {
        prod0: 0,
        transitions: &[],
        k: 0,
    },
    /* 48 - "SelectorList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 1, 1),
            Trans(0, 6, 2, 2),
            Trans(0, 7, 3, 3),
            Trans(0, 9, 3, 3),
            Trans(0, 11, 3, 3),
            Trans(0, 12, 3, 3),
            Trans(0, 14, 3, 3),
            Trans(0, 15, 3, 3),
            Trans(0, 16, 3, 3),
            Trans(0, 17, 3, 3),
            Trans(0, 19, 3, 3),
            Trans(0, 20, 3, 3),
            Trans(0, 22, 3, 3),
            Trans(0, 24, 3, 3),
            Trans(0, 25, 3, 3),
            Trans(0, 27, 3, 3),
            Trans(0, 33, 3, 3),
            Trans(0, 38, 3, 3),
            Trans(0, 39, 3, 3),
        ],
        k: 1,
    },
    /* 49 - "SimpleExpression" */
    LookaheadDFA {
        prod0: 12,
        transitions: &[],
        k: 0,
    },
    /* 50 - "Statement" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 16, 10, -1),
            Trans(0, 17, 11, -1),
            Trans(0, 18, 4, -1),
            Trans(0, 20, 12, -1),
            Trans(0, 21, 6, -1),
            Trans(0, 23, 8, -1),
            Trans(0, 24, 12, -1),
            Trans(0, 25, 13, -1),
            Trans(0, 33, 12, -1),
            Trans(0, 41, 1, -1),
            Trans(1, 5, 2, 39),
            Trans(1, 6, 2, 39),
            Trans(1, 11, 2, 39),
            Trans(1, 13, 3, 40),
            Trans(1, 16, 3, 40),
            Trans(1, 17, 3, 40),
            Trans(1, 20, 3, 40),
            Trans(1, 24, 3, 40),
            Trans(1, 25, 3, 40),
            Trans(1, 33, 3, 40),
            Trans(4, 8, 5, 41),
            Trans(4, 10, 5, 41),
            Trans(4, 40, 5, 41),
            Trans(4, 41, 5, 41),
            Trans(4, 42, 5, 41),
            Trans(6, 8, 7, 42),
            Trans(6, 10, 7, 42),
            Trans(6, 40, 7, 42),
            Trans(6, 41, 7, 42),
            Trans(6, 42, 7, 42),
            Trans(8, 18, 9, 43),
            Trans(8, 21, 9, 43),
            Trans(8, 23, 9, 43),
            Trans(8, 24, 9, 43),
            Trans(8, 25, 9, 43),
            Trans(8, 41, 9, 43),
            Trans(10, 17, 14, 44),
            Trans(10, 18, 14, 44),
            Trans(10, 21, 14, 44),
            Trans(10, 23, 14, 44),
            Trans(10, 25, 14, 44),
            Trans(10, 41, 14, 44),
            Trans(11, 16, 14, 44),
            Trans(11, 17, 14, 44),
            Trans(11, 20, 14, 44),
            Trans(11, 24, 14, 44),
            Trans(11, 25, 14, 44),
            Trans(11, 33, 14, 44),
            Trans(11, 41, 14, 44),
            Trans(12, 8, 14, 44),
            Trans(12, 10, 14, 44),
            Trans(12, 40, 14, 44),
            Trans(12, 41, 14, 44),
            Trans(12, 42, 14, 44),
            Trans(13, 16, 14, 44),
            Trans(13, 17, 14, 44),
            Trans(13, 18, 14, 44),
            Trans(13, 20, 14, 44),
            Trans(13, 21, 14, 44),
            Trans(13, 23, 14, 44),
            Trans(13, 24, 14, 44),
            Trans(13, 25, 14, 44),
            Trans(13, 33, 14, 44),
            Trans(13, 41, 14, 44),
        ],
        k: 2,
    },
    /* 51 - "StatementSequence" */
    LookaheadDFA {
        prod0: 45,
        transitions: &[],
        k: 0,
    },
    /* 52 - "StatementSequenceRest" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 16, 2, 47),
            Trans(0, 17, 2, 47),
            Trans(0, 20, 2, 47),
            Trans(0, 24, 2, 47),
            Trans(0, 25, 1, 46),
            Trans(0, 33, 2, 47),
        ],
        k: 1,
    },
    /* 53 - "Term" */
    LookaheadDFA {
        prod0: 9,
        transitions: &[],
        k: 0,
    },
    /* 54 - "Type" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 26, 2, 58),
            Trans(0, 29, 3, 59),
            Trans(0, 41, 1, 57),
        ],
        k: 1,
    },
    /* 55 - "TypeDecls" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 17, 2, 93),
            Trans(0, 30, 2, 93),
            Trans(0, 31, 2, 93),
            Trans(0, 32, 2, 93),
            Trans(0, 33, 2, 93),
            Trans(0, 41, 1, 92),
        ],
        k: 1,
    },
    /* 56 - "UnaryOp" */
    LookaheadDFA {
        prod0: 101,
        transitions: &[],
        k: 0,
    },
    /* 57 - "VarDecls" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 17, 2, 95),
            Trans(0, 31, 2, 95),
            Trans(0, 32, 2, 95),
            Trans(0, 33, 2, 95),
            Trans(0, 41, 1, 94),
        ],
        k: 1,
    },
    /* 58 - "WhileStatement" */
    LookaheadDFA {
        prod0: 37,
        transitions: &[],
        k: 0,
    },
];

pub const PRODUCTIONS: &[Production; 104] = &[
    // 0 - Selector: SelectorList;
    Production {
        lhs: 47,
        production: &[ParseType::N(48)],
    },
    // 1 - SelectorList: "\." Ident SelectorList;
    Production {
        lhs: 48,
        production: &[ParseType::N(48), ParseType::N(23), ParseType::T(5)],
    },
    // 2 - SelectorList: "\[" Expression "]" SelectorList;
    Production {
        lhs: 48,
        production: &[
            ParseType::N(48),
            ParseType::T(7),
            ParseType::N(13),
            ParseType::T(6),
        ],
    },
    // 3 - SelectorList: ;
    Production {
        lhs: 48,
        production: &[],
    },
    // 4 - Factor: Ident Selector;
    Production {
        lhs: 18,
        production: &[ParseType::N(47), ParseType::N(23)],
    },
    // 5 - Factor: Integer;
    Production {
        lhs: 18,
        production: &[ParseType::N(29)],
    },
    // 6 - Factor: "\(" Expression "\)";
    Production {
        lhs: 18,
        production: &[ParseType::T(9), ParseType::N(13), ParseType::T(8)],
    },
    // 7 - Factor: "~" Factor;
    Production {
        lhs: 18,
        production: &[ParseType::N(18), ParseType::T(10)],
    },
    // 8 - Factor: UnaryOp Factor;
    Production {
        lhs: 18,
        production: &[ParseType::N(18), ParseType::N(56)],
    },
    // 9 - Term: Factor MulExpression;
    Production {
        lhs: 53,
        production: &[ParseType::N(32), ParseType::N(18)],
    },
    // 10 - MulExpression: MulOperator Factor MulExpression;
    Production {
        lhs: 32,
        production: &[ParseType::N(32), ParseType::N(18), ParseType::N(33)],
    },
    // 11 - MulExpression: ;
    Production {
        lhs: 32,
        production: &[],
    },
    // 12 - SimpleExpression: Term AddExpression;
    Production {
        lhs: 49,
        production: &[ParseType::N(2), ParseType::N(53)],
    },
    // 13 - AddExpression: AddOperator Term AddExpression;
    Production {
        lhs: 2,
        production: &[ParseType::N(2), ParseType::N(53), ParseType::N(3)],
    },
    // 14 - AddExpression: ;
    Production {
        lhs: 2,
        production: &[],
    },
    // 15 - AssignOp: ':=';
    Production {
        lhs: 5,
        production: &[ParseType::T(11)],
    },
    // 16 - RelationOp: AssignOp;
    Production {
        lhs: 44,
        production: &[ParseType::N(5)],
    },
    // 17 - RelationOp: RelationalOps;
    Production {
        lhs: 44,
        production: &[ParseType::N(45)],
    },
    // 18 - RelationalOps: />=|<=|\#|<|>/;
    Production {
        lhs: 45,
        production: &[ParseType::T(12)],
    },
    // 19 - Expression: SimpleExpression ExpressionSuffix;
    Production {
        lhs: 13,
        production: &[ParseType::N(15), ParseType::N(49)],
    },
    // 20 - ExpressionSuffix: RelationOp SimpleExpression;
    Production {
        lhs: 15,
        production: &[ParseType::N(49), ParseType::N(44)],
    },
    // 21 - ExpressionSuffix: ;
    Production {
        lhs: 15,
        production: &[],
    },
    // 22 - Assignment: Ident Selector AssignOp Expression;
    Production {
        lhs: 6,
        production: &[
            ParseType::N(13),
            ParseType::N(5),
            ParseType::N(47),
            ParseType::N(23),
        ],
    },
    // 23 - ActualParameters: '(' ActualParametersSuffix;
    Production {
        lhs: 0,
        production: &[ParseType::N(1), ParseType::T(13)],
    },
    // 24 - ActualParametersSuffix: ')';
    Production {
        lhs: 1,
        production: &[ParseType::T(14)],
    },
    // 25 - ActualParametersSuffix: Expression ExpressionListRest ')';
    Production {
        lhs: 1,
        production: &[ParseType::T(14), ParseType::N(14), ParseType::N(13)],
    },
    // 26 - ExpressionListRest: ',' Expression ExpressionListRest;
    Production {
        lhs: 14,
        production: &[ParseType::N(14), ParseType::N(13), ParseType::T(15)],
    },
    // 27 - ExpressionListRest: ;
    Production {
        lhs: 14,
        production: &[],
    },
    // 28 - ProcedureCall: Ident ProcedureCallSuffix;
    Production {
        lhs: 37,
        production: &[ParseType::N(38), ParseType::N(23)],
    },
    // 29 - ProcedureCallSuffix: ActualParameters;
    Production {
        lhs: 38,
        production: &[ParseType::N(0)],
    },
    // 30 - ProcedureCallSuffix: ;
    Production {
        lhs: 38,
        production: &[],
    },
    // 31 - IfStatement: IfPrefix IfStatementSuffix;
    Production {
        lhs: 27,
        production: &[ParseType::N(28), ParseType::N(26)],
    },
    // 32 - IfStatementSuffix: 'ELSE' StatementSequence 'END';
    Production {
        lhs: 28,
        production: &[ParseType::T(17), ParseType::N(51), ParseType::T(16)],
    },
    // 33 - IfStatementSuffix: 'END';
    Production {
        lhs: 28,
        production: &[ParseType::T(17)],
    },
    // 34 - IfPrefix: 'IF' Expression 'THEN' StatementSequence ElseIfList;
    Production {
        lhs: 26,
        production: &[
            ParseType::N(12),
            ParseType::N(51),
            ParseType::T(19),
            ParseType::N(13),
            ParseType::T(18),
        ],
    },
    // 35 - ElseIfList: 'ELSIF' Expression 'THEN' StatementSequence ElseIfList;
    Production {
        lhs: 12,
        production: &[
            ParseType::N(12),
            ParseType::N(51),
            ParseType::T(19),
            ParseType::N(13),
            ParseType::T(20),
        ],
    },
    // 36 - ElseIfList: ;
    Production {
        lhs: 12,
        production: &[],
    },
    // 37 - WhileStatement: 'WHILE' Expression 'DO' StatementSequence 'END';
    Production {
        lhs: 58,
        production: &[
            ParseType::T(17),
            ParseType::N(51),
            ParseType::T(22),
            ParseType::N(13),
            ParseType::T(21),
        ],
    },
    // 38 - RepeatStatement: 'REPEAT' StatementSequence 'UNTIL' Expression;
    Production {
        lhs: 46,
        production: &[
            ParseType::N(13),
            ParseType::T(24),
            ParseType::N(51),
            ParseType::T(23),
        ],
    },
    // 39 - Statement: Assignment;
    Production {
        lhs: 50,
        production: &[ParseType::N(6)],
    },
    // 40 - Statement: ProcedureCall;
    Production {
        lhs: 50,
        production: &[ParseType::N(37)],
    },
    // 41 - Statement: IfStatement;
    Production {
        lhs: 50,
        production: &[ParseType::N(27)],
    },
    // 42 - Statement: WhileStatement;
    Production {
        lhs: 50,
        production: &[ParseType::N(58)],
    },
    // 43 - Statement: RepeatStatement;
    Production {
        lhs: 50,
        production: &[ParseType::N(46)],
    },
    // 44 - Statement: ;
    Production {
        lhs: 50,
        production: &[],
    },
    // 45 - StatementSequence: Statement StatementSequenceRest;
    Production {
        lhs: 51,
        production: &[ParseType::N(52), ParseType::N(50)],
    },
    // 46 - StatementSequenceRest: ';' Statement StatementSequenceRest;
    Production {
        lhs: 52,
        production: &[ParseType::N(52), ParseType::N(50), ParseType::T(25)],
    },
    // 47 - StatementSequenceRest: ;
    Production {
        lhs: 52,
        production: &[],
    },
    // 48 - IdentList: Ident IdentListRest;
    Production {
        lhs: 24,
        production: &[ParseType::N(25), ParseType::N(23)],
    },
    // 49 - IdentListRest: ',' Ident IdentListRest;
    Production {
        lhs: 25,
        production: &[ParseType::N(25), ParseType::N(23), ParseType::T(15)],
    },
    // 50 - IdentListRest: ;
    Production {
        lhs: 25,
        production: &[],
    },
    // 51 - ArrayType: 'ARRAY' Expression 'OF' Type;
    Production {
        lhs: 4,
        production: &[
            ParseType::N(54),
            ParseType::T(27),
            ParseType::N(13),
            ParseType::T(26),
        ],
    },
    // 52 - FieldList: IdentList ':' Type;
    Production {
        lhs: 19,
        production: &[ParseType::N(54), ParseType::T(28), ParseType::N(24)],
    },
    // 53 - FieldList: ;
    Production {
        lhs: 19,
        production: &[],
    },
    // 54 - RecordType: 'RECORD' FieldList FieldListRest 'END';
    Production {
        lhs: 43,
        production: &[
            ParseType::T(17),
            ParseType::N(20),
            ParseType::N(19),
            ParseType::T(29),
        ],
    },
    // 55 - FieldListRest: ';' FieldList FieldListRest;
    Production {
        lhs: 20,
        production: &[ParseType::N(20), ParseType::N(19), ParseType::T(25)],
    },
    // 56 - FieldListRest: ;
    Production {
        lhs: 20,
        production: &[],
    },
    // 57 - Type: Ident;
    Production {
        lhs: 54,
        production: &[ParseType::N(23)],
    },
    // 58 - Type: ArrayType;
    Production {
        lhs: 54,
        production: &[ParseType::N(4)],
    },
    // 59 - Type: RecordType;
    Production {
        lhs: 54,
        production: &[ParseType::N(43)],
    },
    // 60 - FPSection: 'VAR' IdentList ':' Type;
    Production {
        lhs: 16,
        production: &[
            ParseType::N(54),
            ParseType::T(28),
            ParseType::N(24),
            ParseType::T(30),
        ],
    },
    // 61 - FPSection: IdentList ':' Type;
    Production {
        lhs: 16,
        production: &[ParseType::N(54), ParseType::T(28), ParseType::N(24)],
    },
    // 62 - FormalParameters: '(' FormalParametersSuffix;
    Production {
        lhs: 21,
        production: &[ParseType::N(22), ParseType::T(13)],
    },
    // 63 - FormalParametersSuffix: ')';
    Production {
        lhs: 22,
        production: &[ParseType::T(14)],
    },
    // 64 - FormalParametersSuffix: FPSection FPSectionRest ')';
    Production {
        lhs: 22,
        production: &[ParseType::T(14), ParseType::N(17), ParseType::N(16)],
    },
    // 65 - FPSectionRest: ';' FPSection FPSectionRest;
    Production {
        lhs: 17,
        production: &[ParseType::N(17), ParseType::N(16), ParseType::T(25)],
    },
    // 66 - FPSectionRest: ;
    Production {
        lhs: 17,
        production: &[],
    },
    // 67 - ProcedureHeading: 'PROCEDURE' Ident ProcedureHeadingSuffix;
    Production {
        lhs: 41,
        production: &[ParseType::N(42), ParseType::N(23), ParseType::T(31)],
    },
    // 68 - ProcedureHeadingSuffix: FormalParameters;
    Production {
        lhs: 42,
        production: &[ParseType::N(21)],
    },
    // 69 - ProcedureHeadingSuffix: ;
    Production {
        lhs: 42,
        production: &[],
    },
    // 70 - ProcedureBody: Declarations ProcedureBodySuffix0;
    Production {
        lhs: 34,
        production: &[ParseType::N(36), ParseType::N(8)],
    },
    // 71 - ProcedureBodySuffix0: 'BEGIN' StatementSequence ProcedureBodySuffix;
    Production {
        lhs: 36,
        production: &[ParseType::N(35), ParseType::N(51), ParseType::T(32)],
    },
    // 72 - ProcedureBodySuffix0: 'RETURN' Expression 'END' Ident;
    Production {
        lhs: 36,
        production: &[
            ParseType::N(23),
            ParseType::T(17),
            ParseType::N(13),
            ParseType::T(33),
        ],
    },
    // 73 - ProcedureBodySuffix0: 'END' Ident;
    Production {
        lhs: 36,
        production: &[ParseType::N(23), ParseType::T(17)],
    },
    // 74 - ProcedureBodySuffix: 'RETURN' Expression 'END' Ident;
    Production {
        lhs: 35,
        production: &[
            ParseType::N(23),
            ParseType::T(17),
            ParseType::N(13),
            ParseType::T(33),
        ],
    },
    // 75 - ProcedureBodySuffix: 'END' Ident;
    Production {
        lhs: 35,
        production: &[ParseType::N(23), ParseType::T(17)],
    },
    // 76 - ProcedureDeclaration: ProcedureHeading ';' ProcedureBody;
    Production {
        lhs: 39,
        production: &[ParseType::N(34), ParseType::T(25), ParseType::N(41)],
    },
    // 77 - Declarations: 'TYPE' TypeDecls DeclarationsSuffix1;
    Production {
        lhs: 8,
        production: &[ParseType::N(11), ParseType::N(55), ParseType::T(34)],
    },
    // 78 - Declarations: 'CONST' ConstDecls DeclarationsSuffix0;
    Production {
        lhs: 8,
        production: &[ParseType::N(10), ParseType::N(7), ParseType::T(35)],
    },
    // 79 - DeclarationsSuffix1: 'VAR' VarDecls ProcedureDeclarationList;
    Production {
        lhs: 11,
        production: &[ParseType::N(40), ParseType::N(57), ParseType::T(30)],
    },
    // 80 - DeclarationsSuffix1: ProcedureDeclarationList;
    Production {
        lhs: 11,
        production: &[ParseType::N(40)],
    },
    // 81 - Declarations: 'VAR' VarDecls ProcedureDeclarationList;
    Production {
        lhs: 8,
        production: &[ParseType::N(40), ParseType::N(57), ParseType::T(30)],
    },
    // 82 - Declarations: ProcedureDeclarationList;
    Production {
        lhs: 8,
        production: &[ParseType::N(40)],
    },
    // 83 - DeclarationsSuffix0: 'TYPE' TypeDecls DeclarationsSuffix;
    Production {
        lhs: 10,
        production: &[ParseType::N(9), ParseType::N(55), ParseType::T(34)],
    },
    // 84 - DeclarationsSuffix0: 'VAR' VarDecls ProcedureDeclarationList;
    Production {
        lhs: 10,
        production: &[ParseType::N(40), ParseType::N(57), ParseType::T(30)],
    },
    // 85 - DeclarationsSuffix0: ProcedureDeclarationList;
    Production {
        lhs: 10,
        production: &[ParseType::N(40)],
    },
    // 86 - DeclarationsSuffix: 'VAR' VarDecls ProcedureDeclarationList;
    Production {
        lhs: 9,
        production: &[ParseType::N(40), ParseType::N(57), ParseType::T(30)],
    },
    // 87 - DeclarationsSuffix: ProcedureDeclarationList;
    Production {
        lhs: 9,
        production: &[ParseType::N(40)],
    },
    // 88 - ProcedureDeclarationList: ProcedureDeclaration ';' ProcedureDeclarationList;
    Production {
        lhs: 40,
        production: &[ParseType::N(40), ParseType::T(25), ParseType::N(39)],
    },
    // 89 - ProcedureDeclarationList: ;
    Production {
        lhs: 40,
        production: &[],
    },
    // 90 - ConstDecls: Ident AssignOp Expression ';' ConstDecls;
    Production {
        lhs: 7,
        production: &[
            ParseType::N(7),
            ParseType::T(25),
            ParseType::N(13),
            ParseType::N(5),
            ParseType::N(23),
        ],
    },
    // 91 - ConstDecls: ;
    Production {
        lhs: 7,
        production: &[],
    },
    // 92 - TypeDecls: Ident AssignOp Type ';' TypeDecls;
    Production {
        lhs: 55,
        production: &[
            ParseType::N(55),
            ParseType::T(25),
            ParseType::N(54),
            ParseType::N(5),
            ParseType::N(23),
        ],
    },
    // 93 - TypeDecls: ;
    Production {
        lhs: 55,
        production: &[],
    },
    // 94 - VarDecls: IdentList ':' Type ';' VarDecls;
    Production {
        lhs: 57,
        production: &[
            ParseType::N(57),
            ParseType::T(25),
            ParseType::N(54),
            ParseType::T(28),
            ParseType::N(24),
        ],
    },
    // 95 - VarDecls: ;
    Production {
        lhs: 57,
        production: &[],
    },
    // 96 - Module: 'MODULE' Ident ';' Declarations ModuleSuffix;
    Production {
        lhs: 30,
        production: &[
            ParseType::N(31),
            ParseType::N(8),
            ParseType::T(25),
            ParseType::N(23),
            ParseType::T(36),
        ],
    },
    // 97 - ModuleSuffix: 'BEGIN' StatementSequence 'END' Ident '\.';
    Production {
        lhs: 31,
        production: &[
            ParseType::T(5),
            ParseType::N(23),
            ParseType::T(17),
            ParseType::N(51),
            ParseType::T(32),
        ],
    },
    // 98 - ModuleSuffix: 'END' Ident '\.';
    Production {
        lhs: 31,
        production: &[ParseType::T(5), ParseType::N(23), ParseType::T(17)],
    },
    // 99 - MulOperator: "\*|/|DIV|MOD|&";
    Production {
        lhs: 33,
        production: &[ParseType::T(38)],
    },
    // 100 - AddOperator: /\+|-|OR/;
    Production {
        lhs: 3,
        production: &[ParseType::T(39)],
    },
    // 101 - UnaryOp: /\+|-/;
    Production {
        lhs: 56,
        production: &[ParseType::T(40)],
    },
    // 102 - Ident: /[a-zA-Z][a-zA-Z0-9]*/;
    Production {
        lhs: 23,
        production: &[ParseType::T(41)],
    },
    // 103 - Integer: /[0-9]+/;
    Production {
        lhs: 29,
        production: &[ParseType::T(42)],
    },
];

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut Oberon0Grammar<'t>,
) -> Result<ParseTree, ParolError>
where
    T: AsRef<Path>,
{
    use parol_runtime::{
        parser::{parse_tree_type::SynTree, parser_types::SynTreeFlavor},
        syntree::Builder,
    };
    let mut builder = Builder::<SynTree, SynTreeFlavor>::new_with();
    parse_into(input, &mut builder, file_name, user_actions)?;
    Ok(builder.build()?)
}
#[allow(dead_code)]
pub fn parse_into<'t, T: TreeConstruct<'t>>(
    input: &'t str,
    tree_builder: &mut T,
    file_name: impl AsRef<Path>,
    user_actions: &mut Oberon0Grammar<'t>,
) -> Result<(), ParolError>
where
    ParolError: From<T::Error>,
{
    use oberon0_grammar_scanner::Oberon0GrammarScanner;
    let mut llk_parser = LLKParser::new(
        30,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    llk_parser.trim_parse_tree();
    let scanner = Oberon0GrammarScanner::new();
    // Initialize wrapper
    let mut user_actions = Oberon0GrammarAuto::new(user_actions);
    llk_parser.parse_into(
        tree_builder,
        TokenStream::new(
            input,
            file_name,
            scanner.scanner_impl.clone(),
            &Oberon0GrammarScanner::match_function,
            MAX_K,
        )
        .unwrap(),
        &mut user_actions,
    )
}
