%start Module
%title "Oberon-0 Grammar"
%block_comment "\(\*" "\*\)"

%%

/*   0 */ Selector: SelectorList;
/*   1 */ SelectorList: "\." Ident SelectorList;
/*   2 */ SelectorList: "\[" Expression "]" SelectorList;
/*   3 */ SelectorList: ;
/*   4 */ Factor: Ident Selector;
/*   5 */ Factor: Integer;
/*   6 */ Factor: "\(" Expression "\)";
/*   7 */ Factor: "~" Factor;
/*   8 */ Factor: UnaryOp Factor;
/*   9 */ Term: Factor MulExpression;
/*  10 */ MulExpression: MulOperator Factor MulExpression;
/*  11 */ MulExpression: ;
/*  12 */ SimpleExpression: Term AddExpression;
/*  13 */ AddExpression: AddOperator Term AddExpression;
/*  14 */ AddExpression: ;
/*  15 */ AssignOp: ':=';
/*  16 */ RelationOp: AssignOp;
/*  17 */ RelationOp: RelationalOps;
/*  18 */ RelationalOps: />=|<=|\#|<|>/;
/*  19 */ Expression: SimpleExpression ExpressionSuffix;
/*  20 */ ExpressionSuffix: RelationOp SimpleExpression;
/*  21 */ ExpressionSuffix: ;
/*  22 */ Assignment: Ident Selector AssignOp Expression;
/*  23 */ ActualParameters: '(' ActualParametersSuffix;
/*  24 */ ActualParametersSuffix: ')';
/*  25 */ ActualParametersSuffix: Expression ExpressionListRest ')';
/*  26 */ ExpressionListRest: ',' Expression ExpressionListRest;
/*  27 */ ExpressionListRest: ;
/*  28 */ ProcedureCall: Ident ProcedureCallSuffix;
/*  29 */ ProcedureCallSuffix: ActualParameters;
/*  30 */ ProcedureCallSuffix: ;
/*  31 */ IfStatement: IfPrefix IfStatementSuffix;
/*  32 */ IfStatementSuffix: 'ELSE' StatementSequence 'END';
/*  33 */ IfStatementSuffix: 'END';
/*  34 */ IfPrefix: 'IF' Expression 'THEN' StatementSequence ElseIfList;
/*  35 */ ElseIfList: 'ELSIF' Expression 'THEN' StatementSequence ElseIfList;
/*  36 */ ElseIfList: ;
/*  37 */ WhileStatement: 'WHILE' Expression 'DO' StatementSequence 'END';
/*  38 */ RepeatStatement: 'REPEAT' StatementSequence 'UNTIL' Expression;
/*  39 */ Statement: Assignment;
/*  40 */ Statement: ProcedureCall;
/*  41 */ Statement: IfStatement;
/*  42 */ Statement: WhileStatement;
/*  43 */ Statement: RepeatStatement;
/*  44 */ Statement: ;
/*  45 */ StatementSequence: Statement StatementSequenceRest;
/*  46 */ StatementSequenceRest: ';' Statement StatementSequenceRest;
/*  47 */ StatementSequenceRest: ;
/*  48 */ IdentList: Ident IdentListRest;
/*  49 */ IdentListRest: ',' Ident IdentListRest;
/*  50 */ IdentListRest: ;
/*  51 */ ArrayType: 'ARRAY' Expression 'OF' Type;
/*  52 */ FieldList: IdentList ':' Type;
/*  53 */ FieldList: ;
/*  54 */ RecordType: 'RECORD' FieldList FieldListRest 'END';
/*  55 */ FieldListRest: ';' FieldList FieldListRest;
/*  56 */ FieldListRest: ;
/*  57 */ Type: Ident;
/*  58 */ Type: ArrayType;
/*  59 */ Type: RecordType;
/*  60 */ FPSection: 'VAR' IdentList ':' Type;
/*  61 */ FPSection: IdentList ':' Type;
/*  62 */ FormalParameters: '(' FormalParametersSuffix;
/*  63 */ FormalParametersSuffix: ')';
/*  64 */ FormalParametersSuffix: FPSection FPSectionRest ')';
/*  65 */ FPSectionRest: ';' FPSection FPSectionRest;
/*  66 */ FPSectionRest: ;
/*  67 */ ProcedureHeading: 'PROCEDURE' Ident ProcedureHeadingSuffix;
/*  68 */ ProcedureHeadingSuffix: FormalParameters;
/*  69 */ ProcedureHeadingSuffix: ;
/*  70 */ ProcedureBody: Declarations ProcedureBodySuffix0;
/*  71 */ ProcedureBodySuffix0: 'BEGIN' StatementSequence ProcedureBodySuffix;
/*  72 */ ProcedureBodySuffix0: 'RETURN' Expression 'END' Ident;
/*  73 */ ProcedureBodySuffix0: 'END' Ident;
/*  74 */ ProcedureBodySuffix: 'RETURN' Expression 'END' Ident;
/*  75 */ ProcedureBodySuffix: 'END' Ident;
/*  76 */ ProcedureDeclaration: ProcedureHeading ';' ProcedureBody;
/*  77 */ Declarations: 'TYPE' TypeDecls DeclarationsSuffix1;
/*  78 */ Declarations: 'CONST' ConstDecls DeclarationsSuffix0;
/*  79 */ DeclarationsSuffix1: 'VAR' VarDecls ProcedureDeclarationList;
/*  80 */ DeclarationsSuffix1: ProcedureDeclarationList;
/*  81 */ Declarations: 'VAR' VarDecls ProcedureDeclarationList;
/*  82 */ Declarations: ProcedureDeclarationList;
/*  83 */ DeclarationsSuffix0: 'TYPE' TypeDecls DeclarationsSuffix;
/*  84 */ DeclarationsSuffix0: 'VAR' VarDecls ProcedureDeclarationList;
/*  85 */ DeclarationsSuffix0: ProcedureDeclarationList;
/*  86 */ DeclarationsSuffix: 'VAR' VarDecls ProcedureDeclarationList;
/*  87 */ DeclarationsSuffix: ProcedureDeclarationList;
/*  88 */ ProcedureDeclarationList: ProcedureDeclaration ';' ProcedureDeclarationList;
/*  89 */ ProcedureDeclarationList: ;
/*  90 */ ConstDecls: Ident AssignOp Expression ';' ConstDecls;
/*  91 */ ConstDecls: ;
/*  92 */ TypeDecls: Ident AssignOp Type ';' TypeDecls;
/*  93 */ TypeDecls: ;
/*  94 */ VarDecls: IdentList ':' Type ';' VarDecls;
/*  95 */ VarDecls: ;
/*  96 */ Module: 'MODULE' Ident ';' Declarations ModuleSuffix;
/*  97 */ ModuleSuffix: 'BEGIN' StatementSequence 'END' Ident '\.';
/*  98 */ ModuleSuffix: 'END' Ident '\.';
/*  99 */ MulOperator: "\*|/|DIV|MOD|&";
/* 100 */ AddOperator: /\+|-|OR/;
/* 101 */ UnaryOp: /\+|-/;
/* 102 */ Ident: /[a-zA-Z][a-zA-Z0-9]*/;
/* 103 */ Integer: /[0-9]+/;
