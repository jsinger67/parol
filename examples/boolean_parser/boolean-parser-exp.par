%start Expressions
%title "Boolean Parser Example"
%comment "Inspired by Tom Humphrey's project https://github.com/Tom01098/BooleanParser"
%line_comment "//"
%block_comment "\(\*" "\*\)"

%%

/*  0 */ Expressions: Expression ExpressionsList /* Vec */ TrailingSemicolon^ /* Clipped */;
/*  1 */ ExpressionsList /* Vec<T>::Push */: Semicolon^ /* Clipped */ Expression ExpressionsList;
/*  2 */ ExpressionsList /* Vec<T>::New */: ;
/*  3 */ TrailingSemicolon: TrailingSemicolonOpt /* Option */;
/*  4 */ TrailingSemicolonOpt /* Option<T>::Some */: Semicolon;
/*  5 */ TrailingSemicolonOpt /* Option<T>::None */: ;
/*  6 */ Expression: Term ExpressionList /* Vec */;
/*  7 */ ExpressionList /* Vec<T>::Push */: BinaryOperator Term ExpressionList;
/*  8 */ ExpressionList /* Vec<T>::New */: ;
/*  9 */ Term: TermOpt /* Option */ Factor;
/* 10 */ TermOpt /* Option<T>::Some */: UnaryOperator;
/* 11 */ TermOpt /* Option<T>::None */: ;
/* 12 */ Boolean: True;
/* 13 */ Boolean: False;
/* 14 */ UnaryOperator: Not;
/* 15 */ BinaryOperator: AndOp;
/* 16 */ BinaryOperator: OrOp;
/* 17 */ BinaryOperator: XorOp;
/* 18 */ BinaryOperator: NorOp;
/* 19 */ BinaryOperator: NandOp;
/* 20 */ BinaryOperator: XnorOp;
/* 21 */ AndOp: "[aA][nN][dD]"^ /* Clipped */;
/* 22 */ OrOp: "[oO][rR]"^ /* Clipped */;
/* 23 */ XorOp: "[xX][oO][rR]"^ /* Clipped */;
/* 24 */ NorOp: "[nN][oO][rR]"^ /* Clipped */;
/* 25 */ NandOp: "[nN][aA][nN][dD]"^ /* Clipped */;
/* 26 */ XnorOp: "[xX][nN][oO][rR]"^ /* Clipped */;
/* 27 */ True: "[tT][rR][uU][eE]"^ /* Clipped */;
/* 28 */ False: "[fF][aA][lL][sS][eE]"^ /* Clipped */;
/* 29 */ Not: "[nN][oO][tT]"^ /* Clipped */;
/* 30 */ Parenthesized: LeftParenthesis^ /* Clipped */ Expression RightParenthesis^ /* Clipped */;
/* 31 */ Semicolon: ';';
/* 32 */ LeftParenthesis: '(';
/* 33 */ RightParenthesis: ')';
/* 34 */ Factor: Boolean;
/* 35 */ Factor: Parenthesized;
