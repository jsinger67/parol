%start ParolToml
%title "TOML Grammar"
%comment "Adapted from https://raw.githubusercontent.com/toml-lang/toml/1.0.0/toml.abnf"
%line_comment "#"

%scanner Esc {
    %auto_newline_off
    %auto_ws_off
}
%scanner Val {
    %line_comment "#"
}
%scanner BString {
    %auto_newline_off
    %auto_ws_off
}
%scanner MLBString {
    %auto_newline_off
    %auto_ws_off
}
%scanner LString {
    %auto_newline_off
    %auto_ws_off
}
%scanner MLLString {
    %auto_newline_off
    %auto_ws_off
}
%scanner HexInt {
    %auto_newline_off
    %auto_ws_off
}
%scanner OctInt {
    %auto_newline_off
    %auto_ws_off
}
%scanner BinInt {
    %auto_newline_off
    %auto_ws_off
}

%%

/*   0 */ ParolToml: ParolTomlList /* Vec */;
/*   1 */ ParolTomlList /* Vec<T>::Push */: Expression ParolTomlList;
/*   2 */ ParolTomlList /* Vec<T>::New */: ;
/*   3 */ Expression: KeyVal;
/*   4 */ Expression: Table;
/*   5 */ Newline: <MLBString, MLLString>"\r?\n";
/*   6 */ WsNewline: <Esc>"[ \t]*\r?\n";
/*   7 */ NonAscii: <BString, MLBString, LString, MLLString>"[\u{80}-\u{D7FF}\u{E000}-\u{10FFFF}]";
/*   8 */ KeyVal: Key KeyValSep %push(Val) Val %pop();
/*   9 */ Key: SimpleKey KeySuffix;
/*  10 */ KeySuffix: ;
/*  11 */ KeySuffix: DotSep SimpleKey KeyList /* Vec */;
/*  12 */ KeyList /* Vec<T>::Push */: DotSep SimpleKey KeyList;
/*  13 */ KeyList /* Vec<T>::New */: ;
/*  14 */ SimpleKey: QuotedKey;
/*  15 */ SimpleKey: UnquotedKey;
/*  16 */ QuotedKey: BasicString;
/*  17 */ QuotedKey: LiteralString;
/*  18 */ KeyValSep: <INITIAL, Val>"=";
/*  19 */ Val: Boolean;
/*  20 */ Val: Array;
/*  21 */ Val: InlineTable;
/*  22 */ Val: DateTime;
/*  23 */ Val: Numeric;
/*  24 */ Val: BasicString;
/*  25 */ Val: MLBasicString;
/*  26 */ Val: LiteralString;
/*  27 */ Val: MLLiteralString;
/*  28 */ Numeric: Float;
/*  29 */ Numeric: Integer;
/*  30 */ BasicString: QuotationMark %push(BString) BasicStringList /* Vec */ %pop() QuotationMark;
/*  31 */ BasicStringList /* Vec<T>::Push */: BasicChar BasicStringList;
/*  32 */ BasicStringList /* Vec<T>::New */: ;
/*  33 */ BasicChar: BasicUnescaped;
/*  34 */ BasicChar: %push(Esc) Escaped %pop();
/*  35 */ BasicUnescaped: AsciiNoEscape;
/*  36 */ BasicUnescaped: NonAscii;
/*  37 */ Escaped: Escape EscapeSeqChar;
/*  38 */ Escape: <Esc, BString, MLBString>"\u{5C}";
/*  39 */ EscapeSeqChar: QuotationMark;
/*  40 */ EscapeSeqChar: Escape;
/*  41 */ EscapeSeqChar: <Esc>"b";
/*  42 */ EscapeSeqChar: <Esc>"f";
/*  43 */ EscapeSeqChar: <Esc>"n";
/*  44 */ EscapeSeqChar: <Esc>"r";
/*  45 */ EscapeSeqChar: <Esc>"t";
/*  46 */ EscapeSeqChar: Unicode4;
/*  47 */ EscapeSeqChar: Unicode8;
/*  48 */ EscapeSeqChar: WsNewline;
/*  49 */ EscapeSeqChar: AsciiNoEscape;
/*  50 */ Unicode4: <Esc>"u[0-9a-fA-F]{4}";
/*  51 */ Unicode8: <Esc>"U[0-9a-fA-F]{8}";
/*  52 */ MLBasicString: MLBasicStringStart %push(MLBString) MLBasicBody MLBasicStringEnd %pop();
/*  53 */ MLBasicBody: MLBContentList MLBasicBodyList /* Vec */;
/*  54 */ MLBasicBodyList /* Vec<T>::Push */: MLBQuotes MLBContentList1 MLBasicBodyList;
/*  55 */ MLBasicBodyList /* Vec<T>::New */: ;
/*  56 */ MLBContentList: MLBContent MLBContentList;
/*  57 */ MLBContentList: ;
/*  58 */ MLBContentList1: MLBContent MLBContentList;
/*  59 */ MLBContent: MLBChar;
/*  60 */ MLBContent: Newline;
/*  61 */ MLBContent: MLBEscapedNL;
/*  62 */ MLBChar: MLBUnescaped;
/*  63 */ MLBChar: %push(Esc) Escaped %pop();
/*  64 */ MLBUnescaped: AsciiNoEscape;
/*  65 */ MLBUnescaped: NonAscii;
/*  66 */ MLBEscapedNL: <MLBString>"\u{5C}[ \t]*\r?\n([ \t]|\r?\n)*";
/*  67 */ LiteralString: Apostrophe^ /* Clipped */ %push(LString) LiteralStringList /* Vec */ %pop() Apostrophe^ /* Clipped */;
/*  68 */ LiteralStringList /* Vec<T>::Push */: LiteralChar LiteralStringList;
/*  69 */ LiteralStringList /* Vec<T>::New */: ;
/*  70 */ LiteralChar: LiteralCharNoApostrophe;
/*  71 */ LiteralChar: NonAscii;
/*  72 */ LiteralCharNoApostrophe: <LString, MLLString>"[\t\u{20}-\u{26}\u{28}-\u{7E}]+";
/*  73 */ MLLiteralString: MLLiteralStringStart^ /* Clipped */ %push(MLLString) MLLiteralBody %pop();
/*  74 */ MLLiteralBody: MLLContentList MLLiteralBodyList /* Vec */ MLLiteralStringEnd^ /* Clipped */;
/*  75 */ MLLiteralBodyList /* Vec<T>::Push */: MLLQuotes MLLContentList1 MLLiteralBodyList;
/*  76 */ MLLiteralBodyList /* Vec<T>::New */: ;
/*  77 */ MLLContentList: MLLContent MLLContentList;
/*  78 */ MLLContentList: ;
/*  79 */ MLLContentList1: MLLContent MLLContentList;
/*  80 */ MLLContent: LiteralChar;
/*  81 */ MLLContent: Newline;
/*  82 */ Integer: DecInt;
/*  83 */ Integer: HexInt;
/*  84 */ Integer: OctInt;
/*  85 */ Integer: BinInt;
/*  86 */ HexPrefix: <Val>"0x";
/*  87 */ OctPrefix: <Val>"0o";
/*  88 */ BinPrefix: <Val>"0b";
/*  89 */ DecInt: DecIntOpt /* Option */ UnsignedDecInt;
/*  90 */ DecIntOpt /* Option<T>::Some */: DecIntOptGroup;
/*  91 */ DecIntOptGroup: Plus;
/*  92 */ DecIntOptGroup: Minus;
/*  93 */ DecIntOpt /* Option<T>::None */: ;
/*  94 */ HexInt: HexPrefix^ /* Clipped */ %push(HexInt) HexIntContent %pop();
/*  95 */ HexIntContent: <HexInt>"[0-9a-fA-F]([0-9a-fA-F]|_[0-9a-fA-F])*";
/*  96 */ OctInt: OctPrefix^ /* Clipped */ %push(OctInt) OctIntContent %pop();
/*  97 */ OctIntContent: <OctInt>"[0-7]([0-7]|_[0-7])*";
/*  98 */ BinInt: BinPrefix^ /* Clipped */ %push(BinInt) BinIntContent %pop();
/*  99 */ BinIntContent: <BinInt>"[01]([01]|_[01])*";
/* 100 */ Boolean: <Val>"true";
/* 101 */ Boolean: <Val>"false";
/* 102 */ Float: NormalFloat;
/* 103 */ Float: SpecialFloat;
/* 104 */ NormalFloat: <Val>"[-+]?(?:0|[1-9](?:[0-9]|_[0-9])*)(?:[eE][-+]?[0-9](?:[0-9]|_[0-9])*|(?:\.[0-9](?:[0-9]|_[0-9])*(?:[eE][-+]?[0-9](?:[0-9]|_[0-9])*)?))";
/* 105 */ SpecialFloat: <Val>"[-+]?(nan|inf)";
/* 106 */ DateTime: OffsetDateTime;
/* 107 */ DateTime: LocalDateTime;
/* 108 */ DateTime: LocalDate;
/* 109 */ DateTime: LocalTime;
/* 110 */ OffsetDateTime: <Val>"[0-9]{4}-[0-9]{2}-[0-9]{2}[Tt ][0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?([Zz]|[-+][0-9]{2}(:[0-9]{2})?)?";
/* 111 */ LocalDateTime: <Val>"[0-9]{4}-[0-9]{2}-[0-9]{2}[Tt ][0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?[Zz]?";
/* 112 */ LocalDate: <Val>"[0-9]{4}-[0-9]{2}-[0-9]{2}";
/* 113 */ LocalTime: <Val>"[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?";
/* 114 */ Array: ArrayOpen^ /* Clipped */ %push(Val) ArrayOpt /* Option */ %pop() ArrayClose^ /* Clipped */;
/* 115 */ ArrayOpt /* Option<T>::Some */: ArrayValues;
/* 116 */ ArrayOpt /* Option<T>::None */: ;
/* 117 */ ArrayValues: Val ArrayValuesSuffix0;
/* 118 */ ArrayValuesSuffix0: ArraySep^ /* Clipped */ ArrayValuesSuffix;
/* 119 */ ArrayValuesSuffix0: ;
/* 120 */ ArrayValuesSuffix: ArrayValues;
/* 121 */ ArrayValuesSuffix: ;
/* 122 */ ArraySep: <INITIAL, Val>",";
/* 123 */ Table: StdTable;
/* 124 */ Table: ArrayTable;
/* 125 */ StdTable: StdTableOpen^ /* Clipped */ Key StdTableClose^ /* Clipped */;
/* 126 */ ArrayTableOpen: "\u{5B}\u{5B}";
/* 127 */ ArrayTableClose: "\u{5D}\u{5D}";
/* 128 */ ArrayOpen: <INITIAL, Val>"\u{5B}";
/* 129 */ ArrayClose: <INITIAL, Val>"\u{5D}";
/* 130 */ StdTableOpen: ArrayOpen;
/* 131 */ StdTableClose: ArrayClose;
/* 132 */ InlineTable: InlineTableOpen^ /* Clipped */ %push(INITIAL) InlineTableOpt /* Option */ %pop() InlineTableOpt0 /* Option */ InlineTableClose^ /* Clipped */;
/* 133 */ InlineTableOpt0 /* Option<T>::Some */: InlineTableSep;
/* 134 */ InlineTableOpt0 /* Option<T>::None */: ;
/* 135 */ InlineTableOpt /* Option<T>::Some */: InlineTableKeyVals;
/* 136 */ InlineTableOpt /* Option<T>::None */: ;
/* 137 */ InlineTableOpen: <INITIAL, Val>"\u{7B}";
/* 138 */ InlineTableClose: <INITIAL, Val>"\u{7D}";
/* 139 */ InlineTableSep: ArraySep;
/* 140 */ InlineTableKeyVals: KeyVal InlineTableKeyValsOpt /* Option */;
/* 141 */ InlineTableKeyValsOpt /* Option<T>::Some */: InlineTableSep^ /* Clipped */ InlineTableKeyVals;
/* 142 */ InlineTableKeyValsOpt /* Option<T>::None */: ;
/* 143 */ ArrayTable: ArrayTableOpen^ /* Clipped */ Key ArrayTableClose^ /* Clipped */;
/* 144 */ UnsignedDecInt: <Val>"0|[1-9]([0-9]|_[0-9])*";
/* 145 */ UnquotedKey: "[-_A-Za-z0-9\u{B2}\u{B3}\u{B9}\u{BC}-\u{BE}\u{C0}-\u{D6}\u{D8}-\u{F6}\u{F8}-\u{37D}\u{37F}-\u{1FFF}\u{200C}-\u{200D}\u{203F}-\u{2040}\u{2070}-\u{218F}\u{2460}-\u{24FF}\u{2C00}-\u{2FEF}\u{3001}-\u{D7FF}\u{F900}-\u{FDCF}\u{FDF0}-\u{FFFD}\u{10000}-\u{EFFFF}]+";
/* 146 */ DotSep: <INITIAL, Val>"\.";
/* 147 */ MLBasicStringStart: <INITIAL, Val>"\u{22}{3}";
/* 148 */ MLBasicStringEnd: <MLBString>"\u{22}{3,5}";
/* 149 */ MLBQuotes: <MLBString>"\u{22}{1,2}";
/* 150 */ QuotationMark: <INITIAL, Esc, Val, BString>"\u{22}";
/* 151 */ MLLiteralStringStart: <INITIAL, Val>"\u{27}{3}";
/* 152 */ MLLiteralStringEnd: <MLLString>"\u{27}{3,5}(?:\r?\n)?";
/* 153 */ MLLQuotes: <MLLString>"\u{27}{1,2}";
/* 154 */ Apostrophe: <INITIAL, Val, LString>"\u{27}";
/* 155 */ AsciiNoEscape: <Esc, BString, MLBString>"[ \t\u{21}\u{23}-\u{5B}\u{5D}-\u{7E}]+";
/* 156 */ Minus: <Val>"\u{2D}";
/* 157 */ Plus: <Val>"\u{2B}";
