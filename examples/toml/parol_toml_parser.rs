// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use parol_runtime::once_cell::sync::Lazy;
#[allow(unused_imports)]
use parol_runtime::parser::{LLKParser, LookaheadDFA, ParseTreeType, ParseType, Production, Trans};
use parol_runtime::{ParolError, ParseTree, TerminalIndex};
use parol_runtime::{ScannerConfig, TokenStream, Tokenizer};
use std::path::Path;

use crate::parol_toml_grammar::ParolTomlGrammar;
use crate::parol_toml_grammar_trait::ParolTomlGrammarAuto;

use parol_runtime::lexer::tokenizer::{
    ERROR_TOKEN, NEW_LINE_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN,
};

pub const TERMINALS: &[(&str, Option<(bool, &str)>); 55] = &[
    /*  0 */ (UNMATCHABLE_TOKEN, None),
    /*  1 */ (UNMATCHABLE_TOKEN, None),
    /*  2 */ (UNMATCHABLE_TOKEN, None),
    /*  3 */ (UNMATCHABLE_TOKEN, None),
    /*  4 */ (UNMATCHABLE_TOKEN, None),
    /*  5 */ (r"\r?\n", None),
    /*  6 */ (r"[ \t]*\r?\n", None),
    /*  7 */ (r"[\u{80}-\u{D7FF}\u{E000}-\u{10FFFF}]", None),
    /*  8 */ (r"=", None),
    /*  9 */ (r"\u{5C}", None),
    /* 10 */ (r"b", None),
    /* 11 */ (r"f", None),
    /* 12 */ (r"n", None),
    /* 13 */ (r"r", None),
    /* 14 */ (r"t", None),
    /* 15 */ (r"u[0-9a-fA-F]{4}", None),
    /* 16 */ (r"U[0-9a-fA-F]{8}", None),
    /* 17 */ (r"\u{5C}[ \t]*\r?\n([ \t]|\r?\n)*", None),
    /* 18 */ (r"[\t\u{20}-\u{26}\u{28}-\u{7E}]+", None),
    /* 19 */ (r"0x", None),
    /* 20 */ (r"0o", None),
    /* 21 */ (r"0b", None),
    /* 22 */ (r"[0-9a-fA-F]([0-9a-fA-F]|_[0-9a-fA-F])*", None),
    /* 23 */ (r"[0-7]([0-7]|_[0-7])*", None),
    /* 24 */ (r"[01]([01]|_[01])*", None),
    /* 25 */ (r"true", None),
    /* 26 */ (r"false", None),
    /* 27 */
    (
        r"[-+]?(?:0|[1-9](?:[0-9]|_[0-9])*)(?:[eE][-+]?[0-9](?:[0-9]|_[0-9])*|(?:\.[0-9](?:[0-9]|_[0-9])*(?:[eE][-+]?[0-9](?:[0-9]|_[0-9])*)?))",
        None,
    ),
    /* 28 */ (r"[-+]?(nan|inf)", None),
    /* 29 */
    (
        r"[0-9]{4}-[0-9]{2}-[0-9]{2}[Tt ][0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?([Zz]|[-+][0-9]{2}(:[0-9]{2})?)?",
        None,
    ),
    /* 30 */
    (
        r"[0-9]{4}-[0-9]{2}-[0-9]{2}[Tt ][0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?[Zz]?",
        None,
    ),
    /* 31 */ (r"[0-9]{4}-[0-9]{2}-[0-9]{2}", None),
    /* 32 */ (r"[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?", None),
    /* 33 */ (r",", None),
    /* 34 */ (r"\u{5B}\u{5B}", None),
    /* 35 */ (r"\u{5D}\u{5D}", None),
    /* 36 */ (r"\u{5B}", None),
    /* 37 */ (r"\u{5D}", None),
    /* 38 */ (r"\u{7B}", None),
    /* 39 */ (r"\u{7D}", None),
    /* 40 */ (r"0|[1-9]([0-9]|_[0-9])*", None),
    /* 41 */
    (
        r"[-_A-Za-z0-9\u{B2}\u{B3}\u{B9}\u{BC}-\u{BE}\u{C0}-\u{D6}\u{D8}-\u{F6}\u{F8}-\u{37D}\u{37F}-\u{1FFF}\u{200C}-\u{200D}\u{203F}-\u{2040}\u{2070}-\u{218F}\u{2460}-\u{24FF}\u{2C00}-\u{2FEF}\u{3001}-\u{D7FF}\u{F900}-\u{FDCF}\u{FDF0}-\u{FFFD}\u{10000}-\u{EFFFF}]+",
        None,
    ),
    /* 42 */ (r"\.", None),
    /* 43 */ (r"\u{22}{3}", None),
    /* 44 */ (r"\u{22}{3,5}", None),
    /* 45 */ (r"\u{22}{1,2}", None),
    /* 46 */ (r"\u{22}", None),
    /* 47 */ (r"\u{27}{3}", None),
    /* 48 */ (r"\u{27}{3,5}(?:\r?\n)?", None),
    /* 49 */ (r"\u{27}{1,2}", None),
    /* 50 */ (r"\u{27}", None),
    /* 51 */ (r"[ \t\u{21}\u{23}-\u{5B}\u{5D}-\u{7E}]+", None),
    /* 52 */ (r"\u{2D}", None),
    /* 53 */ (r"\u{2B}", None),
    /* 54 */ (ERROR_TOKEN, None),
];

pub const TERMINAL_NAMES: &[&str; 55] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "Newline0",
    /*  6 */ "WsNewline",
    /*  7 */ "NonAscii",
    /*  8 */ "KeyValSep",
    /*  9 */ "Escape",
    /* 10 */ "B",
    /* 11 */ "F",
    /* 12 */ "N",
    /* 13 */ "R",
    /* 14 */ "T",
    /* 15 */ "Unicode4",
    /* 16 */ "Unicode8",
    /* 17 */ "MLBEscapedNL",
    /* 18 */ "LiteralCharNoApostrophe",
    /* 19 */ "HexPrefix",
    /* 20 */ "OctPrefix",
    /* 21 */ "BinPrefix",
    /* 22 */ "HexIntContent",
    /* 23 */ "OctIntContent",
    /* 24 */ "BinIntContent",
    /* 25 */ "True",
    /* 26 */ "False",
    /* 27 */ "NormalFloat",
    /* 28 */ "SpecialFloat",
    /* 29 */ "OffsetDateTime",
    /* 30 */ "LocalDateTime",
    /* 31 */ "LocalDate",
    /* 32 */ "LocalTime",
    /* 33 */ "ArraySep",
    /* 34 */ "ArrayTableOpen",
    /* 35 */ "ArrayTableClose",
    /* 36 */ "ArrayOpen",
    /* 37 */ "ArrayClose",
    /* 38 */ "InlineTableOpen",
    /* 39 */ "InlineTableClose",
    /* 40 */ "UnsignedDecInt",
    /* 41 */ "UnquotedKey",
    /* 42 */ "DotSep",
    /* 43 */ "MLBasicStringStart",
    /* 44 */ "MLBasicStringEnd",
    /* 45 */ "MLBQuotes",
    /* 46 */ "QuotationMark",
    /* 47 */ "MLLiteralStringStart",
    /* 48 */ "MLLiteralStringEnd",
    /* 49 */ "MLLQuotes",
    /* 50 */ "Apostrophe",
    /* 51 */ "AsciiNoEscape",
    /* 52 */ "Minus",
    /* 53 */ "Plus",
    /* 54 */ "Error",
];

/* SCANNER_0: "INITIAL" */
const SCANNER_0: (&[&str; 5], &[TerminalIndex; 14]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ NEW_LINE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ r"#.*(\r\n|\r|\n)",
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[
        8,  /* KeyValSep */
        33, /* ArraySep */
        34, /* ArrayTableOpen */
        35, /* ArrayTableClose */
        36, /* ArrayOpen */
        37, /* ArrayClose */
        38, /* InlineTableOpen */
        39, /* InlineTableClose */
        41, /* UnquotedKey */
        42, /* DotSep */
        43, /* MLBasicStringStart */
        46, /* QuotationMark */
        47, /* MLLiteralStringStart */
        50, /* Apostrophe */
    ],
);

/* SCANNER_1: "Esc" */
const SCANNER_1: (&[&str; 5], &[TerminalIndex; 11]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ UNMATCHABLE_TOKEN,
        /*  2 */ UNMATCHABLE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[
        6,  /* WsNewline */
        9,  /* Escape */
        10, /* B */
        11, /* F */
        12, /* N */
        13, /* R */
        14, /* T */
        15, /* Unicode4 */
        16, /* Unicode8 */
        46, /* QuotationMark */
        51, /* AsciiNoEscape */
    ],
);

/* SCANNER_2: "Val" */
const SCANNER_2: (&[&str; 5], &[TerminalIndex; 25]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ NEW_LINE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ r"#.*(\r\n|\r|\n)",
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[
        8,  /* KeyValSep */
        19, /* HexPrefix */
        20, /* OctPrefix */
        21, /* BinPrefix */
        25, /* True */
        26, /* False */
        27, /* NormalFloat */
        28, /* SpecialFloat */
        29, /* OffsetDateTime */
        30, /* LocalDateTime */
        31, /* LocalDate */
        32, /* LocalTime */
        33, /* ArraySep */
        36, /* ArrayOpen */
        37, /* ArrayClose */
        38, /* InlineTableOpen */
        39, /* InlineTableClose */
        40, /* UnsignedDecInt */
        42, /* DotSep */
        43, /* MLBasicStringStart */
        46, /* QuotationMark */
        47, /* MLLiteralStringStart */
        50, /* Apostrophe */
        52, /* Minus */
        53, /* Plus */
    ],
);

/* SCANNER_3: "BString" */
const SCANNER_3: (&[&str; 5], &[TerminalIndex; 4]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ UNMATCHABLE_TOKEN,
        /*  2 */ UNMATCHABLE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[
        7,  /* NonAscii */
        9,  /* Escape */
        46, /* QuotationMark */
        51, /* AsciiNoEscape */
    ],
);

/* SCANNER_4: "MLBString" */
const SCANNER_4: (&[&str; 5], &[TerminalIndex; 7]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ UNMATCHABLE_TOKEN,
        /*  2 */ UNMATCHABLE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[
        5,  /* Newline0 */
        7,  /* NonAscii */
        9,  /* Escape */
        17, /* MLBEscapedNL */
        44, /* MLBasicStringEnd */
        45, /* MLBQuotes */
        51, /* AsciiNoEscape */
    ],
);

/* SCANNER_5: "LString" */
const SCANNER_5: (&[&str; 5], &[TerminalIndex; 3]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ UNMATCHABLE_TOKEN,
        /*  2 */ UNMATCHABLE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[
        7,  /* NonAscii */
        18, /* LiteralCharNoApostrophe */
        50, /* Apostrophe */
    ],
);

/* SCANNER_6: "MLLString" */
const SCANNER_6: (&[&str; 5], &[TerminalIndex; 5]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ UNMATCHABLE_TOKEN,
        /*  2 */ UNMATCHABLE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[
        5,  /* Newline0 */
        7,  /* NonAscii */
        18, /* LiteralCharNoApostrophe */
        48, /* MLLiteralStringEnd */
        49, /* MLLQuotes */
    ],
);

/* SCANNER_7: "HexInt" */
const SCANNER_7: (&[&str; 5], &[TerminalIndex; 1]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ UNMATCHABLE_TOKEN,
        /*  2 */ UNMATCHABLE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[22 /* HexIntContent */],
);

/* SCANNER_8: "OctInt" */
const SCANNER_8: (&[&str; 5], &[TerminalIndex; 1]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ UNMATCHABLE_TOKEN,
        /*  2 */ UNMATCHABLE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[23 /* OctIntContent */],
);

/* SCANNER_9: "BinInt" */
const SCANNER_9: (&[&str; 5], &[TerminalIndex; 1]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ UNMATCHABLE_TOKEN,
        /*  2 */ UNMATCHABLE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[24 /* BinIntContent */],
);

const MAX_K: usize = 2;

pub const NON_TERMINALS: &[&str; 102] = &[
    /*   0 */ "Apostrophe",
    /*   1 */ "Array",
    /*   2 */ "ArrayClose",
    /*   3 */ "ArrayOpen",
    /*   4 */ "ArrayOpt",
    /*   5 */ "ArraySep",
    /*   6 */ "ArrayTable",
    /*   7 */ "ArrayTableClose",
    /*   8 */ "ArrayTableOpen",
    /*   9 */ "ArrayValues",
    /*  10 */ "ArrayValuesSuffix",
    /*  11 */ "ArrayValuesSuffix0",
    /*  12 */ "AsciiNoEscape",
    /*  13 */ "BasicChar",
    /*  14 */ "BasicString",
    /*  15 */ "BasicStringList",
    /*  16 */ "BasicUnescaped",
    /*  17 */ "BinInt",
    /*  18 */ "BinIntContent",
    /*  19 */ "BinPrefix",
    /*  20 */ "Boolean",
    /*  21 */ "DateTime",
    /*  22 */ "DecInt",
    /*  23 */ "DecIntOpt",
    /*  24 */ "DecIntOptGroup",
    /*  25 */ "DotSep",
    /*  26 */ "Escape",
    /*  27 */ "EscapeSeqChar",
    /*  28 */ "Escaped",
    /*  29 */ "Expression",
    /*  30 */ "Float",
    /*  31 */ "HexInt",
    /*  32 */ "HexIntContent",
    /*  33 */ "HexPrefix",
    /*  34 */ "InlineTable",
    /*  35 */ "InlineTableClose",
    /*  36 */ "InlineTableKeyVals",
    /*  37 */ "InlineTableKeyValsOpt",
    /*  38 */ "InlineTableOpen",
    /*  39 */ "InlineTableOpt",
    /*  40 */ "InlineTableOpt0",
    /*  41 */ "InlineTableSep",
    /*  42 */ "Integer",
    /*  43 */ "Key",
    /*  44 */ "KeyList",
    /*  45 */ "KeySuffix",
    /*  46 */ "KeyVal",
    /*  47 */ "KeyValSep",
    /*  48 */ "LiteralChar",
    /*  49 */ "LiteralCharNoApostrophe",
    /*  50 */ "LiteralString",
    /*  51 */ "LiteralStringList",
    /*  52 */ "LocalDate",
    /*  53 */ "LocalDateTime",
    /*  54 */ "LocalTime",
    /*  55 */ "MLBChar",
    /*  56 */ "MLBContent",
    /*  57 */ "MLBContentList",
    /*  58 */ "MLBContentList1",
    /*  59 */ "MLBEscapedNL",
    /*  60 */ "MLBQuotes",
    /*  61 */ "MLBUnescaped",
    /*  62 */ "MLBasicBody",
    /*  63 */ "MLBasicBodyList",
    /*  64 */ "MLBasicString",
    /*  65 */ "MLBasicStringEnd",
    /*  66 */ "MLBasicStringStart",
    /*  67 */ "MLLContent",
    /*  68 */ "MLLContentList",
    /*  69 */ "MLLContentList1",
    /*  70 */ "MLLQuotes",
    /*  71 */ "MLLiteralBody",
    /*  72 */ "MLLiteralBodyList",
    /*  73 */ "MLLiteralString",
    /*  74 */ "MLLiteralStringEnd",
    /*  75 */ "MLLiteralStringStart",
    /*  76 */ "Minus",
    /*  77 */ "Newline",
    /*  78 */ "NonAscii",
    /*  79 */ "NormalFloat",
    /*  80 */ "Numeric",
    /*  81 */ "OctInt",
    /*  82 */ "OctIntContent",
    /*  83 */ "OctPrefix",
    /*  84 */ "OffsetDateTime",
    /*  85 */ "ParolToml",
    /*  86 */ "ParolTomlList",
    /*  87 */ "Plus",
    /*  88 */ "QuotationMark",
    /*  89 */ "QuotedKey",
    /*  90 */ "SimpleKey",
    /*  91 */ "SpecialFloat",
    /*  92 */ "StdTable",
    /*  93 */ "StdTableClose",
    /*  94 */ "StdTableOpen",
    /*  95 */ "Table",
    /*  96 */ "Unicode4",
    /*  97 */ "Unicode8",
    /*  98 */ "UnquotedKey",
    /*  99 */ "UnsignedDecInt",
    /* 100 */ "Val",
    /* 101 */ "WsNewline",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 102] = &[
    /* 0 - "Apostrophe" */
    LookaheadDFA {
        prod0: 154,
        transitions: &[],
        k: 0,
    },
    /* 1 - "Array" */
    LookaheadDFA {
        prod0: 114,
        transitions: &[],
        k: 0,
    },
    /* 2 - "ArrayClose" */
    LookaheadDFA {
        prod0: 129,
        transitions: &[],
        k: 0,
    },
    /* 3 - "ArrayOpen" */
    LookaheadDFA {
        prod0: 128,
        transitions: &[],
        k: 0,
    },
    /* 4 - "ArrayOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 19, 1, 115),
            Trans(0, 20, 1, 115),
            Trans(0, 21, 1, 115),
            Trans(0, 25, 1, 115),
            Trans(0, 26, 1, 115),
            Trans(0, 27, 1, 115),
            Trans(0, 28, 1, 115),
            Trans(0, 29, 1, 115),
            Trans(0, 30, 1, 115),
            Trans(0, 31, 1, 115),
            Trans(0, 32, 1, 115),
            Trans(0, 36, 1, 115),
            Trans(0, 37, 2, 116),
            Trans(0, 38, 1, 115),
            Trans(0, 40, 1, 115),
            Trans(0, 43, 1, 115),
            Trans(0, 46, 1, 115),
            Trans(0, 47, 1, 115),
            Trans(0, 50, 1, 115),
            Trans(0, 52, 1, 115),
            Trans(0, 53, 1, 115),
        ],
        k: 1,
    },
    /* 5 - "ArraySep" */
    LookaheadDFA {
        prod0: 122,
        transitions: &[],
        k: 0,
    },
    /* 6 - "ArrayTable" */
    LookaheadDFA {
        prod0: 143,
        transitions: &[],
        k: 0,
    },
    /* 7 - "ArrayTableClose" */
    LookaheadDFA {
        prod0: 127,
        transitions: &[],
        k: 0,
    },
    /* 8 - "ArrayTableOpen" */
    LookaheadDFA {
        prod0: 126,
        transitions: &[],
        k: 0,
    },
    /* 9 - "ArrayValues" */
    LookaheadDFA {
        prod0: 117,
        transitions: &[],
        k: 0,
    },
    /* 10 - "ArrayValuesSuffix" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 19, 1, 120),
            Trans(0, 20, 1, 120),
            Trans(0, 21, 1, 120),
            Trans(0, 25, 1, 120),
            Trans(0, 26, 1, 120),
            Trans(0, 27, 1, 120),
            Trans(0, 28, 1, 120),
            Trans(0, 29, 1, 120),
            Trans(0, 30, 1, 120),
            Trans(0, 31, 1, 120),
            Trans(0, 32, 1, 120),
            Trans(0, 36, 1, 120),
            Trans(0, 37, 2, 121),
            Trans(0, 38, 1, 120),
            Trans(0, 40, 1, 120),
            Trans(0, 43, 1, 120),
            Trans(0, 46, 1, 120),
            Trans(0, 47, 1, 120),
            Trans(0, 50, 1, 120),
            Trans(0, 52, 1, 120),
            Trans(0, 53, 1, 120),
        ],
        k: 1,
    },
    /* 11 - "ArrayValuesSuffix0" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 33, 1, 118), Trans(0, 37, 2, 119)],
        k: 1,
    },
    /* 12 - "AsciiNoEscape" */
    LookaheadDFA {
        prod0: 155,
        transitions: &[],
        k: 0,
    },
    /* 13 - "BasicChar" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 7, 1, 33), Trans(0, 9, 2, 34), Trans(0, 51, 1, 33)],
        k: 1,
    },
    /* 14 - "BasicString" */
    LookaheadDFA {
        prod0: 30,
        transitions: &[],
        k: 0,
    },
    /* 15 - "BasicStringList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 7, 1, 31),
            Trans(0, 9, 1, 31),
            Trans(0, 46, 2, 32),
            Trans(0, 51, 1, 31),
        ],
        k: 1,
    },
    /* 16 - "BasicUnescaped" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 7, 2, 36), Trans(0, 51, 1, 35)],
        k: 1,
    },
    /* 17 - "BinInt" */
    LookaheadDFA {
        prod0: 98,
        transitions: &[],
        k: 0,
    },
    /* 18 - "BinIntContent" */
    LookaheadDFA {
        prod0: 99,
        transitions: &[],
        k: 0,
    },
    /* 19 - "BinPrefix" */
    LookaheadDFA {
        prod0: 88,
        transitions: &[],
        k: 0,
    },
    /* 20 - "Boolean" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 25, 1, 100), Trans(0, 26, 2, 101)],
        k: 1,
    },
    /* 21 - "DateTime" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 29, 1, 106),
            Trans(0, 30, 2, 107),
            Trans(0, 31, 3, 108),
            Trans(0, 32, 4, 109),
        ],
        k: 1,
    },
    /* 22 - "DecInt" */
    LookaheadDFA {
        prod0: 89,
        transitions: &[],
        k: 0,
    },
    /* 23 - "DecIntOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 40, 2, 93),
            Trans(0, 52, 1, 90),
            Trans(0, 53, 1, 90),
        ],
        k: 1,
    },
    /* 24 - "DecIntOptGroup" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 52, 2, 92), Trans(0, 53, 1, 91)],
        k: 1,
    },
    /* 25 - "DotSep" */
    LookaheadDFA {
        prod0: 146,
        transitions: &[],
        k: 0,
    },
    /* 26 - "Escape" */
    LookaheadDFA {
        prod0: 38,
        transitions: &[],
        k: 0,
    },
    /* 27 - "EscapeSeqChar" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 10, 48),
            Trans(0, 9, 2, 40),
            Trans(0, 10, 3, 41),
            Trans(0, 11, 4, 42),
            Trans(0, 12, 5, 43),
            Trans(0, 13, 6, 44),
            Trans(0, 14, 7, 45),
            Trans(0, 15, 8, 46),
            Trans(0, 16, 9, 47),
            Trans(0, 46, 1, 39),
            Trans(0, 51, 11, 49),
        ],
        k: 1,
    },
    /* 28 - "Escaped" */
    LookaheadDFA {
        prod0: 37,
        transitions: &[],
        k: 0,
    },
    /* 29 - "Expression" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 34, 2, 4),
            Trans(0, 36, 2, 4),
            Trans(0, 41, 1, 3),
            Trans(0, 46, 1, 3),
            Trans(0, 50, 1, 3),
        ],
        k: 1,
    },
    /* 30 - "Float" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 27, 1, 102), Trans(0, 28, 2, 103)],
        k: 1,
    },
    /* 31 - "HexInt" */
    LookaheadDFA {
        prod0: 94,
        transitions: &[],
        k: 0,
    },
    /* 32 - "HexIntContent" */
    LookaheadDFA {
        prod0: 95,
        transitions: &[],
        k: 0,
    },
    /* 33 - "HexPrefix" */
    LookaheadDFA {
        prod0: 86,
        transitions: &[],
        k: 0,
    },
    /* 34 - "InlineTable" */
    LookaheadDFA {
        prod0: 132,
        transitions: &[],
        k: 0,
    },
    /* 35 - "InlineTableClose" */
    LookaheadDFA {
        prod0: 138,
        transitions: &[],
        k: 0,
    },
    /* 36 - "InlineTableKeyVals" */
    LookaheadDFA {
        prod0: 140,
        transitions: &[],
        k: 0,
    },
    /* 37 - "InlineTableKeyValsOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 33, 1, -1),
            Trans(0, 39, 3, -1),
            Trans(1, 39, 4, 142),
            Trans(1, 41, 2, 141),
            Trans(1, 46, 2, 141),
            Trans(1, 50, 2, 141),
            Trans(3, 0, 4, 142),
            Trans(3, 33, 4, 142),
            Trans(3, 34, 4, 142),
            Trans(3, 36, 4, 142),
            Trans(3, 37, 4, 142),
            Trans(3, 39, 4, 142),
            Trans(3, 41, 4, 142),
            Trans(3, 46, 4, 142),
            Trans(3, 50, 4, 142),
        ],
        k: 2,
    },
    /* 38 - "InlineTableOpen" */
    LookaheadDFA {
        prod0: 137,
        transitions: &[],
        k: 0,
    },
    /* 39 - "InlineTableOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 33, 2, 136),
            Trans(0, 39, 2, 136),
            Trans(0, 41, 1, 135),
            Trans(0, 46, 1, 135),
            Trans(0, 50, 1, 135),
        ],
        k: 1,
    },
    /* 40 - "InlineTableOpt0" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 33, 1, 133), Trans(0, 39, 2, 134)],
        k: 1,
    },
    /* 41 - "InlineTableSep" */
    LookaheadDFA {
        prod0: 139,
        transitions: &[],
        k: 0,
    },
    /* 42 - "Integer" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 19, 2, 83),
            Trans(0, 20, 3, 84),
            Trans(0, 21, 4, 85),
            Trans(0, 40, 1, 82),
            Trans(0, 52, 1, 82),
            Trans(0, 53, 1, 82),
        ],
        k: 1,
    },
    /* 43 - "Key" */
    LookaheadDFA {
        prod0: 9,
        transitions: &[],
        k: 0,
    },
    /* 44 - "KeyList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 8, 2, 13),
            Trans(0, 35, 2, 13),
            Trans(0, 37, 2, 13),
            Trans(0, 42, 1, 12),
        ],
        k: 1,
    },
    /* 45 - "KeySuffix" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 8, 1, 10),
            Trans(0, 35, 1, 10),
            Trans(0, 37, 1, 10),
            Trans(0, 42, 2, 11),
        ],
        k: 1,
    },
    /* 46 - "KeyVal" */
    LookaheadDFA {
        prod0: 8,
        transitions: &[],
        k: 0,
    },
    /* 47 - "KeyValSep" */
    LookaheadDFA {
        prod0: 18,
        transitions: &[],
        k: 0,
    },
    /* 48 - "LiteralChar" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 7, 2, 71), Trans(0, 18, 1, 70)],
        k: 1,
    },
    /* 49 - "LiteralCharNoApostrophe" */
    LookaheadDFA {
        prod0: 72,
        transitions: &[],
        k: 0,
    },
    /* 50 - "LiteralString" */
    LookaheadDFA {
        prod0: 67,
        transitions: &[],
        k: 0,
    },
    /* 51 - "LiteralStringList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 7, 1, 68), Trans(0, 18, 1, 68), Trans(0, 50, 2, 69)],
        k: 1,
    },
    /* 52 - "LocalDate" */
    LookaheadDFA {
        prod0: 112,
        transitions: &[],
        k: 0,
    },
    /* 53 - "LocalDateTime" */
    LookaheadDFA {
        prod0: 111,
        transitions: &[],
        k: 0,
    },
    /* 54 - "LocalTime" */
    LookaheadDFA {
        prod0: 113,
        transitions: &[],
        k: 0,
    },
    /* 55 - "MLBChar" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 7, 1, 62), Trans(0, 9, 2, 63), Trans(0, 51, 1, 62)],
        k: 1,
    },
    /* 56 - "MLBContent" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 2, 60),
            Trans(0, 7, 1, 59),
            Trans(0, 9, 1, 59),
            Trans(0, 17, 3, 61),
            Trans(0, 51, 1, 59),
        ],
        k: 1,
    },
    /* 57 - "MLBContentList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 1, 56),
            Trans(0, 7, 1, 56),
            Trans(0, 9, 1, 56),
            Trans(0, 17, 1, 56),
            Trans(0, 44, 2, 57),
            Trans(0, 45, 2, 57),
            Trans(0, 51, 1, 56),
        ],
        k: 1,
    },
    /* 58 - "MLBContentList1" */
    LookaheadDFA {
        prod0: 58,
        transitions: &[],
        k: 0,
    },
    /* 59 - "MLBEscapedNL" */
    LookaheadDFA {
        prod0: 66,
        transitions: &[],
        k: 0,
    },
    /* 60 - "MLBQuotes" */
    LookaheadDFA {
        prod0: 149,
        transitions: &[],
        k: 0,
    },
    /* 61 - "MLBUnescaped" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 7, 2, 65), Trans(0, 51, 1, 64)],
        k: 1,
    },
    /* 62 - "MLBasicBody" */
    LookaheadDFA {
        prod0: 53,
        transitions: &[],
        k: 0,
    },
    /* 63 - "MLBasicBodyList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 44, 2, 55), Trans(0, 45, 1, 54)],
        k: 1,
    },
    /* 64 - "MLBasicString" */
    LookaheadDFA {
        prod0: 52,
        transitions: &[],
        k: 0,
    },
    /* 65 - "MLBasicStringEnd" */
    LookaheadDFA {
        prod0: 148,
        transitions: &[],
        k: 0,
    },
    /* 66 - "MLBasicStringStart" */
    LookaheadDFA {
        prod0: 147,
        transitions: &[],
        k: 0,
    },
    /* 67 - "MLLContent" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 5, 2, 81), Trans(0, 7, 1, 80), Trans(0, 18, 1, 80)],
        k: 1,
    },
    /* 68 - "MLLContentList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 1, 77),
            Trans(0, 7, 1, 77),
            Trans(0, 18, 1, 77),
            Trans(0, 48, 2, 78),
            Trans(0, 49, 2, 78),
        ],
        k: 1,
    },
    /* 69 - "MLLContentList1" */
    LookaheadDFA {
        prod0: 79,
        transitions: &[],
        k: 0,
    },
    /* 70 - "MLLQuotes" */
    LookaheadDFA {
        prod0: 153,
        transitions: &[],
        k: 0,
    },
    /* 71 - "MLLiteralBody" */
    LookaheadDFA {
        prod0: 74,
        transitions: &[],
        k: 0,
    },
    /* 72 - "MLLiteralBodyList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 48, 2, 76), Trans(0, 49, 1, 75)],
        k: 1,
    },
    /* 73 - "MLLiteralString" */
    LookaheadDFA {
        prod0: 73,
        transitions: &[],
        k: 0,
    },
    /* 74 - "MLLiteralStringEnd" */
    LookaheadDFA {
        prod0: 152,
        transitions: &[],
        k: 0,
    },
    /* 75 - "MLLiteralStringStart" */
    LookaheadDFA {
        prod0: 151,
        transitions: &[],
        k: 0,
    },
    /* 76 - "Minus" */
    LookaheadDFA {
        prod0: 156,
        transitions: &[],
        k: 0,
    },
    /* 77 - "Newline" */
    LookaheadDFA {
        prod0: 5,
        transitions: &[],
        k: 0,
    },
    /* 78 - "NonAscii" */
    LookaheadDFA {
        prod0: 7,
        transitions: &[],
        k: 0,
    },
    /* 79 - "NormalFloat" */
    LookaheadDFA {
        prod0: 104,
        transitions: &[],
        k: 0,
    },
    /* 80 - "Numeric" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 19, 2, 29),
            Trans(0, 20, 2, 29),
            Trans(0, 21, 2, 29),
            Trans(0, 27, 1, 28),
            Trans(0, 28, 1, 28),
            Trans(0, 40, 2, 29),
            Trans(0, 52, 2, 29),
            Trans(0, 53, 2, 29),
        ],
        k: 1,
    },
    /* 81 - "OctInt" */
    LookaheadDFA {
        prod0: 96,
        transitions: &[],
        k: 0,
    },
    /* 82 - "OctIntContent" */
    LookaheadDFA {
        prod0: 97,
        transitions: &[],
        k: 0,
    },
    /* 83 - "OctPrefix" */
    LookaheadDFA {
        prod0: 87,
        transitions: &[],
        k: 0,
    },
    /* 84 - "OffsetDateTime" */
    LookaheadDFA {
        prod0: 110,
        transitions: &[],
        k: 0,
    },
    /* 85 - "ParolToml" */
    LookaheadDFA {
        prod0: 0,
        transitions: &[],
        k: 0,
    },
    /* 86 - "ParolTomlList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 2),
            Trans(0, 34, 1, 1),
            Trans(0, 36, 1, 1),
            Trans(0, 41, 1, 1),
            Trans(0, 46, 1, 1),
            Trans(0, 50, 1, 1),
        ],
        k: 1,
    },
    /* 87 - "Plus" */
    LookaheadDFA {
        prod0: 157,
        transitions: &[],
        k: 0,
    },
    /* 88 - "QuotationMark" */
    LookaheadDFA {
        prod0: 150,
        transitions: &[],
        k: 0,
    },
    /* 89 - "QuotedKey" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 46, 1, 16), Trans(0, 50, 2, 17)],
        k: 1,
    },
    /* 90 - "SimpleKey" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 41, 2, 15),
            Trans(0, 46, 1, 14),
            Trans(0, 50, 1, 14),
        ],
        k: 1,
    },
    /* 91 - "SpecialFloat" */
    LookaheadDFA {
        prod0: 105,
        transitions: &[],
        k: 0,
    },
    /* 92 - "StdTable" */
    LookaheadDFA {
        prod0: 125,
        transitions: &[],
        k: 0,
    },
    /* 93 - "StdTableClose" */
    LookaheadDFA {
        prod0: 131,
        transitions: &[],
        k: 0,
    },
    /* 94 - "StdTableOpen" */
    LookaheadDFA {
        prod0: 130,
        transitions: &[],
        k: 0,
    },
    /* 95 - "Table" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 34, 2, 124), Trans(0, 36, 1, 123)],
        k: 1,
    },
    /* 96 - "Unicode4" */
    LookaheadDFA {
        prod0: 50,
        transitions: &[],
        k: 0,
    },
    /* 97 - "Unicode8" */
    LookaheadDFA {
        prod0: 51,
        transitions: &[],
        k: 0,
    },
    /* 98 - "UnquotedKey" */
    LookaheadDFA {
        prod0: 145,
        transitions: &[],
        k: 0,
    },
    /* 99 - "UnsignedDecInt" */
    LookaheadDFA {
        prod0: 144,
        transitions: &[],
        k: 0,
    },
    /* 100 - "Val" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 19, 5, 23),
            Trans(0, 20, 5, 23),
            Trans(0, 21, 5, 23),
            Trans(0, 25, 1, 19),
            Trans(0, 26, 1, 19),
            Trans(0, 27, 5, 23),
            Trans(0, 28, 5, 23),
            Trans(0, 29, 4, 22),
            Trans(0, 30, 4, 22),
            Trans(0, 31, 4, 22),
            Trans(0, 32, 4, 22),
            Trans(0, 36, 2, 20),
            Trans(0, 38, 3, 21),
            Trans(0, 40, 5, 23),
            Trans(0, 43, 7, 25),
            Trans(0, 46, 6, 24),
            Trans(0, 47, 9, 27),
            Trans(0, 50, 8, 26),
            Trans(0, 52, 5, 23),
            Trans(0, 53, 5, 23),
        ],
        k: 1,
    },
    /* 101 - "WsNewline" */
    LookaheadDFA {
        prod0: 6,
        transitions: &[],
        k: 0,
    },
];

pub const PRODUCTIONS: &[Production; 158] = &[
    // 0 - ParolToml: ParolTomlList /* Vec */;
    Production {
        lhs: 85,
        production: &[ParseType::N(86)],
    },
    // 1 - ParolTomlList: Expression ParolTomlList;
    Production {
        lhs: 86,
        production: &[ParseType::N(86), ParseType::N(29)],
    },
    // 2 - ParolTomlList: ;
    Production {
        lhs: 86,
        production: &[],
    },
    // 3 - Expression: KeyVal;
    Production {
        lhs: 29,
        production: &[ParseType::N(46)],
    },
    // 4 - Expression: Table;
    Production {
        lhs: 29,
        production: &[ParseType::N(95)],
    },
    // 5 - Newline: "\r?\n";
    Production {
        lhs: 77,
        production: &[ParseType::T(5)],
    },
    // 6 - WsNewline: "[ \t]*\r?\n";
    Production {
        lhs: 101,
        production: &[ParseType::T(6)],
    },
    // 7 - NonAscii: "[\u{80}-\u{D7FF}\u{E000}-\u{10FFFF}]";
    Production {
        lhs: 78,
        production: &[ParseType::T(7)],
    },
    // 8 - KeyVal: Key KeyValSep Push(2) Val Pop;
    Production {
        lhs: 46,
        production: &[
            ParseType::Pop,
            ParseType::N(100),
            ParseType::Push(2),
            ParseType::N(47),
            ParseType::N(43),
        ],
    },
    // 9 - Key: SimpleKey KeySuffix;
    Production {
        lhs: 43,
        production: &[ParseType::N(45), ParseType::N(90)],
    },
    // 10 - KeySuffix: ;
    Production {
        lhs: 45,
        production: &[],
    },
    // 11 - KeySuffix: DotSep SimpleKey KeyList /* Vec */;
    Production {
        lhs: 45,
        production: &[ParseType::N(44), ParseType::N(90), ParseType::N(25)],
    },
    // 12 - KeyList: DotSep SimpleKey KeyList;
    Production {
        lhs: 44,
        production: &[ParseType::N(44), ParseType::N(90), ParseType::N(25)],
    },
    // 13 - KeyList: ;
    Production {
        lhs: 44,
        production: &[],
    },
    // 14 - SimpleKey: QuotedKey;
    Production {
        lhs: 90,
        production: &[ParseType::N(89)],
    },
    // 15 - SimpleKey: UnquotedKey;
    Production {
        lhs: 90,
        production: &[ParseType::N(98)],
    },
    // 16 - QuotedKey: BasicString;
    Production {
        lhs: 89,
        production: &[ParseType::N(14)],
    },
    // 17 - QuotedKey: LiteralString;
    Production {
        lhs: 89,
        production: &[ParseType::N(50)],
    },
    // 18 - KeyValSep: "=";
    Production {
        lhs: 47,
        production: &[ParseType::T(8)],
    },
    // 19 - Val: Boolean;
    Production {
        lhs: 100,
        production: &[ParseType::N(20)],
    },
    // 20 - Val: Array;
    Production {
        lhs: 100,
        production: &[ParseType::N(1)],
    },
    // 21 - Val: InlineTable;
    Production {
        lhs: 100,
        production: &[ParseType::N(34)],
    },
    // 22 - Val: DateTime;
    Production {
        lhs: 100,
        production: &[ParseType::N(21)],
    },
    // 23 - Val: Numeric;
    Production {
        lhs: 100,
        production: &[ParseType::N(80)],
    },
    // 24 - Val: BasicString;
    Production {
        lhs: 100,
        production: &[ParseType::N(14)],
    },
    // 25 - Val: MLBasicString;
    Production {
        lhs: 100,
        production: &[ParseType::N(64)],
    },
    // 26 - Val: LiteralString;
    Production {
        lhs: 100,
        production: &[ParseType::N(50)],
    },
    // 27 - Val: MLLiteralString;
    Production {
        lhs: 100,
        production: &[ParseType::N(73)],
    },
    // 28 - Numeric: Float;
    Production {
        lhs: 80,
        production: &[ParseType::N(30)],
    },
    // 29 - Numeric: Integer;
    Production {
        lhs: 80,
        production: &[ParseType::N(42)],
    },
    // 30 - BasicString: QuotationMark Push(3) BasicStringList /* Vec */ Pop QuotationMark;
    Production {
        lhs: 14,
        production: &[
            ParseType::N(88),
            ParseType::Pop,
            ParseType::N(15),
            ParseType::Push(3),
            ParseType::N(88),
        ],
    },
    // 31 - BasicStringList: BasicChar BasicStringList;
    Production {
        lhs: 15,
        production: &[ParseType::N(15), ParseType::N(13)],
    },
    // 32 - BasicStringList: ;
    Production {
        lhs: 15,
        production: &[],
    },
    // 33 - BasicChar: BasicUnescaped;
    Production {
        lhs: 13,
        production: &[ParseType::N(16)],
    },
    // 34 - BasicChar: Push(1) Escaped Pop;
    Production {
        lhs: 13,
        production: &[ParseType::Pop, ParseType::N(28), ParseType::Push(1)],
    },
    // 35 - BasicUnescaped: AsciiNoEscape;
    Production {
        lhs: 16,
        production: &[ParseType::N(12)],
    },
    // 36 - BasicUnescaped: NonAscii;
    Production {
        lhs: 16,
        production: &[ParseType::N(78)],
    },
    // 37 - Escaped: Escape EscapeSeqChar;
    Production {
        lhs: 28,
        production: &[ParseType::N(27), ParseType::N(26)],
    },
    // 38 - Escape: "\u{5C}";
    Production {
        lhs: 26,
        production: &[ParseType::T(9)],
    },
    // 39 - EscapeSeqChar: QuotationMark;
    Production {
        lhs: 27,
        production: &[ParseType::N(88)],
    },
    // 40 - EscapeSeqChar: Escape;
    Production {
        lhs: 27,
        production: &[ParseType::N(26)],
    },
    // 41 - EscapeSeqChar: "b";
    Production {
        lhs: 27,
        production: &[ParseType::T(10)],
    },
    // 42 - EscapeSeqChar: "f";
    Production {
        lhs: 27,
        production: &[ParseType::T(11)],
    },
    // 43 - EscapeSeqChar: "n";
    Production {
        lhs: 27,
        production: &[ParseType::T(12)],
    },
    // 44 - EscapeSeqChar: "r";
    Production {
        lhs: 27,
        production: &[ParseType::T(13)],
    },
    // 45 - EscapeSeqChar: "t";
    Production {
        lhs: 27,
        production: &[ParseType::T(14)],
    },
    // 46 - EscapeSeqChar: Unicode4;
    Production {
        lhs: 27,
        production: &[ParseType::N(96)],
    },
    // 47 - EscapeSeqChar: Unicode8;
    Production {
        lhs: 27,
        production: &[ParseType::N(97)],
    },
    // 48 - EscapeSeqChar: WsNewline;
    Production {
        lhs: 27,
        production: &[ParseType::N(101)],
    },
    // 49 - EscapeSeqChar: AsciiNoEscape;
    Production {
        lhs: 27,
        production: &[ParseType::N(12)],
    },
    // 50 - Unicode4: "u[0-9a-fA-F]{4}";
    Production {
        lhs: 96,
        production: &[ParseType::T(15)],
    },
    // 51 - Unicode8: "U[0-9a-fA-F]{8}";
    Production {
        lhs: 97,
        production: &[ParseType::T(16)],
    },
    // 52 - MLBasicString: MLBasicStringStart Push(4) MLBasicBody MLBasicStringEnd Pop;
    Production {
        lhs: 64,
        production: &[
            ParseType::Pop,
            ParseType::N(65),
            ParseType::N(62),
            ParseType::Push(4),
            ParseType::N(66),
        ],
    },
    // 53 - MLBasicBody: MLBContentList MLBasicBodyList /* Vec */;
    Production {
        lhs: 62,
        production: &[ParseType::N(63), ParseType::N(57)],
    },
    // 54 - MLBasicBodyList: MLBQuotes MLBContentList1 MLBasicBodyList;
    Production {
        lhs: 63,
        production: &[ParseType::N(63), ParseType::N(58), ParseType::N(60)],
    },
    // 55 - MLBasicBodyList: ;
    Production {
        lhs: 63,
        production: &[],
    },
    // 56 - MLBContentList: MLBContent MLBContentList;
    Production {
        lhs: 57,
        production: &[ParseType::N(57), ParseType::N(56)],
    },
    // 57 - MLBContentList: ;
    Production {
        lhs: 57,
        production: &[],
    },
    // 58 - MLBContentList1: MLBContent MLBContentList;
    Production {
        lhs: 58,
        production: &[ParseType::N(57), ParseType::N(56)],
    },
    // 59 - MLBContent: MLBChar;
    Production {
        lhs: 56,
        production: &[ParseType::N(55)],
    },
    // 60 - MLBContent: Newline;
    Production {
        lhs: 56,
        production: &[ParseType::N(77)],
    },
    // 61 - MLBContent: MLBEscapedNL;
    Production {
        lhs: 56,
        production: &[ParseType::N(59)],
    },
    // 62 - MLBChar: MLBUnescaped;
    Production {
        lhs: 55,
        production: &[ParseType::N(61)],
    },
    // 63 - MLBChar: Push(1) Escaped Pop;
    Production {
        lhs: 55,
        production: &[ParseType::Pop, ParseType::N(28), ParseType::Push(1)],
    },
    // 64 - MLBUnescaped: AsciiNoEscape;
    Production {
        lhs: 61,
        production: &[ParseType::N(12)],
    },
    // 65 - MLBUnescaped: NonAscii;
    Production {
        lhs: 61,
        production: &[ParseType::N(78)],
    },
    // 66 - MLBEscapedNL: "\u{5C}[ \t]*\r?\n([ \t]|\r?\n)*";
    Production {
        lhs: 59,
        production: &[ParseType::T(17)],
    },
    // 67 - LiteralString: Apostrophe^ /* Clipped */ Push(5) LiteralStringList /* Vec */ Pop Apostrophe^ /* Clipped */;
    Production {
        lhs: 50,
        production: &[
            ParseType::N(0),
            ParseType::Pop,
            ParseType::N(51),
            ParseType::Push(5),
            ParseType::N(0),
        ],
    },
    // 68 - LiteralStringList: LiteralChar LiteralStringList;
    Production {
        lhs: 51,
        production: &[ParseType::N(51), ParseType::N(48)],
    },
    // 69 - LiteralStringList: ;
    Production {
        lhs: 51,
        production: &[],
    },
    // 70 - LiteralChar: LiteralCharNoApostrophe;
    Production {
        lhs: 48,
        production: &[ParseType::N(49)],
    },
    // 71 - LiteralChar: NonAscii;
    Production {
        lhs: 48,
        production: &[ParseType::N(78)],
    },
    // 72 - LiteralCharNoApostrophe: "[\t\u{20}-\u{26}\u{28}-\u{7E}]+";
    Production {
        lhs: 49,
        production: &[ParseType::T(18)],
    },
    // 73 - MLLiteralString: MLLiteralStringStart^ /* Clipped */ Push(6) MLLiteralBody Pop;
    Production {
        lhs: 73,
        production: &[
            ParseType::Pop,
            ParseType::N(71),
            ParseType::Push(6),
            ParseType::N(75),
        ],
    },
    // 74 - MLLiteralBody: MLLContentList MLLiteralBodyList /* Vec */ MLLiteralStringEnd^ /* Clipped */;
    Production {
        lhs: 71,
        production: &[ParseType::N(74), ParseType::N(72), ParseType::N(68)],
    },
    // 75 - MLLiteralBodyList: MLLQuotes MLLContentList1 MLLiteralBodyList;
    Production {
        lhs: 72,
        production: &[ParseType::N(72), ParseType::N(69), ParseType::N(70)],
    },
    // 76 - MLLiteralBodyList: ;
    Production {
        lhs: 72,
        production: &[],
    },
    // 77 - MLLContentList: MLLContent MLLContentList;
    Production {
        lhs: 68,
        production: &[ParseType::N(68), ParseType::N(67)],
    },
    // 78 - MLLContentList: ;
    Production {
        lhs: 68,
        production: &[],
    },
    // 79 - MLLContentList1: MLLContent MLLContentList;
    Production {
        lhs: 69,
        production: &[ParseType::N(68), ParseType::N(67)],
    },
    // 80 - MLLContent: LiteralChar;
    Production {
        lhs: 67,
        production: &[ParseType::N(48)],
    },
    // 81 - MLLContent: Newline;
    Production {
        lhs: 67,
        production: &[ParseType::N(77)],
    },
    // 82 - Integer: DecInt;
    Production {
        lhs: 42,
        production: &[ParseType::N(22)],
    },
    // 83 - Integer: HexInt;
    Production {
        lhs: 42,
        production: &[ParseType::N(31)],
    },
    // 84 - Integer: OctInt;
    Production {
        lhs: 42,
        production: &[ParseType::N(81)],
    },
    // 85 - Integer: BinInt;
    Production {
        lhs: 42,
        production: &[ParseType::N(17)],
    },
    // 86 - HexPrefix: "0x";
    Production {
        lhs: 33,
        production: &[ParseType::T(19)],
    },
    // 87 - OctPrefix: "0o";
    Production {
        lhs: 83,
        production: &[ParseType::T(20)],
    },
    // 88 - BinPrefix: "0b";
    Production {
        lhs: 19,
        production: &[ParseType::T(21)],
    },
    // 89 - DecInt: DecIntOpt /* Option */ UnsignedDecInt;
    Production {
        lhs: 22,
        production: &[ParseType::N(99), ParseType::N(23)],
    },
    // 90 - DecIntOpt: DecIntOptGroup;
    Production {
        lhs: 23,
        production: &[ParseType::N(24)],
    },
    // 91 - DecIntOptGroup: Plus;
    Production {
        lhs: 24,
        production: &[ParseType::N(87)],
    },
    // 92 - DecIntOptGroup: Minus;
    Production {
        lhs: 24,
        production: &[ParseType::N(76)],
    },
    // 93 - DecIntOpt: ;
    Production {
        lhs: 23,
        production: &[],
    },
    // 94 - HexInt: HexPrefix^ /* Clipped */ Push(7) HexIntContent Pop;
    Production {
        lhs: 31,
        production: &[
            ParseType::Pop,
            ParseType::N(32),
            ParseType::Push(7),
            ParseType::N(33),
        ],
    },
    // 95 - HexIntContent: "[0-9a-fA-F]([0-9a-fA-F]|_[0-9a-fA-F])*";
    Production {
        lhs: 32,
        production: &[ParseType::T(22)],
    },
    // 96 - OctInt: OctPrefix^ /* Clipped */ Push(8) OctIntContent Pop;
    Production {
        lhs: 81,
        production: &[
            ParseType::Pop,
            ParseType::N(82),
            ParseType::Push(8),
            ParseType::N(83),
        ],
    },
    // 97 - OctIntContent: "[0-7]([0-7]|_[0-7])*";
    Production {
        lhs: 82,
        production: &[ParseType::T(23)],
    },
    // 98 - BinInt: BinPrefix^ /* Clipped */ Push(9) BinIntContent Pop;
    Production {
        lhs: 17,
        production: &[
            ParseType::Pop,
            ParseType::N(18),
            ParseType::Push(9),
            ParseType::N(19),
        ],
    },
    // 99 - BinIntContent: "[01]([01]|_[01])*";
    Production {
        lhs: 18,
        production: &[ParseType::T(24)],
    },
    // 100 - Boolean: "true";
    Production {
        lhs: 20,
        production: &[ParseType::T(25)],
    },
    // 101 - Boolean: "false";
    Production {
        lhs: 20,
        production: &[ParseType::T(26)],
    },
    // 102 - Float: NormalFloat;
    Production {
        lhs: 30,
        production: &[ParseType::N(79)],
    },
    // 103 - Float: SpecialFloat;
    Production {
        lhs: 30,
        production: &[ParseType::N(91)],
    },
    // 104 - NormalFloat: "[-+]?(?:0|[1-9](?:[0-9]|_[0-9])*)(?:[eE][-+]?[0-9](?:[0-9]|_[0-9])*|(?:\.[0-9](?:[0-9]|_[0-9])*(?:[eE][-+]?[0-9](?:[0-9]|_[0-9])*)?))";
    Production {
        lhs: 79,
        production: &[ParseType::T(27)],
    },
    // 105 - SpecialFloat: "[-+]?(nan|inf)";
    Production {
        lhs: 91,
        production: &[ParseType::T(28)],
    },
    // 106 - DateTime: OffsetDateTime;
    Production {
        lhs: 21,
        production: &[ParseType::N(84)],
    },
    // 107 - DateTime: LocalDateTime;
    Production {
        lhs: 21,
        production: &[ParseType::N(53)],
    },
    // 108 - DateTime: LocalDate;
    Production {
        lhs: 21,
        production: &[ParseType::N(52)],
    },
    // 109 - DateTime: LocalTime;
    Production {
        lhs: 21,
        production: &[ParseType::N(54)],
    },
    // 110 - OffsetDateTime: "[0-9]{4}-[0-9]{2}-[0-9]{2}[Tt ][0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?([Zz]|[-+][0-9]{2}(:[0-9]{2})?)?";
    Production {
        lhs: 84,
        production: &[ParseType::T(29)],
    },
    // 111 - LocalDateTime: "[0-9]{4}-[0-9]{2}-[0-9]{2}[Tt ][0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?[Zz]?";
    Production {
        lhs: 53,
        production: &[ParseType::T(30)],
    },
    // 112 - LocalDate: "[0-9]{4}-[0-9]{2}-[0-9]{2}";
    Production {
        lhs: 52,
        production: &[ParseType::T(31)],
    },
    // 113 - LocalTime: "[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?";
    Production {
        lhs: 54,
        production: &[ParseType::T(32)],
    },
    // 114 - Array: ArrayOpen^ /* Clipped */ Push(2) ArrayOpt /* Option */ Pop ArrayClose^ /* Clipped */;
    Production {
        lhs: 1,
        production: &[
            ParseType::N(2),
            ParseType::Pop,
            ParseType::N(4),
            ParseType::Push(2),
            ParseType::N(3),
        ],
    },
    // 115 - ArrayOpt: ArrayValues;
    Production {
        lhs: 4,
        production: &[ParseType::N(9)],
    },
    // 116 - ArrayOpt: ;
    Production {
        lhs: 4,
        production: &[],
    },
    // 117 - ArrayValues: Val ArrayValuesSuffix0;
    Production {
        lhs: 9,
        production: &[ParseType::N(11), ParseType::N(100)],
    },
    // 118 - ArrayValuesSuffix0: ArraySep^ /* Clipped */ ArrayValuesSuffix;
    Production {
        lhs: 11,
        production: &[ParseType::N(10), ParseType::N(5)],
    },
    // 119 - ArrayValuesSuffix0: ;
    Production {
        lhs: 11,
        production: &[],
    },
    // 120 - ArrayValuesSuffix: ArrayValues;
    Production {
        lhs: 10,
        production: &[ParseType::N(9)],
    },
    // 121 - ArrayValuesSuffix: ;
    Production {
        lhs: 10,
        production: &[],
    },
    // 122 - ArraySep: ",";
    Production {
        lhs: 5,
        production: &[ParseType::T(33)],
    },
    // 123 - Table: StdTable;
    Production {
        lhs: 95,
        production: &[ParseType::N(92)],
    },
    // 124 - Table: ArrayTable;
    Production {
        lhs: 95,
        production: &[ParseType::N(6)],
    },
    // 125 - StdTable: StdTableOpen^ /* Clipped */ Key StdTableClose^ /* Clipped */;
    Production {
        lhs: 92,
        production: &[ParseType::N(93), ParseType::N(43), ParseType::N(94)],
    },
    // 126 - ArrayTableOpen: "\u{5B}\u{5B}";
    Production {
        lhs: 8,
        production: &[ParseType::T(34)],
    },
    // 127 - ArrayTableClose: "\u{5D}\u{5D}";
    Production {
        lhs: 7,
        production: &[ParseType::T(35)],
    },
    // 128 - ArrayOpen: "\u{5B}";
    Production {
        lhs: 3,
        production: &[ParseType::T(36)],
    },
    // 129 - ArrayClose: "\u{5D}";
    Production {
        lhs: 2,
        production: &[ParseType::T(37)],
    },
    // 130 - StdTableOpen: ArrayOpen;
    Production {
        lhs: 94,
        production: &[ParseType::N(3)],
    },
    // 131 - StdTableClose: ArrayClose;
    Production {
        lhs: 93,
        production: &[ParseType::N(2)],
    },
    // 132 - InlineTable: InlineTableOpen^ /* Clipped */ Push(0) InlineTableOpt /* Option */ Pop InlineTableOpt0 /* Option */ InlineTableClose^ /* Clipped */;
    Production {
        lhs: 34,
        production: &[
            ParseType::N(35),
            ParseType::N(40),
            ParseType::Pop,
            ParseType::N(39),
            ParseType::Push(0),
            ParseType::N(38),
        ],
    },
    // 133 - InlineTableOpt0: InlineTableSep;
    Production {
        lhs: 40,
        production: &[ParseType::N(41)],
    },
    // 134 - InlineTableOpt0: ;
    Production {
        lhs: 40,
        production: &[],
    },
    // 135 - InlineTableOpt: InlineTableKeyVals;
    Production {
        lhs: 39,
        production: &[ParseType::N(36)],
    },
    // 136 - InlineTableOpt: ;
    Production {
        lhs: 39,
        production: &[],
    },
    // 137 - InlineTableOpen: "\u{7B}";
    Production {
        lhs: 38,
        production: &[ParseType::T(38)],
    },
    // 138 - InlineTableClose: "\u{7D}";
    Production {
        lhs: 35,
        production: &[ParseType::T(39)],
    },
    // 139 - InlineTableSep: ArraySep;
    Production {
        lhs: 41,
        production: &[ParseType::N(5)],
    },
    // 140 - InlineTableKeyVals: KeyVal InlineTableKeyValsOpt /* Option */;
    Production {
        lhs: 36,
        production: &[ParseType::N(37), ParseType::N(46)],
    },
    // 141 - InlineTableKeyValsOpt: InlineTableSep^ /* Clipped */ InlineTableKeyVals;
    Production {
        lhs: 37,
        production: &[ParseType::N(36), ParseType::N(41)],
    },
    // 142 - InlineTableKeyValsOpt: ;
    Production {
        lhs: 37,
        production: &[],
    },
    // 143 - ArrayTable: ArrayTableOpen^ /* Clipped */ Key ArrayTableClose^ /* Clipped */;
    Production {
        lhs: 6,
        production: &[ParseType::N(7), ParseType::N(43), ParseType::N(8)],
    },
    // 144 - UnsignedDecInt: "0|[1-9]([0-9]|_[0-9])*";
    Production {
        lhs: 99,
        production: &[ParseType::T(40)],
    },
    // 145 - UnquotedKey: "[-_A-Za-z0-9\u{B2}\u{B3}\u{B9}\u{BC}-\u{BE}\u{C0}-\u{D6}\u{D8}-\u{F6}\u{F8}-\u{37D}\u{37F}-\u{1FFF}\u{200C}-\u{200D}\u{203F}-\u{2040}\u{2070}-\u{218F}\u{2460}-\u{24FF}\u{2C00}-\u{2FEF}\u{3001}-\u{D7FF}\u{F900}-\u{FDCF}\u{FDF0}-\u{FFFD}\u{10000}-\u{EFFFF}]+";
    Production {
        lhs: 98,
        production: &[ParseType::T(41)],
    },
    // 146 - DotSep: "\.";
    Production {
        lhs: 25,
        production: &[ParseType::T(42)],
    },
    // 147 - MLBasicStringStart: "\u{22}{3}";
    Production {
        lhs: 66,
        production: &[ParseType::T(43)],
    },
    // 148 - MLBasicStringEnd: "\u{22}{3,5}";
    Production {
        lhs: 65,
        production: &[ParseType::T(44)],
    },
    // 149 - MLBQuotes: "\u{22}{1,2}";
    Production {
        lhs: 60,
        production: &[ParseType::T(45)],
    },
    // 150 - QuotationMark: "\u{22}";
    Production {
        lhs: 88,
        production: &[ParseType::T(46)],
    },
    // 151 - MLLiteralStringStart: "\u{27}{3}";
    Production {
        lhs: 75,
        production: &[ParseType::T(47)],
    },
    // 152 - MLLiteralStringEnd: "\u{27}{3,5}(?:\r?\n)?";
    Production {
        lhs: 74,
        production: &[ParseType::T(48)],
    },
    // 153 - MLLQuotes: "\u{27}{1,2}";
    Production {
        lhs: 70,
        production: &[ParseType::T(49)],
    },
    // 154 - Apostrophe: "\u{27}";
    Production {
        lhs: 0,
        production: &[ParseType::T(50)],
    },
    // 155 - AsciiNoEscape: "[ \t\u{21}\u{23}-\u{5B}\u{5D}-\u{7E}]+";
    Production {
        lhs: 12,
        production: &[ParseType::T(51)],
    },
    // 156 - Minus: "\u{2D}";
    Production {
        lhs: 76,
        production: &[ParseType::T(52)],
    },
    // 157 - Plus: "\u{2B}";
    Production {
        lhs: 87,
        production: &[ParseType::T(53)],
    },
];

static SCANNERS: Lazy<Vec<ScannerConfig>> = Lazy::new(|| {
    vec![
        ScannerConfig::new(
            "INITIAL",
            Tokenizer::build(TERMINALS, SCANNER_0.0, SCANNER_0.1).unwrap(),
            &[],
        ),
        ScannerConfig::new(
            "Esc",
            Tokenizer::build(TERMINALS, SCANNER_1.0, SCANNER_1.1).unwrap(),
            &[],
        ),
        ScannerConfig::new(
            "Val",
            Tokenizer::build(TERMINALS, SCANNER_2.0, SCANNER_2.1).unwrap(),
            &[],
        ),
        ScannerConfig::new(
            "BString",
            Tokenizer::build(TERMINALS, SCANNER_3.0, SCANNER_3.1).unwrap(),
            &[],
        ),
        ScannerConfig::new(
            "MLBString",
            Tokenizer::build(TERMINALS, SCANNER_4.0, SCANNER_4.1).unwrap(),
            &[],
        ),
        ScannerConfig::new(
            "LString",
            Tokenizer::build(TERMINALS, SCANNER_5.0, SCANNER_5.1).unwrap(),
            &[],
        ),
        ScannerConfig::new(
            "MLLString",
            Tokenizer::build(TERMINALS, SCANNER_6.0, SCANNER_6.1).unwrap(),
            &[],
        ),
        ScannerConfig::new(
            "HexInt",
            Tokenizer::build(TERMINALS, SCANNER_7.0, SCANNER_7.1).unwrap(),
            &[],
        ),
        ScannerConfig::new(
            "OctInt",
            Tokenizer::build(TERMINALS, SCANNER_8.0, SCANNER_8.1).unwrap(),
            &[],
        ),
        ScannerConfig::new(
            "BinInt",
            Tokenizer::build(TERMINALS, SCANNER_9.0, SCANNER_9.1).unwrap(),
            &[],
        ),
    ]
});

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut ParolTomlGrammar<'t>,
) -> Result<ParseTree<'t>, ParolError>
where
    T: AsRef<Path>,
{
    let mut llk_parser = LLKParser::new(
        85,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    llk_parser.trim_parse_tree();

    // Initialize wrapper
    let mut user_actions = ParolTomlGrammarAuto::new(user_actions);
    llk_parser.parse(
        TokenStream::new(input, file_name, &SCANNERS, MAX_K, false).unwrap(),
        &mut user_actions,
    )
}
