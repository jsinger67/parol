%start Basic
%title "Basic grammar"
%comment "Subset of C64 Basic used in tutorial for parser generator `parol`"
%auto_newline_off
%user_type BasicLineNumber = crate::basic_grammar::BasicLineNumber
%user_type BasicNumber = crate::basic_grammar::BasicNumber

%scanner Cmnt { %auto_newline_off }
%scanner Expr { %auto_newline_off }

%%

/*  0 */ Basic: BasicOpt /* Option */ Line BasicList /* Vec */ BasicOpt0 /* Option */;
/*  1 */ BasicList /* Vec<T>::Push */: EndOfLine Line BasicList;
/*  2 */ BasicList /* Vec<T>::New */: ;
/*  3 */ BasicOpt0 /* Option<T>::Some */: EndOfLine;
/*  4 */ BasicOpt0 /* Option<T>::None */: ;
/*  5 */ BasicOpt /* Option<T>::Some */: EndOfLine;
/*  6 */ BasicOpt /* Option<T>::None */: ;
/*  7 */ Line: LineNumber Statement LineList /* Vec */;
/*  8 */ LineList /* Vec<T>::Push */: <INITIAL, Expr>':'^ /* Clipped */ Statement LineList;
/*  9 */ LineList /* Vec<T>::New */: ;
/* 10 */ LineNumber: /[0 ]*[1-9] *(?:[0-9] *){1,4}|[0 ]+/ : BasicLineNumber;
/* 11 */ Statement: Remark;
/* 12 */ Statement: GotoStatement;
/* 13 */ Statement: IfStatement;
/* 14 */ Statement: Assignment;
/* 15 */ Statement: PrintStatement;
/* 16 */ Statement: EndStatement;
/* 17 */ Remark: 'REM'^ /* Clipped */ %push(Cmnt) RemarkOpt /* Option */ %pop();
/* 18 */ RemarkOpt /* Option<T>::Some */: Comment;
/* 19 */ RemarkOpt /* Option<T>::None */: ;
/* 20 */ GotoStatement: Goto LineNumber;
/* 21 */ IfStatement: If %push(Expr) Expression %pop() IfBody;
/* 22 */ Assignment: AssignmentOpt /* Option */ Variable AssignOp %push(Expr) Expression %pop();
/* 23 */ AssignmentOpt /* Option<T>::Some */: Let;
/* 24 */ AssignmentOpt /* Option<T>::None */: ;
/* 25 */ IfBody: Then Statement;
/* 26 */ IfBody: Goto LineNumber;
/* 27 */ PrintStatement: Print %push(Expr) Expression PrintStatementList /* Vec */ %pop();
/* 28 */ PrintStatementList /* Vec<T>::Push */: <INITIAL, Expr>','^ /* Clipped */ Expression PrintStatementList;
/* 29 */ PrintStatementList /* Vec<T>::New */: ;
/* 30 */ EndStatement: End;
/* 31 */ EndOfLine: <INITIAL, Expr>/(?:\r?\n|\r)+/^ /* Clipped */;
/* 32 */ Literal: Number;
/* 33 */ Number: Float;
/* 34 */ Number: Integer;
/* 35 */ Float: Float1;
/* 36 */ Float: Float2;
/* 37 */ Float1: <Expr>/(?:(?:[0-9] *)+)?\. *(?:(?:[0-9] *)+)? *(?:E *[-+]? *(?:[0-9] *)+)?/ : BasicNumber;
/* 38 */ Float2: <Expr>/(?:[0-9] *)+E *[-+]? *(?:[0-9] *)+/ : BasicNumber;
/* 39 */ Integer: <Expr>/(?:[0-9] *)+/ : BasicNumber;
/* 40 */ If: 'IF'^ /* Clipped */;
/* 41 */ Then: <INITIAL, Expr>'THEN'^ /* Clipped */;
/* 42 */ Goto: <INITIAL, Expr>'GOTO'^ /* Clipped */;
/* 43 */ Let: 'LET'^ /* Clipped */;
/* 44 */ Print: /PRINT|\?/^ /* Clipped */;
/* 45 */ End: 'END'^ /* Clipped */;
/* 46 */ AssignOp: '='^ /* Clipped */;
/* 47 */ LogicalOrOp: <Expr>/N?OR/;
/* 48 */ LogicalAndOp: <Expr>'AND';
/* 49 */ LogicalNotOp: <Expr>'NOT';
/* 50 */ RelationalOp: <Expr>/<\s*>|<\s*=|<|>\s*=|>|=/;
/* 51 */ Plus: <Expr>'+';
/* 52 */ Minus: <Expr>'-';
/* 53 */ MulOp: <Expr>/\*|\u{2F}/;
/* 54 */ LParen: <Expr>'(';
/* 55 */ RParen: <Expr>')';
/* 56 */ Comment: <Cmnt>/[^\r\n]+/;
/* 57 */ Variable: <INITIAL, Expr>/[A-Z][0-9A-Z]*/;
/* 58 */ Expression: LogicalOr;
/* 59 */ LogicalOr: LogicalAnd LogicalOrList /* Vec */;
/* 60 */ LogicalOrList /* Vec<T>::Push */: LogicalOrOp LogicalAnd LogicalOrList;
/* 61 */ LogicalOrList /* Vec<T>::New */: ;
/* 62 */ LogicalAnd: LogicalNot LogicalAndList /* Vec */;
/* 63 */ LogicalAndList /* Vec<T>::Push */: LogicalAndOp LogicalNot LogicalAndList;
/* 64 */ LogicalAndList /* Vec<T>::New */: ;
/* 65 */ LogicalNot: LogicalNotOpt /* Option */ Relational;
/* 66 */ LogicalNotOpt /* Option<T>::Some */: LogicalNotOp;
/* 67 */ LogicalNotOpt /* Option<T>::None */: ;
/* 68 */ Relational: Summation RelationalList /* Vec */;
/* 69 */ RelationalList /* Vec<T>::Push */: RelationalOp Summation RelationalList;
/* 70 */ RelationalList /* Vec<T>::New */: ;
/* 71 */ Summation: Multiplication SummationList /* Vec */;
/* 72 */ SummationList /* Vec<T>::Push */: SummationListGroup Multiplication SummationList;
/* 73 */ SummationListGroup: Plus;
/* 74 */ SummationListGroup: Minus;
/* 75 */ SummationList /* Vec<T>::New */: ;
/* 76 */ Multiplication: Factor MultiplicationList /* Vec */;
/* 77 */ MultiplicationList /* Vec<T>::Push */: MulOp Factor MultiplicationList;
/* 78 */ MultiplicationList /* Vec<T>::New */: ;
/* 79 */ Factor: Literal;
/* 80 */ Factor: Variable;
/* 81 */ Factor: Minus Factor;
/* 82 */ Factor: LParen Expression RParen;
