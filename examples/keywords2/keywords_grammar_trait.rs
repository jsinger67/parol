// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

// Disable clippy warnings that can result in the way how parol generates code.
#![allow(clippy::enum_variant_names)]
#![allow(clippy::large_enum_variant)]
#![allow(clippy::upper_case_acronyms)]

use crate::keywords_grammar::KeywordsGrammar;
use parol_runtime::parser::{ParseTreeType, UserActionsTrait};
use parol_runtime::{ParserError, Result, Token};
///
/// The `KeywordsGrammarTrait` trait is automatically generated for the
/// given grammar.
/// All functions have default implementations.
///
pub trait KeywordsGrammarTrait {
    /// Semantic action for production 0:
    ///
    /// `Grammar: GrammarList /* Vec */;`
    ///
    fn grammar(&mut self, _grammar_list: &ParseTreeType) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 1:
    ///
    /// `GrammarList /* Vec<T>::Push */: Items GrammarList;`
    ///
    fn grammar_list_0(
        &mut self,
        _items: &ParseTreeType,
        _grammar_list: &ParseTreeType,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 2:
    ///
    /// `GrammarList /* Vec<T>::New */: ;`
    ///
    fn grammar_list_1(&mut self) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 3:
    ///
    /// `Items: Declaration;`
    ///
    fn items_0(&mut self, _declaration: &ParseTreeType) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 4:
    ///
    /// `Items: Block;`
    ///
    fn items_1(&mut self, _block: &ParseTreeType) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 5:
    ///
    /// `Declaration: Var %sc(Identifier) Identifier %sc() ";";`
    ///
    fn declaration(
        &mut self,
        _var: &ParseTreeType,
        _identifier: &ParseTreeType,
        _semicolon: &ParseTreeType,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 6:
    ///
    /// `Block: Begin BlockList /* Vec */ End;`
    ///
    fn block(
        &mut self,
        _begin: &ParseTreeType,
        _block_list: &ParseTreeType,
        _end: &ParseTreeType,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 7:
    ///
    /// `BlockList /* Vec<T>::Push */: Items BlockList;`
    ///
    fn block_list_0(&mut self, _items: &ParseTreeType, _block_list: &ParseTreeType) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 8:
    ///
    /// `BlockList /* Vec<T>::New */: ;`
    ///
    fn block_list_1(&mut self) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 9:
    ///
    /// `Identifier: <Identifier>"[a-zA-Z_][a-zA-Z0-9_]*";`
    ///
    fn identifier(&mut self, _identifier: &ParseTreeType) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 10:
    ///
    /// `Begin: "(?i)(?-u:\b)Begin(?-u:\b)";`
    ///
    fn begin(&mut self, _begin: &ParseTreeType) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 11:
    ///
    /// `End: "(?i)(?-u:\b)End(?-u:\b)";`
    ///
    fn end(&mut self, _end: &ParseTreeType) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 12:
    ///
    /// `Var: "(?i)(?-u:\b)Var(?-u:\b)";`
    ///
    fn var(&mut self, _var: &ParseTreeType) -> Result<()> {
        Ok(())
    }
}

impl UserActionsTrait<'_> for KeywordsGrammar {
    ///
    /// This function is implemented automatically for the user's item KeywordsGrammar.
    ///
    fn call_semantic_action_for_production_number(
        &mut self,
        prod_num: usize,
        children: &[ParseTreeType],
    ) -> Result<()> {
        match prod_num {
            0 => self.grammar(&children[0]),
            1 => self.grammar_list_0(&children[0], &children[1]),
            2 => self.grammar_list_1(),
            3 => self.items_0(&children[0]),
            4 => self.items_1(&children[0]),
            5 => self.declaration(&children[0], &children[1], &children[2]),
            6 => self.block(&children[0], &children[1], &children[2]),
            7 => self.block_list_0(&children[0], &children[1]),
            8 => self.block_list_1(),
            9 => self.identifier(&children[0]),
            10 => self.begin(&children[0]),
            11 => self.end(&children[0]),
            12 => self.var(&children[0]),
            _ => Err(ParserError::InternalError(format!(
                "Unhandled production number: {}",
                prod_num
            ))
            .into()),
        }
    }
    fn on_comment_parsed(&mut self, _token: Token<'_>) {
        // This is currently only supported for auto generate mode.
        // Please, file an issue if need arises.
    }
}
