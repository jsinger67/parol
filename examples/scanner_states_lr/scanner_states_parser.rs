// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use parol_runtime::lr_parser::{LR1State, LRAction, LRParseTable, LRParser, LRProduction};
use parol_runtime::once_cell::sync::Lazy;
use parol_runtime::parser::parse_tree_type::TreeConstruct;
#[allow(unused_imports)]
use parol_runtime::parser::{ParseType, Production, Trans};
use parol_runtime::{ParolError, ParseTree, TerminalIndex};
use parol_runtime::{ScannerConfig, TokenStream, Tokenizer};
use std::path::Path;

use crate::scanner_states_grammar::ScannerStatesGrammar;
use crate::scanner_states_grammar_trait::ScannerStatesGrammarAuto;

use parol_runtime::lexer::tokenizer::{
    ERROR_TOKEN, NEW_LINE_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN,
};

pub const TERMINALS: &[(&str, Option<(bool, &str)>); 11] = &[
    /*  0 */ (UNMATCHABLE_TOKEN, None),
    /*  1 */ (UNMATCHABLE_TOKEN, None),
    /*  2 */ (UNMATCHABLE_TOKEN, None),
    /*  3 */ (UNMATCHABLE_TOKEN, None),
    /*  4 */ (UNMATCHABLE_TOKEN, None),
    /*  5 */ (r"[a-zA-Z_]\w*", None),
    /*  6 */ (r"\u{5c}[\u{22}\u{5c}bfnt]", None),
    /*  7 */ (r"\u{5c}[\s^\n\r]*\r?\n", None),
    /*  8 */ (r"[^\u{22}\u{5c}]+", None),
    /*  9 */ (r"\u{22}", None),
    /* 10 */ (ERROR_TOKEN, None),
];

pub const TERMINAL_NAMES: &[&str; 11] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "Identifier",
    /*  6 */ "Escaped",
    /*  7 */ "EscapedLineEnd",
    /*  8 */ "NoneQuote",
    /*  9 */ "StringDelimiter",
    /* 10 */ "Error",
];

/* SCANNER_0: "INITIAL" */
const SCANNER_0: (&[&str; 5], &[TerminalIndex; 2]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ NEW_LINE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ r"//.*(\r\n|\r|\n)?",
        /*  4 */ r"/\*([^*]|\*[^/])*\*/",
    ],
    &[5 /* Identifier */, 9 /* StringDelimiter */],
);

/* SCANNER_1: "String" */
const SCANNER_1: (&[&str; 5], &[TerminalIndex; 4]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ UNMATCHABLE_TOKEN,
        /*  2 */ UNMATCHABLE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[
        6, /* Escaped */
        7, /* EscapedLineEnd */
        8, /* NoneQuote */
        9, /* StringDelimiter */
    ],
);

pub const NON_TERMINALS: &[&str; 11] = &[
    /*  0 */ "Content",
    /*  1 */ "Escaped",
    /*  2 */ "EscapedLineEnd",
    /*  3 */ "Identifier",
    /*  4 */ "NoneQuote",
    /*  5 */ "Start",
    /*  6 */ "StartList",
    /*  7 */ "StringContent",
    /*  8 */ "StringContentList",
    /*  9 */ "StringDelimiter",
    /* 10 */ "StringElement",
];

static PARSE_TABLE: LRParseTable = LRParseTable {
    actions: &[
        /* 0 */ LRAction::Shift(2),
        /* 1 */ LRAction::Shift(3),
        /* 2 */ LRAction::Shift(10),
        /* 3 */ LRAction::Shift(11),
        /* 4 */ LRAction::Shift(12),
        /* 5 */ LRAction::Reduce(0 /* Content */, 3),
        /* 6 */ LRAction::Reduce(0 /* Content */, 4),
        /* 7 */ LRAction::Reduce(1 /* Escaped */, 13),
        /* 8 */ LRAction::Reduce(2 /* EscapedLineEnd */, 14),
        /* 9 */ LRAction::Reduce(3 /* Identifier */, 12),
        /* 10 */ LRAction::Reduce(4 /* NoneQuote */, 15),
        /* 11 */ LRAction::Reduce(6 /* StartList */, 1),
        /* 12 */ LRAction::Reduce(6 /* StartList */, 2),
        /* 13 */ LRAction::Reduce(7 /* StringContent */, 5),
        /* 14 */ LRAction::Reduce(8 /* StringContentList */, 6),
        /* 15 */ LRAction::Reduce(8 /* StringContentList */, 7),
        /* 16 */ LRAction::Reduce(9 /* StringDelimiter */, 16),
        /* 17 */ LRAction::Reduce(10 /* StringElement */, 9),
        /* 18 */ LRAction::Reduce(10 /* StringElement */, 10),
        /* 19 */ LRAction::Reduce(10 /* StringElement */, 11),
        /* 20 */ LRAction::Accept,
    ],
    states: &[
        // State 0
        LR1State {
            actions: &[
                (0, 12), /* '<$>' => LRAction::Reduce(StartList, 2) */
                (5, 12), /* '[a-zA-Z_]\w*' => LRAction::Reduce(StartList, 2) */
                (9, 12), /* '\u{22}' => LRAction::Reduce(StartList, 2) */
            ],
            gotos: &[(6, 1) /* StartList => 1 */],
        },
        // State 1
        LR1State {
            actions: &[
                (0, 20), /* '<$>' => LRAction::Accept */
                (5, 0),  /* '[a-zA-Z_]\w*' => LRAction::Shift(2) */
                (9, 1),  /* '\u{22}' => LRAction::Shift(3) */
            ],
            gotos: &[
                (0, 4), /* Content => 4 */
                (3, 5), /* Identifier => 5 */
                (9, 6), /* StringDelimiter => 6 */
            ],
        },
        // State 2
        LR1State {
            actions: &[
                (0, 9), /* '<$>' => LRAction::Reduce(Identifier, 12) */
                (5, 9), /* '[a-zA-Z_]\w*' => LRAction::Reduce(Identifier, 12) */
                (9, 9), /* '\u{22}' => LRAction::Reduce(Identifier, 12) */
            ],
            gotos: &[],
        },
        // State 3
        LR1State {
            actions: &[
                (0, 16), /* '<$>' => LRAction::Reduce(StringDelimiter, 16) */
                (5, 16), /* '[a-zA-Z_]\w*' => LRAction::Reduce(StringDelimiter, 16) */
                (6, 16), /* '\u{5c}[\u{22}\u{5c}bfnt]' => LRAction::Reduce(StringDelimiter, 16) */
                (7, 16), /* '\u{5c}[\s^\n\r]*\r?\n' => LRAction::Reduce(StringDelimiter, 16) */
                (8, 16), /* '[^\u{22}\u{5c}]+' => LRAction::Reduce(StringDelimiter, 16) */
                (9, 16), /* '\u{22}' => LRAction::Reduce(StringDelimiter, 16) */
            ],
            gotos: &[],
        },
        // State 4
        LR1State {
            actions: &[
                (0, 11), /* '<$>' => LRAction::Reduce(StartList, 1) */
                (5, 11), /* '[a-zA-Z_]\w*' => LRAction::Reduce(StartList, 1) */
                (9, 11), /* '\u{22}' => LRAction::Reduce(StartList, 1) */
            ],
            gotos: &[],
        },
        // State 5
        LR1State {
            actions: &[
                (0, 5), /* '<$>' => LRAction::Reduce(Content, 3) */
                (5, 5), /* '[a-zA-Z_]\w*' => LRAction::Reduce(Content, 3) */
                (9, 5), /* '\u{22}' => LRAction::Reduce(Content, 3) */
            ],
            gotos: &[],
        },
        // State 6
        LR1State {
            actions: &[
                (6, 15), /* '\u{5c}[\u{22}\u{5c}bfnt]' => LRAction::Reduce(StringContentList, 7) */
                (7, 15), /* '\u{5c}[\s^\n\r]*\r?\n' => LRAction::Reduce(StringContentList, 7) */
                (8, 15), /* '[^\u{22}\u{5c}]+' => LRAction::Reduce(StringContentList, 7) */
                (9, 15), /* '\u{22}' => LRAction::Reduce(StringContentList, 7) */
            ],
            gotos: &[
                (7, 7), /* StringContent => 7 */
                (8, 8), /* StringContentList => 8 */
            ],
        },
        // State 7
        LR1State {
            actions: &[(9, 1) /* '\u{22}' => LRAction::Shift(3) */],
            gotos: &[(9, 9) /* StringDelimiter => 9 */],
        },
        // State 8
        LR1State {
            actions: &[
                (6, 2),  /* '\u{5c}[\u{22}\u{5c}bfnt]' => LRAction::Shift(10) */
                (7, 3),  /* '\u{5c}[\s^\n\r]*\r?\n' => LRAction::Shift(11) */
                (8, 4),  /* '[^\u{22}\u{5c}]+' => LRAction::Shift(12) */
                (9, 13), /* '\u{22}' => LRAction::Reduce(StringContent, 5) */
            ],
            gotos: &[
                (1, 13),  /* Escaped => 13 */
                (2, 14),  /* EscapedLineEnd => 14 */
                (4, 15),  /* NoneQuote => 15 */
                (10, 16), /* StringElement => 16 */
            ],
        },
        // State 9
        LR1State {
            actions: &[
                (0, 6), /* '<$>' => LRAction::Reduce(Content, 4) */
                (5, 6), /* '[a-zA-Z_]\w*' => LRAction::Reduce(Content, 4) */
                (9, 6), /* '\u{22}' => LRAction::Reduce(Content, 4) */
            ],
            gotos: &[],
        },
        // State 10
        LR1State {
            actions: &[
                (6, 7), /* '\u{5c}[\u{22}\u{5c}bfnt]' => LRAction::Reduce(Escaped, 13) */
                (7, 7), /* '\u{5c}[\s^\n\r]*\r?\n' => LRAction::Reduce(Escaped, 13) */
                (8, 7), /* '[^\u{22}\u{5c}]+' => LRAction::Reduce(Escaped, 13) */
                (9, 7), /* '\u{22}' => LRAction::Reduce(Escaped, 13) */
            ],
            gotos: &[],
        },
        // State 11
        LR1State {
            actions: &[
                (6, 8), /* '\u{5c}[\u{22}\u{5c}bfnt]' => LRAction::Reduce(EscapedLineEnd, 14) */
                (7, 8), /* '\u{5c}[\s^\n\r]*\r?\n' => LRAction::Reduce(EscapedLineEnd, 14) */
                (8, 8), /* '[^\u{22}\u{5c}]+' => LRAction::Reduce(EscapedLineEnd, 14) */
                (9, 8), /* '\u{22}' => LRAction::Reduce(EscapedLineEnd, 14) */
            ],
            gotos: &[],
        },
        // State 12
        LR1State {
            actions: &[
                (6, 10), /* '\u{5c}[\u{22}\u{5c}bfnt]' => LRAction::Reduce(NoneQuote, 15) */
                (7, 10), /* '\u{5c}[\s^\n\r]*\r?\n' => LRAction::Reduce(NoneQuote, 15) */
                (8, 10), /* '[^\u{22}\u{5c}]+' => LRAction::Reduce(NoneQuote, 15) */
                (9, 10), /* '\u{22}' => LRAction::Reduce(NoneQuote, 15) */
            ],
            gotos: &[],
        },
        // State 13
        LR1State {
            actions: &[
                (6, 17), /* '\u{5c}[\u{22}\u{5c}bfnt]' => LRAction::Reduce(StringElement, 9) */
                (7, 17), /* '\u{5c}[\s^\n\r]*\r?\n' => LRAction::Reduce(StringElement, 9) */
                (8, 17), /* '[^\u{22}\u{5c}]+' => LRAction::Reduce(StringElement, 9) */
                (9, 17), /* '\u{22}' => LRAction::Reduce(StringElement, 9) */
            ],
            gotos: &[],
        },
        // State 14
        LR1State {
            actions: &[
                (6, 18), /* '\u{5c}[\u{22}\u{5c}bfnt]' => LRAction::Reduce(StringElement, 10) */
                (7, 18), /* '\u{5c}[\s^\n\r]*\r?\n' => LRAction::Reduce(StringElement, 10) */
                (8, 18), /* '[^\u{22}\u{5c}]+' => LRAction::Reduce(StringElement, 10) */
                (9, 18), /* '\u{22}' => LRAction::Reduce(StringElement, 10) */
            ],
            gotos: &[],
        },
        // State 15
        LR1State {
            actions: &[
                (6, 19), /* '\u{5c}[\u{22}\u{5c}bfnt]' => LRAction::Reduce(StringElement, 11) */
                (7, 19), /* '\u{5c}[\s^\n\r]*\r?\n' => LRAction::Reduce(StringElement, 11) */
                (8, 19), /* '[^\u{22}\u{5c}]+' => LRAction::Reduce(StringElement, 11) */
                (9, 19), /* '\u{22}' => LRAction::Reduce(StringElement, 11) */
            ],
            gotos: &[],
        },
        // State 16
        LR1State {
            actions: &[
                (6, 14), /* '\u{5c}[\u{22}\u{5c}bfnt]' => LRAction::Reduce(StringContentList, 6) */
                (7, 14), /* '\u{5c}[\s^\n\r]*\r?\n' => LRAction::Reduce(StringContentList, 6) */
                (8, 14), /* '[^\u{22}\u{5c}]+' => LRAction::Reduce(StringContentList, 6) */
                (9, 14), /* '\u{22}' => LRAction::Reduce(StringContentList, 6) */
            ],
            gotos: &[],
        },
    ],
};

pub const PRODUCTIONS: &[LRProduction; 17] = &[
    // 0 - Start: StartList /* Vec */;
    LRProduction { lhs: 5, len: 1 },
    // 1 - StartList: StartList Content;
    LRProduction { lhs: 6, len: 2 },
    // 2 - StartList: ;
    LRProduction { lhs: 6, len: 0 },
    // 3 - Content: Identifier;
    LRProduction { lhs: 0, len: 1 },
    // 4 - Content: StringDelimiter StringContent StringDelimiter;
    LRProduction { lhs: 0, len: 3 },
    // 5 - StringContent: StringContentList /* Vec */;
    LRProduction { lhs: 7, len: 1 },
    // 6 - StringContentList: StringContentList StringElement;
    LRProduction { lhs: 8, len: 2 },
    // 7 - StringContentList: ;
    LRProduction { lhs: 8, len: 0 },
    // 8 - StringContent: ;
    LRProduction { lhs: 7, len: 0 },
    // 9 - StringElement: Escaped;
    LRProduction { lhs: 10, len: 1 },
    // 10 - StringElement: EscapedLineEnd;
    LRProduction { lhs: 10, len: 1 },
    // 11 - StringElement: NoneQuote;
    LRProduction { lhs: 10, len: 1 },
    // 12 - Identifier: "[a-zA-Z_]\w*";
    LRProduction { lhs: 3, len: 1 },
    // 13 - Escaped: "\u{5c}[\u{22}\u{5c}bfnt]";
    LRProduction { lhs: 1, len: 1 },
    // 14 - EscapedLineEnd: "\u{5c}[\s^\n\r]*\r?\n";
    LRProduction { lhs: 2, len: 1 },
    // 15 - NoneQuote: "[^\u{22}\u{5c}]+";
    LRProduction { lhs: 4, len: 1 },
    // 16 - StringDelimiter: "\u{22}";
    LRProduction { lhs: 9, len: 1 },
];

static SCANNERS: Lazy<Vec<ScannerConfig>> = Lazy::new(|| {
    vec![
        ScannerConfig::new(
            "INITIAL",
            Tokenizer::build(TERMINALS, SCANNER_0.0, SCANNER_0.1).unwrap(),
            &[(9 /* StringDelimiter */, 1 /* String */)],
        ),
        ScannerConfig::new(
            "String",
            Tokenizer::build(TERMINALS, SCANNER_1.0, SCANNER_1.1).unwrap(),
            &[(9 /* StringDelimiter */, 0 /* INITIAL */)],
        ),
    ]
});

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut ScannerStatesGrammar<'t>,
) -> Result<ParseTree, ParolError>
where
    T: AsRef<Path>,
{
    use parol_runtime::parser::parse_tree_type::SynTree;
    use parol_runtime::parser::parser_types::SynTreeFlavor;
    use parol_runtime::syntree::Builder;
    let builder = Builder::<SynTree, SynTreeFlavor>::new_with();
    parse_into(input, builder, file_name, user_actions)
}
#[allow(dead_code)]
pub fn parse_into<'t, T: TreeConstruct<'t>>(
    input: &'t str,
    tree_builder: T,
    file_name: impl AsRef<Path>,
    user_actions: &mut ScannerStatesGrammar<'t>,
) -> Result<T::Tree, ParolError>
where
    ParolError: From<T::Error>,
{
    let mut lr_parser = LRParser::new(5, &PARSE_TABLE, PRODUCTIONS, TERMINAL_NAMES, NON_TERMINALS);
    lr_parser.trim_parse_tree();

    // Initialize wrapper
    let mut user_actions = ScannerStatesGrammarAuto::new(user_actions);
    lr_parser.parse_into::<T>(
        tree_builder,
        TokenStream::new(input, file_name, &SCANNERS, 1).unwrap(),
        &mut user_actions,
    )
}
