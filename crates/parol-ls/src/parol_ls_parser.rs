// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use parol_runtime::once_cell::sync::Lazy;
#[allow(unused_imports)]
use parol_runtime::parser::{LLKParser, LookaheadDFA, ParseTreeType, ParseType, Production, Trans};
use parol_runtime::{ParolError, ParseTree, TerminalIndex};
use parol_runtime::{TokenStream, Tokenizer};
use std::cell::RefCell;
use std::path::Path;

use crate::parol_ls_grammar::ParolLsGrammar;
use crate::parol_ls_grammar_trait::ParolLsGrammarAuto;

use parol_runtime::lexer::tokenizer::{
    ERROR_TOKEN, NEW_LINE_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN,
};

pub const TERMINALS: &[&str; 38] = &[
    /*  0 */ UNMATCHABLE_TOKEN,
    /*  1 */ UNMATCHABLE_TOKEN,
    /*  2 */ UNMATCHABLE_TOKEN,
    /*  3 */ UNMATCHABLE_TOKEN,
    /*  4 */ UNMATCHABLE_TOKEN,
    /*  5 */ r"%start",
    /*  6 */ r"%title",
    /*  7 */ r"%comment",
    /*  8 */ r"%user_type",
    /*  9 */ r"=",
    /* 10 */ r"%line_comment",
    /* 11 */ r"%block_comment",
    /* 12 */ r"%auto_newline_off",
    /* 13 */ r"%auto_ws_off",
    /* 14 */ r"%%",
    /* 15 */ r"::",
    /* 16 */ r":",
    /* 17 */ r";",
    /* 18 */ r"\|",
    /* 19 */ r"<",
    /* 20 */ r">",
    /* 21 */ r"\(",
    /* 22 */ r"\)",
    /* 23 */ r"\[",
    /* 24 */ r"\]",
    /* 25 */ r"\{",
    /* 26 */ r"\}",
    /* 27 */ r"[a-zA-Z_][a-zA-Z0-9_]*",
    /* 28 */ r#""(\\.|[^\\])*?""#,
    /* 29 */ r"'(\\'|[^'])*?'",
    /* 30 */ r"%scanner",
    /* 31 */ r",",
    /* 32 */ r"%sc",
    /* 33 */ r"%push",
    /* 34 */ r"%pop",
    /* 35 */ r"\^",
    /* 36 */ r"\u{2f}(\\.|[^\\])*?\u{2f}",
    /* 37 */ ERROR_TOKEN,
];

pub const TERMINAL_NAMES: &[&str; 38] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "PercentStart",
    /*  6 */ "PercentTitle",
    /*  7 */ "PercentComment",
    /*  8 */ "PercentUserUnderscoreType",
    /*  9 */ "Equ",
    /* 10 */ "PercentLineUnderscoreComment",
    /* 11 */ "PercentBlockUnderscoreComment",
    /* 12 */ "PercentAutoUnderscoreNewlineUnderscoreOff",
    /* 13 */ "PercentAutoUnderscoreWsUnderscoreOff",
    /* 14 */ "PercentPercent",
    /* 15 */ "DoubleColon",
    /* 16 */ "Colon",
    /* 17 */ "Semicolon",
    /* 18 */ "Or",
    /* 19 */ "LT",
    /* 20 */ "GT",
    /* 21 */ "LParen",
    /* 22 */ "RParen",
    /* 23 */ "LBracket",
    /* 24 */ "RBracket",
    /* 25 */ "LBrace",
    /* 26 */ "RBrace",
    /* 27 */ "Identifier",
    /* 28 */ "String",
    /* 29 */ "LiteralString",
    /* 30 */ "PercentScanner",
    /* 31 */ "Comma",
    /* 32 */ "PercentSc",
    /* 33 */ "PercentPush",
    /* 34 */ "PercentPop",
    /* 35 */ "CutOperator",
    /* 36 */ "Regex",
    /* 37 */ "Error",
];

/* SCANNER_0: "INITIAL" */
const SCANNER_0: (&[&str; 5], &[TerminalIndex; 32]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ NEW_LINE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ r"(//.*(\r\n|\r|\n|$))",
        /*  4 */ r"((?ms)/\*.*?\*/)",
    ],
    &[
        5,  /* PercentStart */
        6,  /* PercentTitle */
        7,  /* PercentComment */
        8,  /* PercentUserUnderscoreType */
        9,  /* Equ */
        10, /* PercentLineUnderscoreComment */
        11, /* PercentBlockUnderscoreComment */
        12, /* PercentAutoUnderscoreNewlineUnderscoreOff */
        13, /* PercentAutoUnderscoreWsUnderscoreOff */
        14, /* PercentPercent */
        15, /* DoubleColon */
        16, /* Colon */
        17, /* Semicolon */
        18, /* Or */
        19, /* LT */
        20, /* GT */
        21, /* LParen */
        22, /* RParen */
        23, /* LBracket */
        24, /* RBracket */
        25, /* LBrace */
        26, /* RBrace */
        27, /* Identifier */
        28, /* String */
        29, /* LiteralString */
        30, /* PercentScanner */
        31, /* Comma */
        32, /* PercentSc */
        33, /* PercentPush */
        34, /* PercentPop */
        35, /* CutOperator */
        36, /* Regex */
    ],
);

const MAX_K: usize = 1;

pub const NON_TERMINALS: &[&str; 43] = &[
    /*  0 */ "ASTControl",
    /*  1 */ "Alternation",
    /*  2 */ "AlternationList",
    /*  3 */ "Alternations",
    /*  4 */ "AlternationsList",
    /*  5 */ "CutOperator",
    /*  6 */ "Declaration",
    /*  7 */ "DoubleColon",
    /*  8 */ "Factor",
    /*  9 */ "GrammarDefinition",
    /* 10 */ "GrammarDefinitionList",
    /* 11 */ "Group",
    /* 12 */ "Identifier",
    /* 13 */ "LiteralString",
    /* 14 */ "NonTerminal",
    /* 15 */ "NonTerminalOpt",
    /* 16 */ "Optional",
    /* 17 */ "ParolLs",
    /* 18 */ "Production",
    /* 19 */ "ProductionLHS",
    /* 20 */ "Prolog",
    /* 21 */ "PrologList",
    /* 22 */ "PrologList0",
    /* 23 */ "Regex",
    /* 24 */ "Repeat",
    /* 25 */ "ScannerDirectives",
    /* 26 */ "ScannerState",
    /* 27 */ "ScannerStateList",
    /* 28 */ "ScannerSwitch",
    /* 29 */ "ScannerSwitchOpt",
    /* 30 */ "SimpleToken",
    /* 31 */ "SimpleTokenOpt",
    /* 32 */ "StartDeclaration",
    /* 33 */ "StateList",
    /* 34 */ "StateListList",
    /* 35 */ "String",
    /* 36 */ "Symbol",
    /* 37 */ "TokenLiteral",
    /* 38 */ "TokenWithStates",
    /* 39 */ "TokenWithStatesOpt",
    /* 40 */ "UserTypeDeclaration",
    /* 41 */ "UserTypeName",
    /* 42 */ "UserTypeNameList",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 43] = &[
    /* 0 - "ASTControl" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 16, 2, 65), Trans(0, 35, 1, 64)],
        k: 1,
    },
    /* 1 - "Alternation" */
    LookaheadDFA {
        prod0: 24,
        transitions: &[],
        k: 0,
    },
    /* 2 - "AlternationList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 17, 2, 26),
            Trans(0, 18, 2, 26),
            Trans(0, 19, 1, 25),
            Trans(0, 21, 1, 25),
            Trans(0, 22, 2, 26),
            Trans(0, 23, 1, 25),
            Trans(0, 24, 2, 26),
            Trans(0, 25, 1, 25),
            Trans(0, 26, 2, 26),
            Trans(0, 27, 1, 25),
            Trans(0, 28, 1, 25),
            Trans(0, 29, 1, 25),
            Trans(0, 32, 1, 25),
            Trans(0, 33, 1, 25),
            Trans(0, 34, 1, 25),
            Trans(0, 36, 1, 25),
        ],
        k: 1,
    },
    /* 3 - "Alternations" */
    LookaheadDFA {
        prod0: 21,
        transitions: &[],
        k: 0,
    },
    /* 4 - "AlternationsList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 17, 2, 23),
            Trans(0, 18, 1, 22),
            Trans(0, 22, 2, 23),
            Trans(0, 24, 2, 23),
            Trans(0, 26, 2, 23),
        ],
        k: 1,
    },
    /* 5 - "CutOperator" */
    LookaheadDFA {
        prod0: 66,
        transitions: &[],
        k: 0,
    },
    /* 6 - "Declaration" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 1, 7),
            Trans(0, 7, 2, 8),
            Trans(0, 8, 3, 9),
            Trans(0, 10, 4, 10),
            Trans(0, 11, 4, 10),
            Trans(0, 12, 4, 10),
            Trans(0, 13, 4, 10),
        ],
        k: 1,
    },
    /* 7 - "DoubleColon" */
    LookaheadDFA {
        prod0: 18,
        transitions: &[],
        k: 0,
    },
    /* 8 - "Factor" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 19, 4, 30),
            Trans(0, 21, 1, 27),
            Trans(0, 23, 3, 29),
            Trans(0, 25, 2, 28),
            Trans(0, 27, 4, 30),
            Trans(0, 28, 4, 30),
            Trans(0, 29, 4, 30),
            Trans(0, 32, 4, 30),
            Trans(0, 33, 4, 30),
            Trans(0, 34, 4, 30),
            Trans(0, 36, 4, 30),
        ],
        k: 1,
    },
    /* 9 - "GrammarDefinition" */
    LookaheadDFA {
        prod0: 15,
        transitions: &[],
        k: 0,
    },
    /* 10 - "GrammarDefinitionList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 0, 2, 17), Trans(0, 27, 1, 16)],
        k: 1,
    },
    /* 11 - "Group" */
    LookaheadDFA {
        prod0: 44,
        transitions: &[],
        k: 0,
    },
    /* 12 - "Identifier" */
    LookaheadDFA {
        prod0: 50,
        transitions: &[],
        k: 0,
    },
    /* 13 - "LiteralString" */
    LookaheadDFA {
        prod0: 52,
        transitions: &[],
        k: 0,
    },
    /* 14 - "NonTerminal" */
    LookaheadDFA {
        prod0: 47,
        transitions: &[],
        k: 0,
    },
    /* 15 - "NonTerminalOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 16, 1, 48),
            Trans(0, 17, 2, 49),
            Trans(0, 18, 2, 49),
            Trans(0, 19, 2, 49),
            Trans(0, 21, 2, 49),
            Trans(0, 22, 2, 49),
            Trans(0, 23, 2, 49),
            Trans(0, 24, 2, 49),
            Trans(0, 25, 2, 49),
            Trans(0, 26, 2, 49),
            Trans(0, 27, 2, 49),
            Trans(0, 28, 2, 49),
            Trans(0, 29, 2, 49),
            Trans(0, 32, 2, 49),
            Trans(0, 33, 2, 49),
            Trans(0, 34, 2, 49),
            Trans(0, 35, 1, 48),
            Trans(0, 36, 2, 49),
        ],
        k: 1,
    },
    /* 16 - "Optional" */
    LookaheadDFA {
        prod0: 45,
        transitions: &[],
        k: 0,
    },
    /* 17 - "ParolLs" */
    LookaheadDFA {
        prod0: 0,
        transitions: &[],
        k: 0,
    },
    /* 18 - "Production" */
    LookaheadDFA {
        prod0: 20,
        transitions: &[],
        k: 0,
    },
    /* 19 - "ProductionLHS" */
    LookaheadDFA {
        prod0: 19,
        transitions: &[],
        k: 0,
    },
    /* 20 - "Prolog" */
    LookaheadDFA {
        prod0: 1,
        transitions: &[],
        k: 0,
    },
    /* 21 - "PrologList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 1, 4),
            Trans(0, 7, 1, 4),
            Trans(0, 8, 1, 4),
            Trans(0, 10, 1, 4),
            Trans(0, 11, 1, 4),
            Trans(0, 12, 1, 4),
            Trans(0, 13, 1, 4),
            Trans(0, 14, 2, 5),
            Trans(0, 30, 2, 5),
        ],
        k: 1,
    },
    /* 22 - "PrologList0" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 14, 2, 3), Trans(0, 30, 1, 2)],
        k: 1,
    },
    /* 23 - "Regex" */
    LookaheadDFA {
        prod0: 71,
        transitions: &[],
        k: 0,
    },
    /* 24 - "Repeat" */
    LookaheadDFA {
        prod0: 46,
        transitions: &[],
        k: 0,
    },
    /* 25 - "ScannerDirectives" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 10, 1, 11),
            Trans(0, 11, 2, 12),
            Trans(0, 12, 3, 13),
            Trans(0, 13, 4, 14),
        ],
        k: 1,
    },
    /* 26 - "ScannerState" */
    LookaheadDFA {
        prod0: 53,
        transitions: &[],
        k: 0,
    },
    /* 27 - "ScannerStateList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 10, 1, 54),
            Trans(0, 11, 1, 54),
            Trans(0, 12, 1, 54),
            Trans(0, 13, 1, 54),
            Trans(0, 26, 2, 55),
        ],
        k: 1,
    },
    /* 28 - "ScannerSwitch" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 32, 1, 59),
            Trans(0, 33, 2, 60),
            Trans(0, 34, 3, 61),
        ],
        k: 1,
    },
    /* 29 - "ScannerSwitchOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 22, 2, 63), Trans(0, 27, 1, 62)],
        k: 1,
    },
    /* 30 - "SimpleToken" */
    LookaheadDFA {
        prod0: 38,
        transitions: &[],
        k: 0,
    },
    /* 31 - "SimpleTokenOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 16, 1, 39),
            Trans(0, 17, 2, 40),
            Trans(0, 18, 2, 40),
            Trans(0, 19, 2, 40),
            Trans(0, 21, 2, 40),
            Trans(0, 22, 2, 40),
            Trans(0, 23, 2, 40),
            Trans(0, 24, 2, 40),
            Trans(0, 25, 2, 40),
            Trans(0, 26, 2, 40),
            Trans(0, 27, 2, 40),
            Trans(0, 28, 2, 40),
            Trans(0, 29, 2, 40),
            Trans(0, 32, 2, 40),
            Trans(0, 33, 2, 40),
            Trans(0, 34, 2, 40),
            Trans(0, 35, 1, 39),
            Trans(0, 36, 2, 40),
        ],
        k: 1,
    },
    /* 32 - "StartDeclaration" */
    LookaheadDFA {
        prod0: 6,
        transitions: &[],
        k: 0,
    },
    /* 33 - "StateList" */
    LookaheadDFA {
        prod0: 56,
        transitions: &[],
        k: 0,
    },
    /* 34 - "StateListList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 20, 2, 58), Trans(0, 31, 1, 57)],
        k: 1,
    },
    /* 35 - "String" */
    LookaheadDFA {
        prod0: 51,
        transitions: &[],
        k: 0,
    },
    /* 36 - "Symbol" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 19, 3, 33),
            Trans(0, 27, 1, 31),
            Trans(0, 28, 2, 32),
            Trans(0, 29, 2, 32),
            Trans(0, 32, 4, 34),
            Trans(0, 33, 4, 34),
            Trans(0, 34, 4, 34),
            Trans(0, 36, 2, 32),
        ],
        k: 1,
    },
    /* 37 - "TokenLiteral" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 28, 1, 35),
            Trans(0, 29, 2, 36),
            Trans(0, 36, 3, 37),
        ],
        k: 1,
    },
    /* 38 - "TokenWithStates" */
    LookaheadDFA {
        prod0: 41,
        transitions: &[],
        k: 0,
    },
    /* 39 - "TokenWithStatesOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 16, 1, 42),
            Trans(0, 17, 2, 43),
            Trans(0, 18, 2, 43),
            Trans(0, 19, 2, 43),
            Trans(0, 21, 2, 43),
            Trans(0, 22, 2, 43),
            Trans(0, 23, 2, 43),
            Trans(0, 24, 2, 43),
            Trans(0, 25, 2, 43),
            Trans(0, 26, 2, 43),
            Trans(0, 27, 2, 43),
            Trans(0, 28, 2, 43),
            Trans(0, 29, 2, 43),
            Trans(0, 32, 2, 43),
            Trans(0, 33, 2, 43),
            Trans(0, 34, 2, 43),
            Trans(0, 35, 1, 42),
            Trans(0, 36, 2, 43),
        ],
        k: 1,
    },
    /* 40 - "UserTypeDeclaration" */
    LookaheadDFA {
        prod0: 67,
        transitions: &[],
        k: 0,
    },
    /* 41 - "UserTypeName" */
    LookaheadDFA {
        prod0: 68,
        transitions: &[],
        k: 0,
    },
    /* 42 - "UserTypeNameList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 2, 70),
            Trans(0, 7, 2, 70),
            Trans(0, 8, 2, 70),
            Trans(0, 10, 2, 70),
            Trans(0, 11, 2, 70),
            Trans(0, 12, 2, 70),
            Trans(0, 13, 2, 70),
            Trans(0, 14, 2, 70),
            Trans(0, 15, 1, 69),
            Trans(0, 17, 2, 70),
            Trans(0, 18, 2, 70),
            Trans(0, 19, 2, 70),
            Trans(0, 21, 2, 70),
            Trans(0, 22, 2, 70),
            Trans(0, 23, 2, 70),
            Trans(0, 24, 2, 70),
            Trans(0, 25, 2, 70),
            Trans(0, 26, 2, 70),
            Trans(0, 27, 2, 70),
            Trans(0, 28, 2, 70),
            Trans(0, 29, 2, 70),
            Trans(0, 30, 2, 70),
            Trans(0, 32, 2, 70),
            Trans(0, 33, 2, 70),
            Trans(0, 34, 2, 70),
            Trans(0, 36, 2, 70),
        ],
        k: 1,
    },
];

pub const PRODUCTIONS: &[Production; 72] = &[
    // 0 - ParolLs: Prolog GrammarDefinition;
    Production {
        lhs: 17,
        production: &[ParseType::N(9), ParseType::N(20)],
    },
    // 1 - Prolog: StartDeclaration PrologList /* Vec */ PrologList0 /* Vec */;
    Production {
        lhs: 20,
        production: &[ParseType::N(22), ParseType::N(21), ParseType::N(32)],
    },
    // 2 - PrologList0: ScannerState PrologList0;
    Production {
        lhs: 22,
        production: &[ParseType::N(22), ParseType::N(26)],
    },
    // 3 - PrologList0: ;
    Production {
        lhs: 22,
        production: &[],
    },
    // 4 - PrologList: Declaration PrologList;
    Production {
        lhs: 21,
        production: &[ParseType::N(21), ParseType::N(6)],
    },
    // 5 - PrologList: ;
    Production {
        lhs: 21,
        production: &[],
    },
    // 6 - StartDeclaration: "%start" Identifier;
    Production {
        lhs: 32,
        production: &[ParseType::N(12), ParseType::T(5)],
    },
    // 7 - Declaration: "%title" String;
    Production {
        lhs: 6,
        production: &[ParseType::N(35), ParseType::T(6)],
    },
    // 8 - Declaration: "%comment" String;
    Production {
        lhs: 6,
        production: &[ParseType::N(35), ParseType::T(7)],
    },
    // 9 - Declaration: "%user_type" Identifier "=" UserTypeName;
    Production {
        lhs: 6,
        production: &[
            ParseType::N(41),
            ParseType::T(9),
            ParseType::N(12),
            ParseType::T(8),
        ],
    },
    // 10 - Declaration: ScannerDirectives;
    Production {
        lhs: 6,
        production: &[ParseType::N(25)],
    },
    // 11 - ScannerDirectives: "%line_comment" TokenLiteral;
    Production {
        lhs: 25,
        production: &[ParseType::N(37), ParseType::T(10)],
    },
    // 12 - ScannerDirectives: "%block_comment" TokenLiteral TokenLiteral;
    Production {
        lhs: 25,
        production: &[ParseType::N(37), ParseType::N(37), ParseType::T(11)],
    },
    // 13 - ScannerDirectives: "%auto_newline_off";
    Production {
        lhs: 25,
        production: &[ParseType::T(12)],
    },
    // 14 - ScannerDirectives: "%auto_ws_off";
    Production {
        lhs: 25,
        production: &[ParseType::T(13)],
    },
    // 15 - GrammarDefinition: "%%" Production GrammarDefinitionList /* Vec */;
    Production {
        lhs: 9,
        production: &[ParseType::N(10), ParseType::N(18), ParseType::T(14)],
    },
    // 16 - GrammarDefinitionList: Production GrammarDefinitionList;
    Production {
        lhs: 10,
        production: &[ParseType::N(10), ParseType::N(18)],
    },
    // 17 - GrammarDefinitionList: ;
    Production {
        lhs: 10,
        production: &[],
    },
    // 18 - DoubleColon: "::";
    Production {
        lhs: 7,
        production: &[ParseType::T(15)],
    },
    // 19 - ProductionLHS: Identifier ":";
    Production {
        lhs: 19,
        production: &[ParseType::T(16), ParseType::N(12)],
    },
    // 20 - Production: ProductionLHS Alternations ";";
    Production {
        lhs: 18,
        production: &[ParseType::T(17), ParseType::N(3), ParseType::N(19)],
    },
    // 21 - Alternations: Alternation AlternationsList /* Vec */;
    Production {
        lhs: 3,
        production: &[ParseType::N(4), ParseType::N(1)],
    },
    // 22 - AlternationsList: '|' Alternation AlternationsList;
    Production {
        lhs: 4,
        production: &[ParseType::N(4), ParseType::N(1), ParseType::T(18)],
    },
    // 23 - AlternationsList: ;
    Production {
        lhs: 4,
        production: &[],
    },
    // 24 - Alternation: AlternationList /* Vec */;
    Production {
        lhs: 1,
        production: &[ParseType::N(2)],
    },
    // 25 - AlternationList: Factor AlternationList;
    Production {
        lhs: 2,
        production: &[ParseType::N(2), ParseType::N(8)],
    },
    // 26 - AlternationList: ;
    Production {
        lhs: 2,
        production: &[],
    },
    // 27 - Factor: Group;
    Production {
        lhs: 8,
        production: &[ParseType::N(11)],
    },
    // 28 - Factor: Repeat;
    Production {
        lhs: 8,
        production: &[ParseType::N(24)],
    },
    // 29 - Factor: Optional;
    Production {
        lhs: 8,
        production: &[ParseType::N(16)],
    },
    // 30 - Factor: Symbol;
    Production {
        lhs: 8,
        production: &[ParseType::N(36)],
    },
    // 31 - Symbol: NonTerminal;
    Production {
        lhs: 36,
        production: &[ParseType::N(14)],
    },
    // 32 - Symbol: SimpleToken;
    Production {
        lhs: 36,
        production: &[ParseType::N(30)],
    },
    // 33 - Symbol: TokenWithStates;
    Production {
        lhs: 36,
        production: &[ParseType::N(38)],
    },
    // 34 - Symbol: ScannerSwitch;
    Production {
        lhs: 36,
        production: &[ParseType::N(28)],
    },
    // 35 - TokenLiteral: String;
    Production {
        lhs: 37,
        production: &[ParseType::N(35)],
    },
    // 36 - TokenLiteral: LiteralString;
    Production {
        lhs: 37,
        production: &[ParseType::N(13)],
    },
    // 37 - TokenLiteral: Regex;
    Production {
        lhs: 37,
        production: &[ParseType::N(23)],
    },
    // 38 - SimpleToken: TokenLiteral SimpleTokenOpt /* Option */;
    Production {
        lhs: 30,
        production: &[ParseType::N(31), ParseType::N(37)],
    },
    // 39 - SimpleTokenOpt: ASTControl;
    Production {
        lhs: 31,
        production: &[ParseType::N(0)],
    },
    // 40 - SimpleTokenOpt: ;
    Production {
        lhs: 31,
        production: &[],
    },
    // 41 - TokenWithStates: "<" StateList ">" TokenLiteral TokenWithStatesOpt /* Option */;
    Production {
        lhs: 38,
        production: &[
            ParseType::N(39),
            ParseType::N(37),
            ParseType::T(20),
            ParseType::N(33),
            ParseType::T(19),
        ],
    },
    // 42 - TokenWithStatesOpt: ASTControl;
    Production {
        lhs: 39,
        production: &[ParseType::N(0)],
    },
    // 43 - TokenWithStatesOpt: ;
    Production {
        lhs: 39,
        production: &[],
    },
    // 44 - Group: '(' Alternations ')';
    Production {
        lhs: 11,
        production: &[ParseType::T(22), ParseType::N(3), ParseType::T(21)],
    },
    // 45 - Optional: '[' Alternations ']';
    Production {
        lhs: 16,
        production: &[ParseType::T(24), ParseType::N(3), ParseType::T(23)],
    },
    // 46 - Repeat: '{' Alternations '}';
    Production {
        lhs: 24,
        production: &[ParseType::T(26), ParseType::N(3), ParseType::T(25)],
    },
    // 47 - NonTerminal: Identifier NonTerminalOpt /* Option */;
    Production {
        lhs: 14,
        production: &[ParseType::N(15), ParseType::N(12)],
    },
    // 48 - NonTerminalOpt: ASTControl;
    Production {
        lhs: 15,
        production: &[ParseType::N(0)],
    },
    // 49 - NonTerminalOpt: ;
    Production {
        lhs: 15,
        production: &[],
    },
    // 50 - Identifier: /[a-zA-Z_][a-zA-Z0-9_]*/;
    Production {
        lhs: 12,
        production: &[ParseType::T(27)],
    },
    // 51 - String: /"(\\.|[^\\])*?"/;
    Production {
        lhs: 35,
        production: &[ParseType::T(28)],
    },
    // 52 - LiteralString: /'(\\'|[^'])*?'/;
    Production {
        lhs: 13,
        production: &[ParseType::T(29)],
    },
    // 53 - ScannerState: "%scanner" Identifier '{' ScannerStateList /* Vec */ '}';
    Production {
        lhs: 26,
        production: &[
            ParseType::T(26),
            ParseType::N(27),
            ParseType::T(25),
            ParseType::N(12),
            ParseType::T(30),
        ],
    },
    // 54 - ScannerStateList: ScannerDirectives ScannerStateList;
    Production {
        lhs: 27,
        production: &[ParseType::N(27), ParseType::N(25)],
    },
    // 55 - ScannerStateList: ;
    Production {
        lhs: 27,
        production: &[],
    },
    // 56 - StateList: Identifier StateListList /* Vec */;
    Production {
        lhs: 33,
        production: &[ParseType::N(34), ParseType::N(12)],
    },
    // 57 - StateListList: "," Identifier StateListList;
    Production {
        lhs: 34,
        production: &[ParseType::N(34), ParseType::N(12), ParseType::T(31)],
    },
    // 58 - StateListList: ;
    Production {
        lhs: 34,
        production: &[],
    },
    // 59 - ScannerSwitch: "%sc" '(' ScannerSwitchOpt /* Option */ ')';
    Production {
        lhs: 28,
        production: &[
            ParseType::T(22),
            ParseType::N(29),
            ParseType::T(21),
            ParseType::T(32),
        ],
    },
    // 60 - ScannerSwitch: "%push" '(' Identifier ')';
    Production {
        lhs: 28,
        production: &[
            ParseType::T(22),
            ParseType::N(12),
            ParseType::T(21),
            ParseType::T(33),
        ],
    },
    // 61 - ScannerSwitch: "%pop" '(' ')';
    Production {
        lhs: 28,
        production: &[ParseType::T(22), ParseType::T(21), ParseType::T(34)],
    },
    // 62 - ScannerSwitchOpt: Identifier;
    Production {
        lhs: 29,
        production: &[ParseType::N(12)],
    },
    // 63 - ScannerSwitchOpt: ;
    Production {
        lhs: 29,
        production: &[],
    },
    // 64 - ASTControl: CutOperator;
    Production {
        lhs: 0,
        production: &[ParseType::N(5)],
    },
    // 65 - ASTControl: UserTypeDeclaration;
    Production {
        lhs: 0,
        production: &[ParseType::N(40)],
    },
    // 66 - CutOperator: '^';
    Production {
        lhs: 5,
        production: &[ParseType::T(35)],
    },
    // 67 - UserTypeDeclaration: ":" UserTypeName;
    Production {
        lhs: 40,
        production: &[ParseType::N(41), ParseType::T(16)],
    },
    // 68 - UserTypeName: Identifier UserTypeNameList /* Vec */;
    Production {
        lhs: 41,
        production: &[ParseType::N(42), ParseType::N(12)],
    },
    // 69 - UserTypeNameList: DoubleColon Identifier UserTypeNameList;
    Production {
        lhs: 42,
        production: &[ParseType::N(42), ParseType::N(12), ParseType::N(7)],
    },
    // 70 - UserTypeNameList: ;
    Production {
        lhs: 42,
        production: &[],
    },
    // 71 - Regex: /\u{2f}(\\.|[^\\])*?\u{2f}/;
    Production {
        lhs: 23,
        production: &[ParseType::T(36)],
    },
];

static TOKENIZERS: Lazy<Vec<(&'static str, Tokenizer)>> = Lazy::new(|| {
    vec![(
        "INITIAL",
        Tokenizer::build(TERMINALS, SCANNER_0.0, SCANNER_0.1).unwrap(),
    )]
});

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut ParolLsGrammar,
) -> Result<ParseTree<'t>, ParolError>
where
    T: AsRef<Path>,
{
    let mut llk_parser = LLKParser::new(
        17,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    llk_parser.trim_parse_tree();
    let token_stream =
        RefCell::new(TokenStream::new(input, file_name, &TOKENIZERS, MAX_K).unwrap());
    // Initialize wrapper
    let mut user_actions = ParolLsGrammarAuto::new(user_actions);
    llk_parser.parse(token_stream, &mut user_actions)
}
