%start ParolLs
%title "Parol grammar"
%comment "Parol's own grammar enhanced with comment processing"
%line_comment "//"
%block_comment "/\*" "\*/"
%t_type = crate::parol_ls_grammar::OwnedToken

%%

/*  0 */ ParolLs: Prolog GrammarDefinition;
/*  1 */ Prolog: StartDeclaration PrologList /* Vec */ PrologList0 /* Vec */;
/*  2 */ PrologList0 /* Vec<T>::Push */: ScannerState PrologList0;
/*  3 */ PrologList0 /* Vec<T>::New */: ;
/*  4 */ PrologList /* Vec<T>::Push */: Declaration PrologList;
/*  5 */ PrologList /* Vec<T>::New */: ;
/*  6 */ StartDeclaration: "%start" Identifier;
/*  7 */ Declaration: "%title" String;
/*  8 */ Declaration: "%comment" String;
/*  9 */ Declaration: "%user_type" Identifier "=" UserTypeName;
/* 10 */ Declaration: "%nt_type" Identifier@nt_name "=" UserTypeName@nt_type;
/* 11 */ Declaration: "%t_type" UserTypeName@t_type;
/* 12 */ Declaration: '%grammar_type' LiteralString;
/* 13 */ Declaration: ScannerDirectives;
/* 14 */ ScannerDirectives: "%line_comment" TokenLiteral;
/* 15 */ ScannerDirectives: "%block_comment" TokenLiteral TokenLiteral;
/* 16 */ ScannerDirectives: "%auto_newline_off";
/* 17 */ ScannerDirectives: "%auto_ws_off";
/* 18 */ ScannerDirectives: '%on' IdentifierList '%enter' Identifier;
/* 19 */ GrammarDefinition: "%%" Production GrammarDefinitionList /* Vec */;
/* 20 */ GrammarDefinitionList /* Vec<T>::Push */: Production GrammarDefinitionList;
/* 21 */ GrammarDefinitionList /* Vec<T>::New */: ;
/* 22 */ DoubleColon: "::";
/* 23 */ ProductionLHS: Identifier ":";
/* 24 */ Production: ProductionLHS Alternations ";";
/* 25 */ Alternations: Alternation AlternationsList /* Vec */;
/* 26 */ AlternationsList /* Vec<T>::Push */: '|' Alternation AlternationsList;
/* 27 */ AlternationsList /* Vec<T>::New */: ;
/* 28 */ Alternation: AlternationList /* Vec */;
/* 29 */ AlternationList /* Vec<T>::Push */: Factor AlternationList;
/* 30 */ AlternationList /* Vec<T>::New */: ;
/* 31 */ Factor: Group;
/* 32 */ Factor: Repeat;
/* 33 */ Factor: Optional;
/* 34 */ Factor: Symbol;
/* 35 */ Symbol: NonTerminal;
/* 36 */ Symbol: SimpleToken;
/* 37 */ Symbol: TokenWithStates;
/* 38 */ Symbol: ScannerSwitch;
/* 39 */ TokenLiteral: String;
/* 40 */ TokenLiteral: LiteralString;
/* 41 */ TokenLiteral: Regex;
/* 42 */ TokenExpression: TokenLiteral TokenExpressionOpt /* Option */;
/* 43 */ TokenExpressionOpt /* Option<T>::Some */: LookAhead;
/* 44 */ TokenExpressionOpt /* Option<T>::None */: ;
/* 45 */ SimpleToken: TokenExpression SimpleTokenOpt /* Option */;
/* 46 */ SimpleTokenOpt /* Option<T>::Some */: ASTControl;
/* 47 */ SimpleTokenOpt /* Option<T>::None */: ;
/* 48 */ TokenWithStates: "<" IdentifierList ">" TokenExpression TokenWithStatesOpt /* Option */;
/* 49 */ TokenWithStatesOpt /* Option<T>::Some */: ASTControl;
/* 50 */ TokenWithStatesOpt /* Option<T>::None */: ;
/* 51 */ Group: '(' Alternations ')';
/* 52 */ Optional: '[' Alternations ']';
/* 53 */ Repeat: '{' Alternations '}';
/* 54 */ NonTerminal: Identifier NonTerminalOpt /* Option */;
/* 55 */ NonTerminalOpt /* Option<T>::Some */: ASTControl;
/* 56 */ NonTerminalOpt /* Option<T>::None */: ;
/* 57 */ Identifier: /[a-zA-Z_][a-zA-Z0-9_]*/;
/* 58 */ String: /"(\\.|[^"])*"/;
/* 59 */ LiteralString: /'(\\.|[^'])*'/;
/* 60 */ ScannerState: "%scanner" Identifier '{' ScannerStateList /* Vec */ '}';
/* 61 */ ScannerStateList /* Vec<T>::Push */: ScannerDirectives ScannerStateList;
/* 62 */ ScannerStateList /* Vec<T>::New */: ;
/* 63 */ IdentifierList: Identifier IdentifierListList /* Vec */;
/* 64 */ IdentifierListList /* Vec<T>::Push */: "," Identifier IdentifierListList;
/* 65 */ IdentifierListList /* Vec<T>::New */: ;
/* 66 */ ScannerSwitch: "%sc" '(' ScannerSwitchOpt /* Option */ ')';
/* 67 */ ScannerSwitch: "%push" '(' Identifier ')';
/* 68 */ ScannerSwitch: "%pop" '(' ')';
/* 69 */ ScannerSwitchOpt /* Option<T>::Some */: Identifier;
/* 70 */ ScannerSwitchOpt /* Option<T>::None */: ;
/* 71 */ ASTControl: CutOperator;
/* 72 */ ASTControl: MemberName ASTControlOpt /* Option */;
/* 73 */ ASTControl: UserTypeDeclaration;
/* 74 */ ASTControlOpt /* Option<T>::Some */: UserTypeDeclaration;
/* 75 */ ASTControlOpt /* Option<T>::None */: ;
/* 76 */ MemberName: '@'^ /* Clipped */ Identifier;
/* 77 */ CutOperator: '^';
/* 78 */ UserTypeDeclaration: ":" UserTypeName;
/* 79 */ UserTypeName: Identifier UserTypeNameList /* Vec */;
/* 80 */ UserTypeNameList /* Vec<T>::Push */: DoubleColon Identifier UserTypeNameList;
/* 81 */ UserTypeNameList /* Vec<T>::New */: ;
/* 82 */ Regex: "/(\\.|[^\/])*/";
/* 83 */ LookAhead: LookAheadGroup TokenLiteral;
/* 84 */ LookAheadGroup: PositiveLookahead;
/* 85 */ LookAheadGroup: NegativeLookahead;
/* 86 */ PositiveLookahead: '?=';
/* 87 */ NegativeLookahead: '?!';
