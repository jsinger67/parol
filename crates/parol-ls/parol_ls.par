%start ParolLs
%title "Parol grammar"
%comment "Parol's own grammar enhanced with comment processing"
%grammar_type 'll(k)'
%line_comment '//'
%block_comment '/*' '*/'
%t_type crate::parol_ls_grammar::OwnedToken

%%

ParolLs
    : Prolog GrammarDefinition
    ;

Prolog
    : StartDeclaration { Declaration } { ScannerState }
    ;

StartDeclaration
    : "%start" Identifier
    ;

Declaration
    : "%title" String
    | "%comment" String
    | "%user_type" Identifier "=" UserTypeName
    | "%nt_type" Identifier@nt_name "=" UserTypeName@nt_type // User type for a non-terminal
    | "%t_type" UserTypeName@t_type // User type for all terminals, the last will win
    | '%grammar_type' LiteralString // The type of the grammar, e.g. LL(k), LALR(1)
    | ScannerDirectives
    ;

ScannerDirectives
    : "%line_comment" TokenLiteral
    | "%block_comment" TokenLiteral TokenLiteral
    | "%auto_newline_off"
    | "%auto_ws_off"
    | '%on' IdentifierList ScannerStateDirectives
    ;

ScannerStateDirectives
    : '%enter' Identifier // Scanner state enter directives
    | '%push' Identifier // Scanner state push directives
    | '%pop' // Scanner state pop directives
    ;

GrammarDefinition
    : "%%" Production { Production }
    ;

DoubleColon
    : "::"
    ;

ProductionLHS
    : Identifier ":"
    ;

Production
    : ProductionLHS Alternations ";"
    ;

Alternations
    : Alternation { '|' Alternation }
    ;

Alternation
    : { Factor }
    ;

Factor
    : Group
    | Repeat
    | Optional
    | Symbol
    ;

Symbol
    : NonTerminal
    | SimpleToken
    | TokenWithStates
    | ScannerSwitch
    ;

TokenLiteral
    : String
    | LiteralString
    | Regex
    ;

TokenExpression
    : TokenLiteral [ LookAhead ]
    ;

SimpleToken
    : TokenExpression [ ASTControl ]
    ;

TokenWithStates
    : "<" IdentifierList ">" TokenExpression [ ASTControl ]
    ;

Group
    : '(' Alternations ')'
    ;

Optional
    : '[' Alternations ']'
    ;

Repeat
    : '{' Alternations '}'
    ;

NonTerminal
    : Identifier [ ASTControl ]
    ;

Identifier
    : /[a-zA-Z_][a-zA-Z0-9_]*/
    ;

String
    : /"(\\.|[^"])*"/
    ;

LiteralString
    : /'(\\.|[^'])*'/
    ;

ScannerState
    : "%scanner" Identifier '{' { ScannerDirectives } '}'
    ;

IdentifierList
    : Identifier { "," Identifier }
    ;

ScannerSwitch
    : "%sc" '(' [ Identifier ] ')'
    | "%push" '(' Identifier ')'
    | "%pop" '(' ')'
    ;

ASTControl
    : CutOperator
    | MemberName [ UserTypeDeclaration ]
    | UserTypeDeclaration
    ;

// The name of the member in the AST as it will appear in the generated code
MemberName
    : '@'^ Identifier
    ;

CutOperator
    : '^'
    ;

UserTypeDeclaration
    : ":" UserTypeName
    ;

UserTypeName
    : Identifier { DoubleColon Identifier }
    ;

Regex
    : "/(\\.|[^\/])*/"
    ;

// The lookahead
LookAhead
    : ( PositiveLookahead | NegativeLookahead ) TokenLiteral
    ;

// The positive lookahead operator
PositiveLookahead
    : '?='
    ;

// The negative lookahead operator
NegativeLookahead
    : '?!'
    ;
