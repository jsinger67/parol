%start Parol
%title "Parol grammar"
%comment "Parol's own grammar"
%line_comment "//"
%block_comment "/\*" "\*/"
%user_type ScannerConfig = crate::parser::parol_grammar::ScannerConfig
%user_type UserType = crate::parser::parol_grammar::UserDefinedTypeName

%%

/*  0 */ Parol: Prolog GrammarDefinition;
/*  1 */ Prolog: StartDeclaration PrologList /* Vec */ PrologList0 /* Vec */;
/*  2 */ PrologList0 /* Vec<T>::Push */: ScannerState : ScannerConfig PrologList0;
/*  3 */ PrologList0 /* Vec<T>::New */: ;
/*  4 */ PrologList /* Vec<T>::Push */: Declaration PrologList;
/*  5 */ PrologList /* Vec<T>::New */: ;
/*  6 */ StartDeclaration: '%start'^ /* Clipped */ Identifier;
/*  7 */ Declaration: '%title'^ /* Clipped */ String;
/*  8 */ Declaration: '%comment'^ /* Clipped */ String;
/*  9 */ Declaration: '%user_type'^ /* Clipped */ Identifier '='^ /* Clipped */ UserTypeName : UserType;
/* 10 */ Declaration: '%grammar_type'^ /* Clipped */ RawString;
/* 11 */ Declaration: ScannerDirectives;
/* 12 */ ScannerDirectives: '%line_comment'^ /* Clipped */ TokenLiteral;
/* 13 */ ScannerDirectives: '%block_comment'^ /* Clipped */ TokenLiteral TokenLiteral;
/* 14 */ ScannerDirectives: '%auto_newline_off'^ /* Clipped */;
/* 15 */ ScannerDirectives: '%auto_ws_off'^ /* Clipped */;
/* 16 */ ScannerDirectives: '%on'^ /* Clipped */ IdentifierList '%enter'^ /* Clipped */ Identifier;
/* 17 */ GrammarDefinition: '%%'^ /* Clipped */ Production GrammarDefinitionList /* Vec */;
/* 18 */ GrammarDefinitionList /* Vec<T>::Push */: Production GrammarDefinitionList;
/* 19 */ GrammarDefinitionList /* Vec<T>::New */: ;
/* 20 */ DoubleColon: '::';
/* 21 */ Production: Identifier ':'^ /* Clipped */ Alternations ';'^ /* Clipped */;
/* 22 */ Alternations: Alternation AlternationsList /* Vec */;
/* 23 */ AlternationsList /* Vec<T>::Push */: '|'^ /* Clipped */ Alternation AlternationsList;
/* 24 */ AlternationsList /* Vec<T>::New */: ;
/* 25 */ Alternation: AlternationList /* Vec */;
/* 26 */ AlternationList /* Vec<T>::Push */: Factor AlternationList;
/* 27 */ AlternationList /* Vec<T>::New */: ;
/* 28 */ Factor: Group;
/* 29 */ Factor: Repeat;
/* 30 */ Factor: Optional;
/* 31 */ Factor: Symbol;
/* 32 */ Symbol: NonTerminal;
/* 33 */ Symbol: SimpleToken;
/* 34 */ Symbol: TokenWithStates;
/* 35 */ Symbol: ScannerSwitch;
/* 36 */ TokenLiteral: String;
/* 37 */ TokenLiteral: RawString;
/* 38 */ TokenLiteral: Regex;
/* 39 */ SimpleToken: TokenLiteral SimpleTokenOpt /* Option */;
/* 40 */ SimpleTokenOpt /* Option<T>::Some */: ASTControl;
/* 41 */ SimpleTokenOpt /* Option<T>::None */: ;
/* 42 */ TokenWithStates: '<'^ /* Clipped */ IdentifierList '>'^ /* Clipped */ TokenLiteral TokenWithStatesOpt /* Option */;
/* 43 */ TokenWithStatesOpt /* Option<T>::Some */: ASTControl;
/* 44 */ TokenWithStatesOpt /* Option<T>::None */: ;
/* 45 */ String: /"(\\.|[^"])*"/;
/* 46 */ RawString: /'(\\.|[^'])*'/;
/* 47 */ Regex: "/(\\.|[^\/])*/";
/* 48 */ Group: '(' Alternations ')';
/* 49 */ Optional: '[' Alternations ']';
/* 50 */ Repeat: '{' Alternations '}';
/* 51 */ NonTerminal: Identifier NonTerminalOpt /* Option */;
/* 52 */ NonTerminalOpt /* Option<T>::Some */: ASTControl;
/* 53 */ NonTerminalOpt /* Option<T>::None */: ;
/* 54 */ Identifier: /[a-zA-Z_][a-zA-Z0-9_]*/;
/* 55 */ ScannerState: '%scanner'^ /* Clipped */ Identifier '{'^ /* Clipped */ ScannerStateList /* Vec */ '}'^ /* Clipped */;
/* 56 */ ScannerStateList /* Vec<T>::Push */: ScannerDirectives ScannerStateList;
/* 57 */ ScannerStateList /* Vec<T>::New */: ;
/* 58 */ IdentifierList: Identifier IdentifierListList /* Vec */;
/* 59 */ IdentifierListList /* Vec<T>::Push */: ','^ /* Clipped */ Identifier IdentifierListList;
/* 60 */ IdentifierListList /* Vec<T>::New */: ;
/* 61 */ ScannerSwitch: '%sc' '('^ /* Clipped */ ScannerSwitchOpt /* Option */ ')'^ /* Clipped */;
/* 62 */ ScannerSwitch: '%push' '('^ /* Clipped */ Identifier ')'^ /* Clipped */;
/* 63 */ ScannerSwitch: '%pop' '('^ /* Clipped */ ')'^ /* Clipped */;
/* 64 */ ScannerSwitchOpt /* Option<T>::Some */: Identifier;
/* 65 */ ScannerSwitchOpt /* Option<T>::None */: ;
/* 66 */ ASTControl: CutOperator;
/* 67 */ ASTControl: UserTypeDeclaration;
/* 68 */ CutOperator: '^'^ /* Clipped */;
/* 69 */ UserTypeDeclaration: ':'^ /* Clipped */ UserTypeName : UserType;
/* 70 */ UserTypeName: Identifier UserTypeNameList /* Vec */;
/* 71 */ UserTypeNameList /* Vec<T>::Push */: DoubleColon^ /* Clipped */ Identifier UserTypeNameList;
/* 72 */ UserTypeNameList /* Vec<T>::New */: ;
