// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use parol_runtime::{
    ParolError, ParseTree, TokenStream,
    parser::{
        LLKParser, LookaheadDFA, ParseType, Production, Trans, parse_tree_type::TreeConstruct,
    },
};
use scnr2::scanner;
use std::path::Path;

use crate::parser::parol_grammar::ParolGrammar;
use crate::parser::parol_grammar_trait::ParolGrammarAuto;

pub const TERMINAL_NAMES: &[&str; 47] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "PercentStart",
    /*  6 */ "PercentTitle",
    /*  7 */ "PercentComment",
    /*  8 */ "PercentUserUnderscoreType",
    /*  9 */ "Equ",
    /* 10 */ "PercentNtUnderscoreType",
    /* 11 */ "Equ0",
    /* 12 */ "PercentTUnderscoreType",
    /* 13 */ "PercentGrammarUnderscoreType",
    /* 14 */ "PercentLineUnderscoreComment",
    /* 15 */ "PercentBlockUnderscoreComment",
    /* 16 */ "PercentAutoUnderscoreNewlineUnderscoreOff",
    /* 17 */ "PercentAutoUnderscoreWsUnderscoreOff",
    /* 18 */ "PercentOn",
    /* 19 */ "PercentAllowUnderscoreUnmatched",
    /* 20 */ "PercentEnter",
    /* 21 */ "PercentPush",
    /* 22 */ "PercentPop",
    /* 23 */ "PercentPercent",
    /* 24 */ "DoubleColon",
    /* 25 */ "Colon",
    /* 26 */ "Semicolon",
    /* 27 */ "Or",
    /* 28 */ "LT",
    /* 29 */ "GT",
    /* 30 */ "String",
    /* 31 */ "RawString",
    /* 32 */ "Regex",
    /* 33 */ "LParen",
    /* 34 */ "RParen",
    /* 35 */ "LBracket",
    /* 36 */ "RBracket",
    /* 37 */ "LBrace",
    /* 38 */ "RBrace",
    /* 39 */ "Identifier",
    /* 40 */ "PercentScanner",
    /* 41 */ "Comma",
    /* 42 */ "At",
    /* 43 */ "CutOperator",
    /* 44 */ "PositiveLookahead",
    /* 45 */ "NegativeLookahead",
    /* 46 */ "Error",
];

scanner! {
    ParolGrammarScanner {
        mode INITIAL {
            token r"\r\n|\r|\n" => 1; // "Newline"
            token r"[\s--\r\n]+" => 2; // "Whitespace"
            token r"//.*(\r\n|\r|\n)?" => 3; // "LineComment"
            token r"/\*/?([^/]|[^*]/)*\*/" => 4; // "BlockComment"
            token r"%start" => 5; // "PercentStart"
            token r"%title" => 6; // "PercentTitle"
            token r"%comment" => 7; // "PercentComment"
            token r"%user_type" => 8; // "PercentUserUnderscoreType"
            token r"=" => 9; // "Equ"
            token r"%nt_type" => 10; // "PercentNtUnderscoreType"
            token r"=" => 11; // "Equ0"
            token r"%t_type" => 12; // "PercentTUnderscoreType"
            token r"%grammar_type" => 13; // "PercentGrammarUnderscoreType"
            token r"%line_comment" => 14; // "PercentLineUnderscoreComment"
            token r"%block_comment" => 15; // "PercentBlockUnderscoreComment"
            token r"%auto_newline_off" => 16; // "PercentAutoUnderscoreNewlineUnderscoreOff"
            token r"%auto_ws_off" => 17; // "PercentAutoUnderscoreWsUnderscoreOff"
            token r"%on" => 18; // "PercentOn"
            token r"%allow_unmatched" => 19; // "PercentAllowUnderscoreUnmatched"
            token r"%enter" => 20; // "PercentEnter"
            token r"%push" => 21; // "PercentPush"
            token r"%pop" => 22; // "PercentPop"
            token r"%%" => 23; // "PercentPercent"
            token r"::" => 24; // "DoubleColon"
            token r":" => 25; // "Colon"
            token r";" => 26; // "Semicolon"
            token r"\|" => 27; // "Or"
            token r"<" => 28; // "LT"
            token r">" => 29; // "GT"
            token r#""(\\.|[^"])*""# => 30; // "String"
            token r"'(\\.|[^'])*'" => 31; // "RawString"
            token r"/(\\.|[^\/])*/" => 32; // "Regex"
            token r"\(" => 33; // "LParen"
            token r"\)" => 34; // "RParen"
            token r"\[" => 35; // "LBracket"
            token r"\]" => 36; // "RBracket"
            token r"\{" => 37; // "LBrace"
            token r"\}" => 38; // "RBrace"
            token r"[a-zA-Z_][a-zA-Z0-9_]*" => 39; // "Identifier"
            token r"%scanner" => 40; // "PercentScanner"
            token r"," => 41; // "Comma"
            token r"@" => 42; // "At"
            token r"\^" => 43; // "CutOperator"
            token r"\?=" => 44; // "PositiveLookahead"
            token r"\?!" => 45; // "NegativeLookahead"
            token r"." => 46; // "Error"
        }
    }
}

const MAX_K: usize = 1;

pub const NON_TERMINALS: &[&str; 49] = &[
    /*  0 */ "ASTControl",
    /*  1 */ "ASTControlOpt",
    /*  2 */ "Alternation",
    /*  3 */ "AlternationList",
    /*  4 */ "Alternations",
    /*  5 */ "AlternationsList",
    /*  6 */ "CutOperator",
    /*  7 */ "Declaration",
    /*  8 */ "DoubleColon",
    /*  9 */ "Factor",
    /* 10 */ "GrammarDefinition",
    /* 11 */ "GrammarDefinitionList",
    /* 12 */ "Group",
    /* 13 */ "Identifier",
    /* 14 */ "IdentifierList",
    /* 15 */ "IdentifierListList",
    /* 16 */ "LookAhead",
    /* 17 */ "LookAheadGroup",
    /* 18 */ "MemberName",
    /* 19 */ "NegativeLookahead",
    /* 20 */ "NonTerminal",
    /* 21 */ "NonTerminalOpt",
    /* 22 */ "Optional",
    /* 23 */ "Parol",
    /* 24 */ "PositiveLookahead",
    /* 25 */ "Production",
    /* 26 */ "Prolog",
    /* 27 */ "PrologList",
    /* 28 */ "PrologList0",
    /* 29 */ "RawString",
    /* 30 */ "Regex",
    /* 31 */ "Repeat",
    /* 32 */ "ScannerDirectives",
    /* 33 */ "ScannerState",
    /* 34 */ "ScannerStateDirectives",
    /* 35 */ "ScannerStateList",
    /* 36 */ "SimpleToken",
    /* 37 */ "SimpleTokenOpt",
    /* 38 */ "StartDeclaration",
    /* 39 */ "String",
    /* 40 */ "Symbol",
    /* 41 */ "TokenExpression",
    /* 42 */ "TokenExpressionOpt",
    /* 43 */ "TokenLiteral",
    /* 44 */ "TokenWithStates",
    /* 45 */ "TokenWithStatesOpt",
    /* 46 */ "UserTypeDeclaration",
    /* 47 */ "UserTypeName",
    /* 48 */ "UserTypeNameList",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 49] = &[
    /* 0 - "ASTControl" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 25, 3, 71),
            Trans(0, 42, 2, 70),
            Trans(0, 43, 1, 69),
        ],
        k: 1,
    },
    /* 1 - "ASTControlOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 25, 1, 72),
            Trans(0, 26, 2, 73),
            Trans(0, 27, 2, 73),
            Trans(0, 28, 2, 73),
            Trans(0, 30, 2, 73),
            Trans(0, 31, 2, 73),
            Trans(0, 32, 2, 73),
            Trans(0, 33, 2, 73),
            Trans(0, 34, 2, 73),
            Trans(0, 35, 2, 73),
            Trans(0, 36, 2, 73),
            Trans(0, 37, 2, 73),
            Trans(0, 38, 2, 73),
            Trans(0, 39, 2, 73),
        ],
        k: 1,
    },
    /* 2 - "Alternation" */
    LookaheadDFA {
        prod0: 31,
        transitions: &[],
        k: 0,
    },
    /* 3 - "AlternationList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 26, 2, 33),
            Trans(0, 27, 2, 33),
            Trans(0, 28, 1, 32),
            Trans(0, 30, 1, 32),
            Trans(0, 31, 1, 32),
            Trans(0, 32, 1, 32),
            Trans(0, 33, 1, 32),
            Trans(0, 34, 2, 33),
            Trans(0, 35, 1, 32),
            Trans(0, 36, 2, 33),
            Trans(0, 37, 1, 32),
            Trans(0, 38, 2, 33),
            Trans(0, 39, 1, 32),
        ],
        k: 1,
    },
    /* 4 - "Alternations" */
    LookaheadDFA {
        prod0: 28,
        transitions: &[],
        k: 0,
    },
    /* 5 - "AlternationsList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 26, 2, 30),
            Trans(0, 27, 1, 29),
            Trans(0, 34, 2, 30),
            Trans(0, 36, 2, 30),
            Trans(0, 38, 2, 30),
        ],
        k: 1,
    },
    /* 6 - "CutOperator" */
    LookaheadDFA {
        prod0: 75,
        transitions: &[],
        k: 0,
    },
    /* 7 - "Declaration" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 1, 7),
            Trans(0, 7, 2, 8),
            Trans(0, 8, 3, 9),
            Trans(0, 10, 4, 10),
            Trans(0, 12, 5, 11),
            Trans(0, 13, 6, 12),
            Trans(0, 14, 7, 13),
            Trans(0, 15, 7, 13),
            Trans(0, 16, 7, 13),
            Trans(0, 17, 7, 13),
            Trans(0, 18, 7, 13),
            Trans(0, 19, 7, 13),
        ],
        k: 1,
    },
    /* 8 - "DoubleColon" */
    LookaheadDFA {
        prod0: 26,
        transitions: &[],
        k: 0,
    },
    /* 9 - "Factor" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 28, 4, 37),
            Trans(0, 30, 4, 37),
            Trans(0, 31, 4, 37),
            Trans(0, 32, 4, 37),
            Trans(0, 33, 1, 34),
            Trans(0, 35, 3, 36),
            Trans(0, 37, 2, 35),
            Trans(0, 39, 4, 37),
        ],
        k: 1,
    },
    /* 10 - "GrammarDefinition" */
    LookaheadDFA {
        prod0: 23,
        transitions: &[],
        k: 0,
    },
    /* 11 - "GrammarDefinitionList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 0, 2, 25), Trans(0, 39, 1, 24)],
        k: 1,
    },
    /* 12 - "Group" */
    LookaheadDFA {
        prod0: 56,
        transitions: &[],
        k: 0,
    },
    /* 13 - "Identifier" */
    LookaheadDFA {
        prod0: 62,
        transitions: &[],
        k: 0,
    },
    /* 14 - "IdentifierList" */
    LookaheadDFA {
        prod0: 66,
        transitions: &[],
        k: 0,
    },
    /* 15 - "IdentifierListList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 20, 2, 68),
            Trans(0, 21, 2, 68),
            Trans(0, 22, 2, 68),
            Trans(0, 29, 2, 68),
            Trans(0, 41, 1, 67),
        ],
        k: 1,
    },
    /* 16 - "LookAhead" */
    LookaheadDFA {
        prod0: 80,
        transitions: &[],
        k: 0,
    },
    /* 17 - "LookAheadGroup" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 44, 1, 81), Trans(0, 45, 2, 82)],
        k: 1,
    },
    /* 18 - "MemberName" */
    LookaheadDFA {
        prod0: 74,
        transitions: &[],
        k: 0,
    },
    /* 19 - "NegativeLookahead" */
    LookaheadDFA {
        prod0: 84,
        transitions: &[],
        k: 0,
    },
    /* 20 - "NonTerminal" */
    LookaheadDFA {
        prod0: 59,
        transitions: &[],
        k: 0,
    },
    /* 21 - "NonTerminalOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 25, 1, 60),
            Trans(0, 26, 2, 61),
            Trans(0, 27, 2, 61),
            Trans(0, 28, 2, 61),
            Trans(0, 30, 2, 61),
            Trans(0, 31, 2, 61),
            Trans(0, 32, 2, 61),
            Trans(0, 33, 2, 61),
            Trans(0, 34, 2, 61),
            Trans(0, 35, 2, 61),
            Trans(0, 36, 2, 61),
            Trans(0, 37, 2, 61),
            Trans(0, 38, 2, 61),
            Trans(0, 39, 2, 61),
            Trans(0, 42, 1, 60),
            Trans(0, 43, 1, 60),
        ],
        k: 1,
    },
    /* 22 - "Optional" */
    LookaheadDFA {
        prod0: 57,
        transitions: &[],
        k: 0,
    },
    /* 23 - "Parol" */
    LookaheadDFA {
        prod0: 0,
        transitions: &[],
        k: 0,
    },
    /* 24 - "PositiveLookahead" */
    LookaheadDFA {
        prod0: 83,
        transitions: &[],
        k: 0,
    },
    /* 25 - "Production" */
    LookaheadDFA {
        prod0: 27,
        transitions: &[],
        k: 0,
    },
    /* 26 - "Prolog" */
    LookaheadDFA {
        prod0: 1,
        transitions: &[],
        k: 0,
    },
    /* 27 - "PrologList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 1, 4),
            Trans(0, 7, 1, 4),
            Trans(0, 8, 1, 4),
            Trans(0, 10, 1, 4),
            Trans(0, 12, 1, 4),
            Trans(0, 13, 1, 4),
            Trans(0, 14, 1, 4),
            Trans(0, 15, 1, 4),
            Trans(0, 16, 1, 4),
            Trans(0, 17, 1, 4),
            Trans(0, 18, 1, 4),
            Trans(0, 19, 1, 4),
            Trans(0, 23, 2, 5),
            Trans(0, 40, 2, 5),
        ],
        k: 1,
    },
    /* 28 - "PrologList0" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 23, 2, 3), Trans(0, 40, 1, 2)],
        k: 1,
    },
    /* 29 - "RawString" */
    LookaheadDFA {
        prod0: 54,
        transitions: &[],
        k: 0,
    },
    /* 30 - "Regex" */
    LookaheadDFA {
        prod0: 55,
        transitions: &[],
        k: 0,
    },
    /* 31 - "Repeat" */
    LookaheadDFA {
        prod0: 58,
        transitions: &[],
        k: 0,
    },
    /* 32 - "ScannerDirectives" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 14, 1, 14),
            Trans(0, 15, 2, 15),
            Trans(0, 16, 3, 16),
            Trans(0, 17, 4, 17),
            Trans(0, 18, 5, 18),
            Trans(0, 19, 6, 19),
        ],
        k: 1,
    },
    /* 33 - "ScannerState" */
    LookaheadDFA {
        prod0: 63,
        transitions: &[],
        k: 0,
    },
    /* 34 - "ScannerStateDirectives" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 20, 1, 20),
            Trans(0, 21, 2, 21),
            Trans(0, 22, 3, 22),
        ],
        k: 1,
    },
    /* 35 - "ScannerStateList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 14, 1, 64),
            Trans(0, 15, 1, 64),
            Trans(0, 16, 1, 64),
            Trans(0, 17, 1, 64),
            Trans(0, 18, 1, 64),
            Trans(0, 19, 1, 64),
            Trans(0, 38, 2, 65),
        ],
        k: 1,
    },
    /* 36 - "SimpleToken" */
    LookaheadDFA {
        prod0: 47,
        transitions: &[],
        k: 0,
    },
    /* 37 - "SimpleTokenOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 25, 1, 48),
            Trans(0, 26, 2, 49),
            Trans(0, 27, 2, 49),
            Trans(0, 28, 2, 49),
            Trans(0, 30, 2, 49),
            Trans(0, 31, 2, 49),
            Trans(0, 32, 2, 49),
            Trans(0, 33, 2, 49),
            Trans(0, 34, 2, 49),
            Trans(0, 35, 2, 49),
            Trans(0, 36, 2, 49),
            Trans(0, 37, 2, 49),
            Trans(0, 38, 2, 49),
            Trans(0, 39, 2, 49),
            Trans(0, 42, 1, 48),
            Trans(0, 43, 1, 48),
        ],
        k: 1,
    },
    /* 38 - "StartDeclaration" */
    LookaheadDFA {
        prod0: 6,
        transitions: &[],
        k: 0,
    },
    /* 39 - "String" */
    LookaheadDFA {
        prod0: 53,
        transitions: &[],
        k: 0,
    },
    /* 40 - "Symbol" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 28, 3, 40),
            Trans(0, 30, 2, 39),
            Trans(0, 31, 2, 39),
            Trans(0, 32, 2, 39),
            Trans(0, 39, 1, 38),
        ],
        k: 1,
    },
    /* 41 - "TokenExpression" */
    LookaheadDFA {
        prod0: 44,
        transitions: &[],
        k: 0,
    },
    /* 42 - "TokenExpressionOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 25, 2, 46),
            Trans(0, 26, 2, 46),
            Trans(0, 27, 2, 46),
            Trans(0, 28, 2, 46),
            Trans(0, 30, 2, 46),
            Trans(0, 31, 2, 46),
            Trans(0, 32, 2, 46),
            Trans(0, 33, 2, 46),
            Trans(0, 34, 2, 46),
            Trans(0, 35, 2, 46),
            Trans(0, 36, 2, 46),
            Trans(0, 37, 2, 46),
            Trans(0, 38, 2, 46),
            Trans(0, 39, 2, 46),
            Trans(0, 42, 2, 46),
            Trans(0, 43, 2, 46),
            Trans(0, 44, 1, 45),
            Trans(0, 45, 1, 45),
        ],
        k: 1,
    },
    /* 43 - "TokenLiteral" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 30, 1, 41),
            Trans(0, 31, 2, 42),
            Trans(0, 32, 3, 43),
        ],
        k: 1,
    },
    /* 44 - "TokenWithStates" */
    LookaheadDFA {
        prod0: 50,
        transitions: &[],
        k: 0,
    },
    /* 45 - "TokenWithStatesOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 25, 1, 51),
            Trans(0, 26, 2, 52),
            Trans(0, 27, 2, 52),
            Trans(0, 28, 2, 52),
            Trans(0, 30, 2, 52),
            Trans(0, 31, 2, 52),
            Trans(0, 32, 2, 52),
            Trans(0, 33, 2, 52),
            Trans(0, 34, 2, 52),
            Trans(0, 35, 2, 52),
            Trans(0, 36, 2, 52),
            Trans(0, 37, 2, 52),
            Trans(0, 38, 2, 52),
            Trans(0, 39, 2, 52),
            Trans(0, 42, 1, 51),
            Trans(0, 43, 1, 51),
        ],
        k: 1,
    },
    /* 46 - "UserTypeDeclaration" */
    LookaheadDFA {
        prod0: 76,
        transitions: &[],
        k: 0,
    },
    /* 47 - "UserTypeName" */
    LookaheadDFA {
        prod0: 77,
        transitions: &[],
        k: 0,
    },
    /* 48 - "UserTypeNameList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 2, 79),
            Trans(0, 7, 2, 79),
            Trans(0, 8, 2, 79),
            Trans(0, 10, 2, 79),
            Trans(0, 12, 2, 79),
            Trans(0, 13, 2, 79),
            Trans(0, 14, 2, 79),
            Trans(0, 15, 2, 79),
            Trans(0, 16, 2, 79),
            Trans(0, 17, 2, 79),
            Trans(0, 18, 2, 79),
            Trans(0, 19, 2, 79),
            Trans(0, 23, 2, 79),
            Trans(0, 24, 1, 78),
            Trans(0, 26, 2, 79),
            Trans(0, 27, 2, 79),
            Trans(0, 28, 2, 79),
            Trans(0, 30, 2, 79),
            Trans(0, 31, 2, 79),
            Trans(0, 32, 2, 79),
            Trans(0, 33, 2, 79),
            Trans(0, 34, 2, 79),
            Trans(0, 35, 2, 79),
            Trans(0, 36, 2, 79),
            Trans(0, 37, 2, 79),
            Trans(0, 38, 2, 79),
            Trans(0, 39, 2, 79),
            Trans(0, 40, 2, 79),
        ],
        k: 1,
    },
];

pub const PRODUCTIONS: &[Production; 85] = &[
    // 0 - Parol: Prolog GrammarDefinition;
    Production {
        lhs: 23,
        production: &[ParseType::N(10), ParseType::N(26)],
    },
    // 1 - Prolog: StartDeclaration PrologList /* Vec */ PrologList0 /* Vec */;
    Production {
        lhs: 26,
        production: &[ParseType::N(28), ParseType::N(27), ParseType::N(38)],
    },
    // 2 - PrologList0: ScannerState : crate::parser::parol_grammar::ScannerConfig  PrologList0;
    Production {
        lhs: 28,
        production: &[ParseType::N(28), ParseType::N(33)],
    },
    // 3 - PrologList0: ;
    Production {
        lhs: 28,
        production: &[],
    },
    // 4 - PrologList: Declaration PrologList;
    Production {
        lhs: 27,
        production: &[ParseType::N(27), ParseType::N(7)],
    },
    // 5 - PrologList: ;
    Production {
        lhs: 27,
        production: &[],
    },
    // 6 - StartDeclaration: '%start'^ /* Clipped */ Identifier;
    Production {
        lhs: 38,
        production: &[ParseType::N(13), ParseType::T(5)],
    },
    // 7 - Declaration: '%title'^ /* Clipped */ String;
    Production {
        lhs: 7,
        production: &[ParseType::N(39), ParseType::T(6)],
    },
    // 8 - Declaration: '%comment'^ /* Clipped */ String;
    Production {
        lhs: 7,
        production: &[ParseType::N(39), ParseType::T(7)],
    },
    // 9 - Declaration: '%user_type'^ /* Clipped */ Identifier '='^ /* Clipped */ UserTypeName : crate::parser::parol_grammar::UserDefinedTypeName ;
    Production {
        lhs: 7,
        production: &[
            ParseType::N(47),
            ParseType::T(9),
            ParseType::N(13),
            ParseType::T(8),
        ],
    },
    // 10 - Declaration: "%nt_type" Identifier@nt_name "="^ /* Clipped */ UserTypeName@nt_type : crate::parser::parol_grammar::UserDefinedTypeName ;
    Production {
        lhs: 7,
        production: &[
            ParseType::N(47),
            ParseType::T(9),
            ParseType::N(13),
            ParseType::T(10),
        ],
    },
    // 11 - Declaration: "%t_type" UserTypeName@t_type : crate::parser::parol_grammar::UserDefinedTypeName ;
    Production {
        lhs: 7,
        production: &[ParseType::N(47), ParseType::T(12)],
    },
    // 12 - Declaration: '%grammar_type'^ /* Clipped */ RawString;
    Production {
        lhs: 7,
        production: &[ParseType::N(29), ParseType::T(13)],
    },
    // 13 - Declaration: ScannerDirectives;
    Production {
        lhs: 7,
        production: &[ParseType::N(32)],
    },
    // 14 - ScannerDirectives: '%line_comment'^ /* Clipped */ TokenLiteral;
    Production {
        lhs: 32,
        production: &[ParseType::N(43), ParseType::T(14)],
    },
    // 15 - ScannerDirectives: '%block_comment'^ /* Clipped */ TokenLiteral TokenLiteral;
    Production {
        lhs: 32,
        production: &[ParseType::N(43), ParseType::N(43), ParseType::T(15)],
    },
    // 16 - ScannerDirectives: '%auto_newline_off'^ /* Clipped */;
    Production {
        lhs: 32,
        production: &[ParseType::T(16)],
    },
    // 17 - ScannerDirectives: '%auto_ws_off'^ /* Clipped */;
    Production {
        lhs: 32,
        production: &[ParseType::T(17)],
    },
    // 18 - ScannerDirectives: '%on'^ /* Clipped */ IdentifierList ScannerStateDirectives : crate::parser::parol_grammar::ScannerStateSwitch ;
    Production {
        lhs: 32,
        production: &[ParseType::N(34), ParseType::N(14), ParseType::T(18)],
    },
    // 19 - ScannerDirectives: '%allow_unmatched'^ /* Clipped */;
    Production {
        lhs: 32,
        production: &[ParseType::T(19)],
    },
    // 20 - ScannerStateDirectives: '%enter'^ /* Clipped */ Identifier;
    Production {
        lhs: 34,
        production: &[ParseType::N(13), ParseType::T(20)],
    },
    // 21 - ScannerStateDirectives: '%push'^ /* Clipped */ Identifier;
    Production {
        lhs: 34,
        production: &[ParseType::N(13), ParseType::T(21)],
    },
    // 22 - ScannerStateDirectives: '%pop';
    Production {
        lhs: 34,
        production: &[ParseType::T(22)],
    },
    // 23 - GrammarDefinition: '%%'^ /* Clipped */ Production GrammarDefinitionList /* Vec */;
    Production {
        lhs: 10,
        production: &[ParseType::N(11), ParseType::N(25), ParseType::T(23)],
    },
    // 24 - GrammarDefinitionList: Production GrammarDefinitionList;
    Production {
        lhs: 11,
        production: &[ParseType::N(11), ParseType::N(25)],
    },
    // 25 - GrammarDefinitionList: ;
    Production {
        lhs: 11,
        production: &[],
    },
    // 26 - DoubleColon: '::';
    Production {
        lhs: 8,
        production: &[ParseType::T(24)],
    },
    // 27 - Production: Identifier ':'^ /* Clipped */ Alternations ';'^ /* Clipped */;
    Production {
        lhs: 25,
        production: &[
            ParseType::T(26),
            ParseType::N(4),
            ParseType::T(25),
            ParseType::N(13),
        ],
    },
    // 28 - Alternations: Alternation AlternationsList /* Vec */;
    Production {
        lhs: 4,
        production: &[ParseType::N(5), ParseType::N(2)],
    },
    // 29 - AlternationsList: '|'^ /* Clipped */ Alternation AlternationsList;
    Production {
        lhs: 5,
        production: &[ParseType::N(5), ParseType::N(2), ParseType::T(27)],
    },
    // 30 - AlternationsList: ;
    Production {
        lhs: 5,
        production: &[],
    },
    // 31 - Alternation: AlternationList /* Vec */;
    Production {
        lhs: 2,
        production: &[ParseType::N(3)],
    },
    // 32 - AlternationList: Factor AlternationList;
    Production {
        lhs: 3,
        production: &[ParseType::N(3), ParseType::N(9)],
    },
    // 33 - AlternationList: ;
    Production {
        lhs: 3,
        production: &[],
    },
    // 34 - Factor: Group;
    Production {
        lhs: 9,
        production: &[ParseType::N(12)],
    },
    // 35 - Factor: Repeat;
    Production {
        lhs: 9,
        production: &[ParseType::N(31)],
    },
    // 36 - Factor: Optional;
    Production {
        lhs: 9,
        production: &[ParseType::N(22)],
    },
    // 37 - Factor: Symbol;
    Production {
        lhs: 9,
        production: &[ParseType::N(40)],
    },
    // 38 - Symbol: NonTerminal;
    Production {
        lhs: 40,
        production: &[ParseType::N(20)],
    },
    // 39 - Symbol: SimpleToken;
    Production {
        lhs: 40,
        production: &[ParseType::N(36)],
    },
    // 40 - Symbol: TokenWithStates;
    Production {
        lhs: 40,
        production: &[ParseType::N(44)],
    },
    // 41 - TokenLiteral: String;
    Production {
        lhs: 43,
        production: &[ParseType::N(39)],
    },
    // 42 - TokenLiteral: RawString;
    Production {
        lhs: 43,
        production: &[ParseType::N(29)],
    },
    // 43 - TokenLiteral: Regex;
    Production {
        lhs: 43,
        production: &[ParseType::N(30)],
    },
    // 44 - TokenExpression: TokenLiteral TokenExpressionOpt /* Option */;
    Production {
        lhs: 41,
        production: &[ParseType::N(42), ParseType::N(43)],
    },
    // 45 - TokenExpressionOpt: LookAhead;
    Production {
        lhs: 42,
        production: &[ParseType::N(16)],
    },
    // 46 - TokenExpressionOpt: ;
    Production {
        lhs: 42,
        production: &[],
    },
    // 47 - SimpleToken: TokenExpression SimpleTokenOpt /* Option */;
    Production {
        lhs: 36,
        production: &[ParseType::N(37), ParseType::N(41)],
    },
    // 48 - SimpleTokenOpt: ASTControl;
    Production {
        lhs: 37,
        production: &[ParseType::N(0)],
    },
    // 49 - SimpleTokenOpt: ;
    Production {
        lhs: 37,
        production: &[],
    },
    // 50 - TokenWithStates: '<'^ /* Clipped */ IdentifierList '>'^ /* Clipped */ TokenExpression TokenWithStatesOpt /* Option */;
    Production {
        lhs: 44,
        production: &[
            ParseType::N(45),
            ParseType::N(41),
            ParseType::T(29),
            ParseType::N(14),
            ParseType::T(28),
        ],
    },
    // 51 - TokenWithStatesOpt: ASTControl;
    Production {
        lhs: 45,
        production: &[ParseType::N(0)],
    },
    // 52 - TokenWithStatesOpt: ;
    Production {
        lhs: 45,
        production: &[],
    },
    // 53 - String: /"(\\.|[^"])*"/;
    Production {
        lhs: 39,
        production: &[ParseType::T(30)],
    },
    // 54 - RawString: /'(\\.|[^'])*'/;
    Production {
        lhs: 29,
        production: &[ParseType::T(31)],
    },
    // 55 - Regex: "/(\\.|[^\/])*/";
    Production {
        lhs: 30,
        production: &[ParseType::T(32)],
    },
    // 56 - Group: '(' Alternations ')';
    Production {
        lhs: 12,
        production: &[ParseType::T(34), ParseType::N(4), ParseType::T(33)],
    },
    // 57 - Optional: '[' Alternations ']';
    Production {
        lhs: 22,
        production: &[ParseType::T(36), ParseType::N(4), ParseType::T(35)],
    },
    // 58 - Repeat: '{' Alternations '}';
    Production {
        lhs: 31,
        production: &[ParseType::T(38), ParseType::N(4), ParseType::T(37)],
    },
    // 59 - NonTerminal: Identifier NonTerminalOpt /* Option */;
    Production {
        lhs: 20,
        production: &[ParseType::N(21), ParseType::N(13)],
    },
    // 60 - NonTerminalOpt: ASTControl;
    Production {
        lhs: 21,
        production: &[ParseType::N(0)],
    },
    // 61 - NonTerminalOpt: ;
    Production {
        lhs: 21,
        production: &[],
    },
    // 62 - Identifier: /[a-zA-Z_][a-zA-Z0-9_]*/;
    Production {
        lhs: 13,
        production: &[ParseType::T(39)],
    },
    // 63 - ScannerState: '%scanner'^ /* Clipped */ Identifier@state_name '{'^ /* Clipped */ ScannerStateList /* Vec */ '}'^ /* Clipped */;
    Production {
        lhs: 33,
        production: &[
            ParseType::T(38),
            ParseType::N(35),
            ParseType::T(37),
            ParseType::N(13),
            ParseType::T(40),
        ],
    },
    // 64 - ScannerStateList: ScannerDirectives ScannerStateList;
    Production {
        lhs: 35,
        production: &[ParseType::N(35), ParseType::N(32)],
    },
    // 65 - ScannerStateList: ;
    Production {
        lhs: 35,
        production: &[],
    },
    // 66 - IdentifierList: Identifier IdentifierListList /* Vec */;
    Production {
        lhs: 14,
        production: &[ParseType::N(15), ParseType::N(13)],
    },
    // 67 - IdentifierListList: ','^ /* Clipped */ Identifier IdentifierListList;
    Production {
        lhs: 15,
        production: &[ParseType::N(15), ParseType::N(13), ParseType::T(41)],
    },
    // 68 - IdentifierListList: ;
    Production {
        lhs: 15,
        production: &[],
    },
    // 69 - ASTControl: CutOperator;
    Production {
        lhs: 0,
        production: &[ParseType::N(6)],
    },
    // 70 - ASTControl: MemberName ASTControlOpt /* Option */;
    Production {
        lhs: 0,
        production: &[ParseType::N(1), ParseType::N(18)],
    },
    // 71 - ASTControl: UserTypeDeclaration;
    Production {
        lhs: 0,
        production: &[ParseType::N(46)],
    },
    // 72 - ASTControlOpt: UserTypeDeclaration;
    Production {
        lhs: 1,
        production: &[ParseType::N(46)],
    },
    // 73 - ASTControlOpt: ;
    Production {
        lhs: 1,
        production: &[],
    },
    // 74 - MemberName: '@'^ /* Clipped */ Identifier;
    Production {
        lhs: 18,
        production: &[ParseType::N(13), ParseType::T(42)],
    },
    // 75 - CutOperator: '^'^ /* Clipped */;
    Production {
        lhs: 6,
        production: &[ParseType::T(43)],
    },
    // 76 - UserTypeDeclaration: ':'^ /* Clipped */ UserTypeName : crate::parser::parol_grammar::UserDefinedTypeName ;
    Production {
        lhs: 46,
        production: &[ParseType::N(47), ParseType::T(25)],
    },
    // 77 - UserTypeName: Identifier UserTypeNameList /* Vec */;
    Production {
        lhs: 47,
        production: &[ParseType::N(48), ParseType::N(13)],
    },
    // 78 - UserTypeNameList: DoubleColon^ /* Clipped */ Identifier UserTypeNameList;
    Production {
        lhs: 48,
        production: &[ParseType::N(48), ParseType::N(13), ParseType::N(8)],
    },
    // 79 - UserTypeNameList: ;
    Production {
        lhs: 48,
        production: &[],
    },
    // 80 - LookAhead: LookAheadGroup TokenLiteral;
    Production {
        lhs: 16,
        production: &[ParseType::N(43), ParseType::N(17)],
    },
    // 81 - LookAheadGroup: PositiveLookahead;
    Production {
        lhs: 17,
        production: &[ParseType::N(24)],
    },
    // 82 - LookAheadGroup: NegativeLookahead;
    Production {
        lhs: 17,
        production: &[ParseType::N(19)],
    },
    // 83 - PositiveLookahead: '?='^ /* Clipped */;
    Production {
        lhs: 24,
        production: &[ParseType::T(44)],
    },
    // 84 - NegativeLookahead: '?!'^ /* Clipped */;
    Production {
        lhs: 19,
        production: &[ParseType::T(45)],
    },
];

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut ParolGrammar<'t>,
) -> Result<ParseTree, ParolError>
where
    T: AsRef<Path>,
{
    use parol_runtime::{
        parser::{parse_tree_type::SynTree, parser_types::SynTreeFlavor},
        syntree::Builder,
    };
    let mut builder = Builder::<SynTree, SynTreeFlavor>::new_with();
    parse_into(input, &mut builder, file_name, user_actions)?;
    Ok(builder.build()?)
}
#[allow(dead_code)]
pub fn parse_into<'t, T: TreeConstruct<'t>>(
    input: &'t str,
    tree_builder: &mut T,
    file_name: impl AsRef<Path>,
    user_actions: &mut ParolGrammar<'t>,
) -> Result<(), ParolError>
where
    ParolError: From<T::Error>,
{
    use parol_grammar_scanner::ParolGrammarScanner;
    let mut llk_parser = LLKParser::new(
        23,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    let scanner = ParolGrammarScanner::new();
    // Initialize wrapper
    let mut user_actions = ParolGrammarAuto::new(user_actions);
    llk_parser.parse_into(
        tree_builder,
        TokenStream::new(
            input,
            file_name,
            scanner.scanner_impl.clone(),
            &ParolGrammarScanner::match_function,
            MAX_K,
        )
        .unwrap(),
        &mut user_actions,
    )
}
